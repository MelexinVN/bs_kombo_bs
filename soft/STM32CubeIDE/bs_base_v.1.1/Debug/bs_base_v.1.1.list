
bs_base_v.1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000636c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  0000810c  2**0
                  CONTENTS
  4 .ARM          00000008  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006654  08006654  0000810c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800665c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000010c  08006768  0000810c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08006768  000084f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcc2  00000000  00000000  00008135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cfc  00000000  00000000  00017df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0001baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed2  00000000  00000000  0001cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de36  00000000  00000000  0001dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab89  00000000  00000000  0003bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937d0  00000000  00000000  00056759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  000e9f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000efa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006460 	.word	0x08006460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08006460 	.word	0x08006460

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800016a:	601a      	str	r2, [r3, #0]
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000176:	b480      	push	{r7}
 8000178:	b083      	sub	sp, #12
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000186:	2b80      	cmp	r3, #128	@ 0x80
 8000188:	bf0c      	ite	eq
 800018a:	2301      	moveq	r3, #1
 800018c:	2300      	movne	r3, #0
 800018e:	b2db      	uxtb	r3, r3
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800019a:	b480      	push	{r7}
 800019c:	b083      	sub	sp, #12
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	460b      	mov	r3, r1
 80001a4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80001a6:	78fa      	ldrb	r2, [r7, #3]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	605a      	str	r2, [r3, #4]
}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
	...

080001b8 <usart3_transmit>:
//массив для отправки модулю
uint8_t mp3[ARR_SIZE];

//Процедура отправки одного байта
void usart3_transmit(uint8_t data) 
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3)) {}		//ждем отправки предыдущего байта
 80001c2:	bf00      	nop
 80001c4:	4807      	ldr	r0, [pc, #28]	@ (80001e4 <usart3_transmit+0x2c>)
 80001c6:	f7ff ffd6 	bl	8000176 <LL_USART_IsActiveFlag_TXE>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0f9      	beq.n	80001c4 <usart3_transmit+0xc>
  LL_USART_TransmitData8(USART3,data);						//отправляем очередной байт в порт
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4619      	mov	r1, r3
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <usart3_transmit+0x2c>)
 80001d6:	f7ff ffe0 	bl	800019a <LL_USART_TransmitData8>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40004800 	.word	0x40004800

080001e8 <usart3_print>:

//Процедура отправки массива
void usart3_print(uint8_t *str)
{	
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ARR_SIZE; i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e009      	b.n	800020a <usart3_print+0x22>
	{
		usart3_transmit(str[i]); //отправляем очередной байт
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffda 	bl	80001b8 <usart3_transmit>
	for (int i = 0; i < ARR_SIZE; i++)
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2b09      	cmp	r3, #9
 800020e:	ddf2      	ble.n	80001f6 <usart3_print+0xe>
	}
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <mp3_init>:

//Процедура инициализации звукового модуля
void mp3_init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	uint16_t crc = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
	uint16_t j = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	803b      	strh	r3, [r7, #0]
	
	//заполняем массив
	mp3[j++] = DF_START;
 800022a:	883b      	ldrh	r3, [r7, #0]
 800022c:	1c5a      	adds	r2, r3, #1
 800022e:	803a      	strh	r2, [r7, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b38      	ldr	r3, [pc, #224]	@ (8000314 <mp3_init+0xf8>)
 8000234:	217e      	movs	r1, #126	@ 0x7e
 8000236:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 8000238:	883b      	ldrh	r3, [r7, #0]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	803a      	strh	r2, [r7, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	4b34      	ldr	r3, [pc, #208]	@ (8000314 <mp3_init+0xf8>)
 8000242:	21ff      	movs	r1, #255	@ 0xff
 8000244:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 8000246:	883b      	ldrh	r3, [r7, #0]
 8000248:	1c5a      	adds	r2, r3, #1
 800024a:	803a      	strh	r2, [r7, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	4b31      	ldr	r3, [pc, #196]	@ (8000314 <mp3_init+0xf8>)
 8000250:	2106      	movs	r1, #6
 8000252:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_INIT;
 8000254:	883b      	ldrh	r3, [r7, #0]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	803a      	strh	r2, [r7, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <mp3_init+0xf8>)
 800025e:	213f      	movs	r1, #63	@ 0x3f
 8000260:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000262:	883b      	ldrh	r3, [r7, #0]
 8000264:	1c5a      	adds	r2, r3, #1
 8000266:	803a      	strh	r2, [r7, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <mp3_init+0xf8>)
 800026c:	2100      	movs	r1, #0
 800026e:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	803a      	strh	r2, [r7, #0]
 8000276:	461a      	mov	r2, r3
 8000278:	4b26      	ldr	r3, [pc, #152]	@ (8000314 <mp3_init+0xf8>)
 800027a:	2100      	movs	r1, #0
 800027c:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x02;
 800027e:	883b      	ldrh	r3, [r7, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	803a      	strh	r2, [r7, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b23      	ldr	r3, [pc, #140]	@ (8000314 <mp3_init+0xf8>)
 8000288:	2102      	movs	r1, #2
 800028a:	5499      	strb	r1, [r3, r2]
	
	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 800028c:	2301      	movs	r3, #1
 800028e:	717b      	strb	r3, [r7, #5]
 8000290:	e009      	b.n	80002a6 <mp3_init+0x8a>
	{
		crc += mp3[i];
 8000292:	797b      	ldrb	r3, [r7, #5]
 8000294:	4a1f      	ldr	r2, [pc, #124]	@ (8000314 <mp3_init+0xf8>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	461a      	mov	r2, r3
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4413      	add	r3, r2
 800029e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 1; i < 7; i++)
 80002a0:	797b      	ldrb	r3, [r7, #5]
 80002a2:	3301      	adds	r3, #1
 80002a4:	717b      	strb	r3, [r7, #5]
 80002a6:	797b      	ldrb	r3, [r7, #5]
 80002a8:	2b06      	cmp	r3, #6
 80002aa:	d9f2      	bls.n	8000292 <mp3_init+0x76>
	}
	crc = UINT16_MAX - crc + 1;
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	425b      	negs	r3, r3
 80002b0:	80fb      	strh	r3, [r7, #6]

	mp3[j++] = (uint8_t)(crc >> 8);
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b299      	uxth	r1, r3
 80002b8:	883b      	ldrh	r3, [r7, #0]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	803a      	strh	r2, [r7, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	b2c9      	uxtb	r1, r1
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <mp3_init+0xf8>)
 80002c4:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80002c6:	883b      	ldrh	r3, [r7, #0]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	803a      	strh	r2, [r7, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	b2d9      	uxtb	r1, r3
 80002d2:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <mp3_init+0xf8>)
 80002d4:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80002d6:	883b      	ldrh	r3, [r7, #0]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	803a      	strh	r2, [r7, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <mp3_init+0xf8>)
 80002e0:	21ef      	movs	r1, #239	@ 0xef
 80002e2:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80002e4:	480b      	ldr	r0, [pc, #44]	@ (8000314 <mp3_init+0xf8>)
 80002e6:	f7ff ff7f 	bl	80001e8 <usart3_print>
	
	//пауза в 1 секунду
	uint16_t count = 1000;
 80002ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002ee:	807b      	strh	r3, [r7, #2]
	while(count--)
 80002f0:	e005      	b.n	80002fe <mp3_init+0xe2>
	{
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80002f2:	4809      	ldr	r0, [pc, #36]	@ (8000318 <mp3_init+0xfc>)
 80002f4:	f7ff ff32 	bl	800015c <LL_IWDG_ReloadCounter>
		#endif
		LL_mDelay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f004 fec1 	bl	8005080 <LL_mDelay>
	while(count--)
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	1e5a      	subs	r2, r3, #1
 8000302:	807a      	strh	r2, [r7, #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f4      	bne.n	80002f2 <mp3_init+0xd6>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000128 	.word	0x20000128
 8000318:	40003000 	.word	0x40003000

0800031c <mp3_play>:

//Процедура воспроизведения файла под номером
void mp3_play(uint8_t mp3_num)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	uint16_t crc = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	81fb      	strh	r3, [r7, #14]
	uint16_t j = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	817b      	strh	r3, [r7, #10]

	//заполняем массив
	mp3[j++] = DF_START;
 800032e:	897b      	ldrh	r3, [r7, #10]
 8000330:	1c5a      	adds	r2, r3, #1
 8000332:	817a      	strh	r2, [r7, #10]
 8000334:	461a      	mov	r2, r3
 8000336:	4b31      	ldr	r3, [pc, #196]	@ (80003fc <mp3_play+0xe0>)
 8000338:	217e      	movs	r1, #126	@ 0x7e
 800033a:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 800033c:	897b      	ldrh	r3, [r7, #10]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	817a      	strh	r2, [r7, #10]
 8000342:	461a      	mov	r2, r3
 8000344:	4b2d      	ldr	r3, [pc, #180]	@ (80003fc <mp3_play+0xe0>)
 8000346:	21ff      	movs	r1, #255	@ 0xff
 8000348:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 800034a:	897b      	ldrh	r3, [r7, #10]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	817a      	strh	r2, [r7, #10]
 8000350:	461a      	mov	r2, r3
 8000352:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <mp3_play+0xe0>)
 8000354:	2106      	movs	r1, #6
 8000356:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_NUM;
 8000358:	897b      	ldrh	r3, [r7, #10]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	817a      	strh	r2, [r7, #10]
 800035e:	461a      	mov	r2, r3
 8000360:	4b26      	ldr	r3, [pc, #152]	@ (80003fc <mp3_play+0xe0>)
 8000362:	2103      	movs	r1, #3
 8000364:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	817a      	strh	r2, [r7, #10]
 800036c:	461a      	mov	r2, r3
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <mp3_play+0xe0>)
 8000370:	2100      	movs	r1, #0
 8000372:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)(mp3_num >> 8);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	1219      	asrs	r1, r3, #8
 8000378:	897b      	ldrh	r3, [r7, #10]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	817a      	strh	r2, [r7, #10]
 800037e:	461a      	mov	r2, r3
 8000380:	b2c9      	uxtb	r1, r1
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <mp3_play+0xe0>)
 8000384:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)mp3_num;
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	817a      	strh	r2, [r7, #10]
 800038c:	4619      	mov	r1, r3
 800038e:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <mp3_play+0xe0>)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	5453      	strb	r3, [r2, r1]

	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 8000394:	2301      	movs	r3, #1
 8000396:	737b      	strb	r3, [r7, #13]
 8000398:	e009      	b.n	80003ae <mp3_play+0x92>
	{
		crc += mp3[i];
 800039a:	7b7b      	ldrb	r3, [r7, #13]
 800039c:	4a17      	ldr	r2, [pc, #92]	@ (80003fc <mp3_play+0xe0>)
 800039e:	5cd3      	ldrb	r3, [r2, r3]
 80003a0:	461a      	mov	r2, r3
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	4413      	add	r3, r2
 80003a6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 1; i < 7; i++)
 80003a8:	7b7b      	ldrb	r3, [r7, #13]
 80003aa:	3301      	adds	r3, #1
 80003ac:	737b      	strb	r3, [r7, #13]
 80003ae:	7b7b      	ldrb	r3, [r7, #13]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9f2      	bls.n	800039a <mp3_play+0x7e>
	}
	crc = UINT16_MAX - crc + 1;
 80003b4:	89fb      	ldrh	r3, [r7, #14]
 80003b6:	425b      	negs	r3, r3
 80003b8:	81fb      	strh	r3, [r7, #14]

	mp3[j++] = (uint8_t)(crc >> 8);
 80003ba:	89fb      	ldrh	r3, [r7, #14]
 80003bc:	0a1b      	lsrs	r3, r3, #8
 80003be:	b299      	uxth	r1, r3
 80003c0:	897b      	ldrh	r3, [r7, #10]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	817a      	strh	r2, [r7, #10]
 80003c6:	461a      	mov	r2, r3
 80003c8:	b2c9      	uxtb	r1, r1
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <mp3_play+0xe0>)
 80003cc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80003ce:	897b      	ldrh	r3, [r7, #10]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	817a      	strh	r2, [r7, #10]
 80003d4:	461a      	mov	r2, r3
 80003d6:	89fb      	ldrh	r3, [r7, #14]
 80003d8:	b2d9      	uxtb	r1, r3
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <mp3_play+0xe0>)
 80003dc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80003de:	897b      	ldrh	r3, [r7, #10]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	817a      	strh	r2, [r7, #10]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <mp3_play+0xe0>)
 80003e8:	21ef      	movs	r1, #239	@ 0xef
 80003ea:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80003ec:	4803      	ldr	r0, [pc, #12]	@ (80003fc <mp3_play+0xe0>)
 80003ee:	f7ff fefb 	bl	80001e8 <usart3_print>
}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000128 	.word	0x20000128

08000400 <mp3_volume>:

//Процедура установки громкости звука
void mp3_volume(uint8_t vol)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	uint16_t crc = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	81fb      	strh	r3, [r7, #14]
	uint16_t j = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	813b      	strh	r3, [r7, #8]
		
	//заполняем массив
	mp3[j++] = DF_START;
 8000412:	893b      	ldrh	r3, [r7, #8]
 8000414:	1c5a      	adds	r2, r3, #1
 8000416:	813a      	strh	r2, [r7, #8]
 8000418:	461a      	mov	r2, r3
 800041a:	4b37      	ldr	r3, [pc, #220]	@ (80004f8 <mp3_volume+0xf8>)
 800041c:	217e      	movs	r1, #126	@ 0x7e
 800041e:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 8000420:	893b      	ldrh	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	813a      	strh	r2, [r7, #8]
 8000426:	461a      	mov	r2, r3
 8000428:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <mp3_volume+0xf8>)
 800042a:	21ff      	movs	r1, #255	@ 0xff
 800042c:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 800042e:	893b      	ldrh	r3, [r7, #8]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	813a      	strh	r2, [r7, #8]
 8000434:	461a      	mov	r2, r3
 8000436:	4b30      	ldr	r3, [pc, #192]	@ (80004f8 <mp3_volume+0xf8>)
 8000438:	2106      	movs	r1, #6
 800043a:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_VOL;
 800043c:	893b      	ldrh	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	813a      	strh	r2, [r7, #8]
 8000442:	461a      	mov	r2, r3
 8000444:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <mp3_volume+0xf8>)
 8000446:	2106      	movs	r1, #6
 8000448:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 800044a:	893b      	ldrh	r3, [r7, #8]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	813a      	strh	r2, [r7, #8]
 8000450:	461a      	mov	r2, r3
 8000452:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <mp3_volume+0xf8>)
 8000454:	2100      	movs	r1, #0
 8000456:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000458:	893b      	ldrh	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	813a      	strh	r2, [r7, #8]
 800045e:	461a      	mov	r2, r3
 8000460:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <mp3_volume+0xf8>)
 8000462:	2100      	movs	r1, #0
 8000464:	5499      	strb	r1, [r3, r2]
	mp3[j++] = vol;
 8000466:	893b      	ldrh	r3, [r7, #8]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	813a      	strh	r2, [r7, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	4a22      	ldr	r2, [pc, #136]	@ (80004f8 <mp3_volume+0xf8>)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	5453      	strb	r3, [r2, r1]

	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 8000474:	2301      	movs	r3, #1
 8000476:	737b      	strb	r3, [r7, #13]
 8000478:	e009      	b.n	800048e <mp3_volume+0x8e>
	{
		crc += mp3[i];
 800047a:	7b7b      	ldrb	r3, [r7, #13]
 800047c:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <mp3_volume+0xf8>)
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	461a      	mov	r2, r3
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	4413      	add	r3, r2
 8000486:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 1; i < 7; i++)
 8000488:	7b7b      	ldrb	r3, [r7, #13]
 800048a:	3301      	adds	r3, #1
 800048c:	737b      	strb	r3, [r7, #13]
 800048e:	7b7b      	ldrb	r3, [r7, #13]
 8000490:	2b06      	cmp	r3, #6
 8000492:	d9f2      	bls.n	800047a <mp3_volume+0x7a>
	}
	crc = UINT16_MAX - crc + 1;
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	425b      	negs	r3, r3
 8000498:	81fb      	strh	r3, [r7, #14]

	mp3[j++] = (uint8_t)(crc >> 8);
 800049a:	89fb      	ldrh	r3, [r7, #14]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	b299      	uxth	r1, r3
 80004a0:	893b      	ldrh	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	813a      	strh	r2, [r7, #8]
 80004a6:	461a      	mov	r2, r3
 80004a8:	b2c9      	uxtb	r1, r1
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <mp3_volume+0xf8>)
 80004ac:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80004ae:	893b      	ldrh	r3, [r7, #8]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	813a      	strh	r2, [r7, #8]
 80004b4:	461a      	mov	r2, r3
 80004b6:	89fb      	ldrh	r3, [r7, #14]
 80004b8:	b2d9      	uxtb	r1, r3
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <mp3_volume+0xf8>)
 80004bc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80004be:	893b      	ldrh	r3, [r7, #8]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	813a      	strh	r2, [r7, #8]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <mp3_volume+0xf8>)
 80004c8:	21ef      	movs	r1, #239	@ 0xef
 80004ca:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80004cc:	480a      	ldr	r0, [pc, #40]	@ (80004f8 <mp3_volume+0xf8>)
 80004ce:	f7ff fe8b 	bl	80001e8 <usart3_print>
	//пауза в 100 мс
	uint16_t count = 100;
 80004d2:	2364      	movs	r3, #100	@ 0x64
 80004d4:	817b      	strh	r3, [r7, #10]
	while(count--)
 80004d6:	e005      	b.n	80004e4 <mp3_volume+0xe4>
	{
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80004d8:	4808      	ldr	r0, [pc, #32]	@ (80004fc <mp3_volume+0xfc>)
 80004da:	f7ff fe3f 	bl	800015c <LL_IWDG_ReloadCounter>
		#endif
		LL_mDelay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f004 fdce 	bl	8005080 <LL_mDelay>
	while(count--)
 80004e4:	897b      	ldrh	r3, [r7, #10]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	817a      	strh	r2, [r7, #10]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1f4      	bne.n	80004d8 <mp3_volume+0xd8>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000128 	.word	0x20000128
 80004fc:	40003000 	.word	0x40003000

08000500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <__NVIC_GetPriorityGrouping+0x18>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	f003 0307 	and.w	r3, r3, #7
}
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	2b00      	cmp	r3, #0
 800052c:	db0b      	blt.n	8000546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f003 021f 	and.w	r2, r3, #31
 8000534:	4906      	ldr	r1, [pc, #24]	@ (8000550 <__NVIC_EnableIRQ+0x34>)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	095b      	lsrs	r3, r3, #5
 800053c:	2001      	movs	r0, #1
 800053e:	fa00 f202 	lsl.w	r2, r0, r2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	@ 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	4907      	ldr	r1, [pc, #28]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4013      	ands	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800063c:	b490      	push	{r4, r7}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	461a      	mov	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	4413      	add	r3, r2
 8000652:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000654:	6822      	ldr	r2, [r4, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	fa93 f3a3 	rbit	r3, r3
 8000660:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	fab3 f383 	clz	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	210f      	movs	r1, #15
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	401a      	ands	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	fa93 f3a3 	rbit	r3, r3
 8000680:	61bb      	str	r3, [r7, #24]
  return result;
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	6023      	str	r3, [r4, #0]
}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bc90      	pop	{r4, r7}
 800069e:	4770      	bx	lr

080006a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	43db      	mvns	r3, r3
 80006b6:	401a      	ands	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	fa93 f3a3 	rbit	r3, r3
 80006c4:	613b      	str	r3, [r7, #16]
  return result;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	408b      	lsls	r3, r1
 80006d4:	431a      	orrs	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60da      	str	r2, [r3, #12]
}
 80006da:	bf00      	nop
 80006dc:	371c      	adds	r7, #28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	615a      	str	r2, [r3, #20]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
	...

08000704 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800070e:	4a13      	ldr	r2, [pc, #76]	@ (800075c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	3302      	adds	r3, #2
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	43db      	mvns	r3, r3
 8000720:	ea02 0103 	and.w	r1, r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	0c1b      	lsrs	r3, r3, #16
 8000728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	fa93 f3a3 	rbit	r3, r3
 8000730:	60bb      	str	r3, [r7, #8]
  return result;
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	fab3 f383 	clz	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	fa03 f202 	lsl.w	r2, r3, r2
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	430a      	orrs	r2, r1
 800074a:	3302      	adds	r3, #2
 800074c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40010000 	.word	0x40010000

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800077e:	2010      	movs	r0, #16
 8000780:	f7ff ff44 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000784:	2020      	movs	r0, #32
 8000786:	f7ff ff41 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800078a:	2004      	movs	r0, #4
 800078c:	f7ff ff3e 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000790:	2008      	movs	r0, #8
 8000792:	f7ff ff3b 	bl	800060c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000796:	4989      	ldr	r1, [pc, #548]	@ (80009bc <MX_GPIO_Init+0x25c>)
 8000798:	4889      	ldr	r0, [pc, #548]	@ (80009c0 <MX_GPIO_Init+0x260>)
 800079a:	f7ff ffa3 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, CE_Pin|CSN_Pin|LL_GPIO_PIN_8);
 800079e:	4989      	ldr	r1, [pc, #548]	@ (80009c4 <MX_GPIO_Init+0x264>)
 80007a0:	4889      	ldr	r0, [pc, #548]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80007a2:	f7ff ff9f 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_14);
 80007a6:	4989      	ldr	r1, [pc, #548]	@ (80009cc <MX_GPIO_Init+0x26c>)
 80007a8:	4889      	ldr	r0, [pc, #548]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80007aa:	f7ff ff9b 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80007ae:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <MX_GPIO_Init+0x25c>)
 80007b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	487f      	ldr	r0, [pc, #508]	@ (80009c0 <MX_GPIO_Init+0x260>)
 80007c4:	f004 f8eb 	bl	800499e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|LL_GPIO_PIN_8;
 80007c8:	4b7e      	ldr	r3, [pc, #504]	@ (80009c4 <MX_GPIO_Init+0x264>)
 80007ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	487a      	ldr	r0, [pc, #488]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80007de:	f004 f8de 	bl	800499e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_14;
 80007e2:	4b7a      	ldr	r3, [pc, #488]	@ (80009cc <MX_GPIO_Init+0x26c>)
 80007e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4876      	ldr	r0, [pc, #472]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80007f8:	f004 f8d1 	bl	800499e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE2);
 80007fc:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff7f 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE15);
 8000806:	4973      	ldr	r1, [pc, #460]	@ (80009d4 <MX_GPIO_Init+0x274>)
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff7b 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE3);
 800080e:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff76 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE4);
 8000818:	496f      	ldr	r1, [pc, #444]	@ (80009d8 <MX_GPIO_Init+0x278>)
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff72 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 8000820:	496e      	ldr	r1, [pc, #440]	@ (80009dc <MX_GPIO_Init+0x27c>)
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff6e 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000828:	2304      	movs	r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800082c:	2301      	movs	r3, #1
 800082e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000830:	2300      	movs	r3, #0
 8000832:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000834:	2302      	movs	r3, #2
 8000836:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	4618      	mov	r0, r3
 800083e:	f003 ff77 	bl	8004730 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000846:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000848:	2301      	movs	r3, #1
 800084a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800084c:	2300      	movs	r3, #0
 800084e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000850:	2302      	movs	r3, #2
 8000852:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4618      	mov	r0, r3
 800085a:	f003 ff69 	bl	8004730 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800085e:	2308      	movs	r3, #8
 8000860:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000862:	2301      	movs	r3, #1
 8000864:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000866:	2300      	movs	r3, #0
 8000868:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800086a:	2302      	movs	r3, #2
 800086c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f003 ff5c 	bl	8004730 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000878:	2310      	movs	r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800087c:	2301      	movs	r3, #1
 800087e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000880:	2300      	movs	r3, #0
 8000882:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000884:	2302      	movs	r3, #2
 8000886:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4618      	mov	r0, r3
 800088e:	f003 ff4f 	bl	8004730 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000892:	2320      	movs	r3, #32
 8000894:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000896:	2301      	movs	r3, #1
 8000898:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800089a:	2300      	movs	r3, #0
 800089c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800089e:	2302      	movs	r3, #2
 80008a0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 ff42 	bl	8004730 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(IRQ_GPIO_Port, IRQ_Pin, LL_GPIO_MODE_FLOATING);
 80008ac:	2204      	movs	r2, #4
 80008ae:	f240 4104 	movw	r1, #1028	@ 0x404
 80008b2:	4845      	ldr	r0, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008b4:	f7ff fec2 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TIME_GPIO_Port, TIME_Pin, LL_GPIO_MODE_INPUT);
 80008b8:	2208      	movs	r2, #8
 80008ba:	4949      	ldr	r1, [pc, #292]	@ (80009e0 <MX_GPIO_Init+0x280>)
 80008bc:	4842      	ldr	r0, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008be:	f7ff febd 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(NEXT_GPIO_Port, NEXT_Pin, LL_GPIO_MODE_INPUT);
 80008c2:	2208      	movs	r2, #8
 80008c4:	f640 0108 	movw	r1, #2056	@ 0x808
 80008c8:	4841      	ldr	r0, [pc, #260]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008ca:	f7ff feb7 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RST_GPIO_Port, RST_Pin, LL_GPIO_MODE_INPUT);
 80008ce:	2208      	movs	r2, #8
 80008d0:	f241 0110 	movw	r1, #4112	@ 0x1010
 80008d4:	483e      	ldr	r0, [pc, #248]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008d6:	f7ff feb1 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SET_GPIO_Port, SET_Pin, LL_GPIO_MODE_INPUT);
 80008da:	2208      	movs	r2, #8
 80008dc:	f242 0120 	movw	r1, #8224	@ 0x2020
 80008e0:	483b      	ldr	r0, [pc, #236]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008e2:	f7ff feab 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinPull(TIME_GPIO_Port, TIME_Pin, LL_GPIO_PULL_UP);
 80008e6:	2201      	movs	r2, #1
 80008e8:	493d      	ldr	r1, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x280>)
 80008ea:	4837      	ldr	r0, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008ec:	f7ff fed8 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(NEXT_GPIO_Port, NEXT_Pin, LL_GPIO_PULL_UP);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f640 0108 	movw	r1, #2056	@ 0x808
 80008f6:	4836      	ldr	r0, [pc, #216]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008f8:	f7ff fed2 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RST_GPIO_Port, RST_Pin, LL_GPIO_PULL_UP);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000902:	4833      	ldr	r0, [pc, #204]	@ (80009d0 <MX_GPIO_Init+0x270>)
 8000904:	f7ff fecc 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SET_GPIO_Port, SET_Pin, LL_GPIO_PULL_UP);
 8000908:	2201      	movs	r2, #1
 800090a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800090e:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x270>)
 8000910:	f7ff fec6 	bl	80006a0 <LL_GPIO_SetPinPull>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000914:	f7ff fdf4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000918:	4603      	mov	r3, r0
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe42 	bl	80005a8 <NVIC_EncodePriority>
 8000924:	4603      	mov	r3, r0
 8000926:	4619      	mov	r1, r3
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fe13 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff fdf4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000934:	f7ff fde4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000938:	4603      	mov	r3, r0
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe32 	bl	80005a8 <NVIC_EncodePriority>
 8000944:	4603      	mov	r3, r0
 8000946:	4619      	mov	r1, r3
 8000948:	2009      	movs	r0, #9
 800094a:	f7ff fe03 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800094e:	2009      	movs	r0, #9
 8000950:	f7ff fde4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000954:	f7ff fdd4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000958:	4603      	mov	r3, r0
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe22 	bl	80005a8 <NVIC_EncodePriority>
 8000964:	4603      	mov	r3, r0
 8000966:	4619      	mov	r1, r3
 8000968:	200a      	movs	r0, #10
 800096a:	f7ff fdf3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 800096e:	200a      	movs	r0, #10
 8000970:	f7ff fdd4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000974:	f7ff fdc4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000978:	4603      	mov	r3, r0
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe12 	bl	80005a8 <NVIC_EncodePriority>
 8000984:	4603      	mov	r3, r0
 8000986:	4619      	mov	r1, r3
 8000988:	2017      	movs	r0, #23
 800098a:	f7ff fde3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800098e:	2017      	movs	r0, #23
 8000990:	f7ff fdc4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000994:	f7ff fdb4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000998:	4603      	mov	r3, r0
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe02 	bl	80005a8 <NVIC_EncodePriority>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4619      	mov	r1, r3
 80009a8:	2028      	movs	r0, #40	@ 0x28
 80009aa:	f7ff fdd3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	@ 0x28
 80009b0:	f7ff fdb4 	bl	800051c <__NVIC_EnableIRQ>

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	04200020 	.word	0x04200020
 80009c0:	40011000 	.word	0x40011000
 80009c4:	04011819 	.word	0x04011819
 80009c8:	40010800 	.word	0x40010800
 80009cc:	04500050 	.word	0x04500050
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	f0000003 	.word	0xf0000003
 80009d8:	000f0001 	.word	0x000f0001
 80009dc:	00f00001 	.word	0x00f00001
 80009e0:	04800080 	.word	0x04800080

080009e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f003 f8b7 	bl	8003b94 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f001 fef2 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000134 	.word	0x20000134
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <HAL_I2C_MspInit+0x70>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d123      	bne.n	8000aa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a78:	23c0      	movs	r3, #192	@ 0xc0
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <HAL_I2C_MspInit+0x78>)
 8000a8c:	f002 fefe 	bl	800388c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9a:	61d3      	str	r3, [r2, #28]
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <LL_IWDG_Enable>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <LL_IWDG_ReloadCounter>:
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f003 0207 	and.w	r2, r3, #7
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	605a      	str	r2, [r3, #4]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU) == 0U) ? 1UL : 0UL);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <LL_IWDG_IsReady+0x18>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <LL_IWDG_IsReady+0x1a>
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
	...

08000b6c <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b72:	f7ff ffa3 	bl	8000abc <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b78:	f7ff ffba 	bl	8000af0 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480a      	ldr	r0, [pc, #40]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b80:	f7ff ffc3 	bl	8000b0a <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 8000b84:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b8a:	f7ff ffcd 	bl	8000b28 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000b8e:	bf00      	nop
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b92:	f7ff ffd8 	bl	8000b46 <LL_IWDG_IsReady>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d1f9      	bne.n	8000b90 <MX_IWDG_Init+0x24>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <MX_IWDG_Init+0x3c>)
 8000b9e:	f7ff ff9a 	bl	8000ad6 <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40003000 	.word	0x40003000

08000bac <LL_GPIO_SetOutputPin>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	611a      	str	r2, [r3, #16]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_GPIO_ResetOutputPin>:
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	615a      	str	r2, [r3, #20]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <interrupt_off>:
char sreg_temp;				//переменная значения регистра статуса
#endif

//Процедура отключения прерываний
void interrupt_off(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
	#endif
	
	#ifdef STM32_LL
	__disable_irq();				//запрещение всех прерываний
	#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <interrupt_on>:

//Процедура включения прерываний
void interrupt_on(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000bfc:	b662      	cpsie	i
}
 8000bfe:	bf00      	nop
	#endif
	
	#ifdef STM32_LL
	__enable_irq();						//разрешение всех прерываний
	#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <uni_delay_us>:

//Функция микросекундной задержки для разных микроконтроллеров
void uni_delay_us(uint32_t us)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	#ifdef ATMEGA88
	while(us--)	_delay_us(1u);				
	#endif
	
	#ifdef STM32_LL
	delay_us(us);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f001 f901 	bl	8001e18 <delay_us>
	#endif
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <nrf24_read_reg>:

//Функция чтения регистра модуля
uint8_t nrf24_read_reg(uint8_t addr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	uint8_t dt = 0, cmd;				//переменные данных и команды
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
	CSN_ON();										//прижимаем ногу CS к земле
 8000c2e:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c32:	480f      	ldr	r0, [pc, #60]	@ (8000c70 <nrf24_read_reg+0x50>)
 8000c34:	f7ff ffc9 	bl	8000bca <LL_GPIO_ResetOutputPin>
	dt = spi_change_byte(addr);	//отправка адреса регистра, прием
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fada 	bl	80011f4 <spi_change_byte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
	
	//если адрес равен адресу регистра статуса то и возварщаем его состояние	
	if (addr != STATUS)					//а если не равен
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d007      	beq.n	8000c5a <nrf24_read_reg+0x3a>
	{
		cmd = 0xFF;								//команда NOP для получения данных
 8000c4a:	23ff      	movs	r3, #255	@ 0xff
 8000c4c:	73bb      	strb	r3, [r7, #14]
		dt = spi_change_byte(cmd);//
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 facf 	bl	80011f4 <spi_change_byte>
 8000c56:	4603      	mov	r3, r0
 8000c58:	73fb      	strb	r3, [r7, #15]
	}
	CSN_OFF();									//поднимаем ногу CS
 8000c5a:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c5e:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <nrf24_read_reg+0x50>)
 8000c60:	f7ff ffa4 	bl	8000bac <LL_GPIO_SetOutputPin>
	return dt;									//возвращаемое значение
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010800 	.word	0x40010800

08000c74 <nrf24_write_reg>:

//Процедура записи регистра в модуль
void nrf24_write_reg(uint8_t addr, uint8_t dt)		
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;					//включаем бит записи в адрес	
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	71fb      	strb	r3, [r7, #7]
	CSN_ON();										//прижимаем ногу CS к земле
 8000c8c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <nrf24_write_reg+0x44>)
 8000c92:	f7ff ff9a 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fa8b 	bl	80011b4 <spi_send_byte>
	spi_send_byte(dt);					//отправляем значение
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa87 	bl	80011b4 <spi_send_byte>
	CSN_OFF();									//поднимаем ногу CS
 8000ca6:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000caa:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <nrf24_write_reg+0x44>)
 8000cac:	f7ff ff7e 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40010800 	.word	0x40010800

08000cbc <nrf24_toggle_features>:

//Процедура активации дополнительных команд
void nrf24_toggle_features(void)							
{	
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t dt = ACTIVATE;	//переменная с командой активации
 8000cc2:	2350      	movs	r3, #80	@ 0x50
 8000cc4:	71fb      	strb	r3, [r7, #7]
	CSN_ON();								//прижимаем ногу CS к земле
 8000cc6:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000cca:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <nrf24_toggle_features+0x40>)
 8000ccc:	f7ff ff7d 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);			//отправляем команду
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fa6e 	bl	80011b4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff ff95 	bl	8000c08 <uni_delay_us>
	
	dt = 0x73;							//следующая команда
 8000cde:	2373      	movs	r3, #115	@ 0x73
 8000ce0:	71fb      	strb	r3, [r7, #7]
	spi_send_byte(dt);			//отправляем команду
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fa65 	bl	80011b4 <spi_send_byte>
	CSN_OFF();							//поднимаем ногу CS
 8000cea:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000cee:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <nrf24_toggle_features+0x40>)
 8000cf0:	f7ff ff5c 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40010800 	.word	0x40010800

08000d00 <nrf24_read_buf>:

//Процедура чтения буфера
void nrf24_read_buf(uint8_t addr,uint8_t *p_buf,uint8_t bytes)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	CSN_ON();										//прижимаем ногу CS к земле
 8000d10:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <nrf24_read_buf+0x5c>)
 8000d16:	f7ff ff58 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fa49 	bl	80011b4 <spi_send_byte>
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e00b      	b.n	8000d40 <nrf24_read_buf+0x40>
	{
		p_buf[i] = spi_change_byte(addr);//получаем очередной байт
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	18d4      	adds	r4, r2, r3
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fa5f 	bl	80011f4 <spi_change_byte>
 8000d36:	4603      	mov	r3, r0
 8000d38:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < bytes; i++) 
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3ef      	bcc.n	8000d28 <nrf24_read_buf+0x28>
	}
	CSN_OFF();									//поднимаем ногу CS
 8000d48:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <nrf24_read_buf+0x5c>)
 8000d4e:	f7ff ff2d 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010800 	.word	0x40010800

08000d60 <nrf24_write_buf>:

//Процедура записи буфера
void nrf24_write_buf(uint8_t addr,uint8_t *p_buf,uint8_t bytes)	
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;					//включаем бит записи в адрес
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f043 0320 	orr.w	r3, r3, #32
 8000d76:	71fb      	strb	r3, [r7, #7]
	CSN_ON();										//прижимаем ногу CS к земле
 8000d78:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000d7c:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <nrf24_write_buf+0x64>)
 8000d7e:	f7ff ff24 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fa15 	bl	80011b4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff3c 	bl	8000c08 <uni_delay_us>
	
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e009      	b.n	8000daa <nrf24_write_buf+0x4a>
	{
		spi_send_byte(p_buf[i]);		//отправляем очередной байт
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fa08 	bl	80011b4 <spi_send_byte>
	for (uint8_t i = 0; i < bytes; i++) 
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f1      	bcc.n	8000d96 <nrf24_write_buf+0x36>
	}
	CSN_OFF();										//поднимаем ногу CS
 8000db2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000db6:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <nrf24_write_buf+0x64>)
 8000db8:	f7ff fef8 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <nrf24_flush_rx>:

//Процедура очистки буфера приема
void nrf24_flush_rx(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	uint8_t dt = FLUSH_RX;				//переменная с командой очистки
 8000dce:	23e2      	movs	r3, #226	@ 0xe2
 8000dd0:	71fb      	strb	r3, [r7, #7]
	CSN_ON();											//прижимаем ногу CS к земле
 8000dd2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <nrf24_flush_rx+0x34>)
 8000dd8:	f7ff fef7 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);						//отправка команды
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f9e8 	bl	80011b4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff0f 	bl	8000c08 <uni_delay_us>
	
	CSN_OFF();										//поднимаем ногу CS
 8000dea:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000dee:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <nrf24_flush_rx+0x34>)
 8000df0:	f7ff fedc 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010800 	.word	0x40010800

08000e00 <nrf24_flush_tx>:

//Процедура очистки буфера передачи
void nrf24_flush_tx(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	uint8_t dt = FLUSH_TX;				//переменная с командой очистки
 8000e06:	23e1      	movs	r3, #225	@ 0xe1
 8000e08:	71fb      	strb	r3, [r7, #7]
	CSN_ON();											//прижимаем ногу CS к земле
 8000e0a:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000e0e:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <nrf24_flush_tx+0x34>)
 8000e10:	f7ff fedb 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);						//отправка команды
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f9cc 	bl	80011b4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff fef3 	bl	8000c08 <uni_delay_us>
	
	CSN_OFF();										//поднимаем ногу CS
 8000e22:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000e26:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <nrf24_flush_tx+0x34>)
 8000e28:	f7ff fec0 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010800 	.word	0x40010800

08000e38 <nrf24_rx_mode>:

//Процедура включение режима приемника
void nrf24_rx_mode(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t regval = 0x00;						//переменная для значения регистра
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
	regval = nrf24_read_reg(CONFIG);	//сохраняем значение регистра конфигурации
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff feec 	bl	8000c20 <nrf24_read_reg>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);	
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	71fb      	strb	r3, [r7, #7]
	nrf24_write_reg(CONFIG,regval);		//возвращаем значение регистра статуса
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4619      	mov	r1, r3
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff0b 	bl	8000c74 <nrf24_write_reg>
	//записываем  адрес передатчика
	nrf24_write_buf(TX_ADDR, tx_addr_1, TX_ADR_WIDTH);	
 8000e5e:	2203      	movs	r2, #3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <nrf24_rx_mode+0x5c>)
 8000e62:	2010      	movs	r0, #16
 8000e64:	f7ff ff7c 	bl	8000d60 <nrf24_write_buf>
	//записываем адрес приемника
	nrf24_write_buf(RX_ADDR_P0, tx_addr_1, TX_ADR_WIDTH);	
 8000e68:	2203      	movs	r2, #3
 8000e6a:	490a      	ldr	r1, [pc, #40]	@ (8000e94 <nrf24_rx_mode+0x5c>)
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f7ff ff77 	bl	8000d60 <nrf24_write_buf>
	CE_SET();							//поднимаем ногу CE
 8000e72:	f640 0108 	movw	r1, #2056	@ 0x808
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <nrf24_rx_mode+0x60>)
 8000e78:	f7ff fe98 	bl	8000bac <LL_GPIO_SetOutputPin>
	
	uni_delay_us(150);				//залержка
 8000e7c:	2096      	movs	r0, #150	@ 0x96
 8000e7e:	f7ff fec3 	bl	8000c08 <uni_delay_us>
	
	//очистка буферов
	nrf24_flush_rx();
 8000e82:	f7ff ffa1 	bl	8000dc8 <nrf24_flush_rx>
	nrf24_flush_tx();
 8000e86:	f7ff ffbb 	bl	8000e00 <nrf24_flush_tx>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000004 	.word	0x20000004
 8000e98:	40010800 	.word	0x40010800

08000e9c <nrf24_tx_mode>:

//Процедура включения режима передатчика
void nrf24_tx_mode(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	//записываем адрес передатчика
	nrf24_write_buf(TX_ADDR, tx_addr_0, TX_ADR_WIDTH);		
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	490a      	ldr	r1, [pc, #40]	@ (8000ecc <nrf24_tx_mode+0x30>)
 8000ea4:	2010      	movs	r0, #16
 8000ea6:	f7ff ff5b 	bl	8000d60 <nrf24_write_buf>
	//записываем адрес приемника
	nrf24_write_buf(RX_ADDR_P0, tx_addr_0, TX_ADR_WIDTH);	
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <nrf24_tx_mode+0x30>)
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f7ff ff56 	bl	8000d60 <nrf24_write_buf>
	CE_RESET();							//опускаем ногу CE
 8000eb4:	f640 0108 	movw	r1, #2056	@ 0x808
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <nrf24_tx_mode+0x34>)
 8000eba:	f7ff fe86 	bl	8000bca <LL_GPIO_ResetOutputPin>
	//очищаем оба буфера
	nrf24_flush_rx();
 8000ebe:	f7ff ff83 	bl	8000dc8 <nrf24_flush_rx>
	nrf24_flush_tx();
 8000ec2:	f7ff ff9d 	bl	8000e00 <nrf24_flush_tx>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <nrf24_transmit>:

//Процедура передачи данных в модуль
void nrf24_transmit(uint8_t addr,uint8_t *p_buf,uint8_t bytes)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	CE_RESET();						//опускаем ногу CE
 8000ee4:	f640 0108 	movw	r1, #2056	@ 0x808
 8000ee8:	4816      	ldr	r0, [pc, #88]	@ (8000f44 <nrf24_transmit+0x70>)
 8000eea:	f7ff fe6e 	bl	8000bca <LL_GPIO_ResetOutputPin>
	CSN_ON();							//прижимаем ногу CS к земле
 8000eee:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000ef2:	4814      	ldr	r0, [pc, #80]	@ (8000f44 <nrf24_transmit+0x70>)
 8000ef4:	f7ff fe69 	bl	8000bca <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);	//отправляем адрес
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f95a 	bl	80011b4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fe81 	bl	8000c08 <uni_delay_us>
	
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e009      	b.n	8000f20 <nrf24_transmit+0x4c>
	{
		spi_send_byte(p_buf[i]);	//отправляем очередной байт
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f94d 	bl	80011b4 <spi_send_byte>
	for (uint8_t i = 0; i < bytes; i++) 
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3f1      	bcc.n	8000f0c <nrf24_transmit+0x38>
	}
	CSN_OFF();						//поднимаем ногу CS
 8000f28:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <nrf24_transmit+0x70>)
 8000f2e:	f7ff fe3d 	bl	8000bac <LL_GPIO_SetOutputPin>
	CE_SET();							//Поднимаем ногу CE
 8000f32:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <nrf24_transmit+0x70>)
 8000f38:	f7ff fe38 	bl	8000bac <LL_GPIO_SetOutputPin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010800 	.word	0x40010800

08000f48 <nrf24_send>:

//Процедура отправки данных в эфир
void nrf24_send(uint8_t *p_buf)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	interrupt_off();
 8000f50:	f7ff fe4a 	bl	8000be8 <interrupt_off>
	
	uint8_t regval = 0x00;						//переменная для отправки в конфигурационный регистр
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
	nrf24_tx_mode();									//включаем режим передачи
 8000f58:	f7ff ffa0 	bl	8000e9c <nrf24_tx_mode>
	regval = nrf24_read_reg(CONFIG);	//сохраняем значения конфигурационного региста
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fe5f 	bl	8000c20 <nrf24_read_reg>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	73fb      	strb	r3, [r7, #15]
	regval &= ~(1<<PRIM_RX);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
	nrf24_write_reg(CONFIG, regval);	//записываем новое значение конфигурационного регистра
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fe7a 	bl	8000c74 <nrf24_write_reg>
	
	uni_delay_us(150);				//залержка
 8000f80:	2096      	movs	r0, #150	@ 0x96
 8000f82:	f7ff fe41 	bl	8000c08 <uni_delay_us>
	
	nrf24_transmit(WR_TX_PLOAD, p_buf, TX_PLOAD_WIDTH);//отправка данных
 8000f86:	220b      	movs	r2, #11
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	20a0      	movs	r0, #160	@ 0xa0
 8000f8c:	f7ff ffa2 	bl	8000ed4 <nrf24_transmit>
	CE_SET();									//поднимаем ногу CE
 8000f90:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <nrf24_send+0x70>)
 8000f96:	f7ff fe09 	bl	8000bac <LL_GPIO_SetOutputPin>
	
	uni_delay_us(15);				//залержка
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fe34 	bl	8000c08 <uni_delay_us>
	
	CE_RESET();								//опускаем ногу CE
 8000fa0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000fa4:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <nrf24_send+0x70>)
 8000fa6:	f7ff fe10 	bl	8000bca <LL_GPIO_ResetOutputPin>
	
	interrupt_on();
 8000faa:	f7ff fe25 	bl	8000bf8 <interrupt_on>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010800 	.word	0x40010800

08000fbc <nrf24_pins_init>:

//Процедура инициализации пинов, подключенных к радиомодулю
void nrf24_pins_init(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	CSN_PORT |= 1<<CSN_PIN;				//высокий уровень на CSN
	
	IRQ_DDR |= 0<<IRQ_DD;				//IRQ на вход
	IRQ_PORT |= 0<<IRQ_PIN;				//отключаем внутренний пуллап
	#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <nrf24_init>:

//Процедура инициализации модуля
void nrf24_init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	nrf24_pins_init();				//инициализируем пины
 8000fcc:	f7ff fff6 	bl	8000fbc <nrf24_pins_init>
	CE_RESET();								//опускаем к земле вывод CE
 8000fd0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000fd4:	4823      	ldr	r0, [pc, #140]	@ (8001064 <nrf24_init+0x9c>)
 8000fd6:	f7ff fdf8 	bl	8000bca <LL_GPIO_ResetOutputPin>
	
	uni_delay_us(5000);				//залержка
 8000fda:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fde:	f7ff fe13 	bl	8000c08 <uni_delay_us>
	
	//записываем конфигурационный байт, 
	//устанавливаем бит PWR_UP bit, включаем CRC(1 байт) &Prim_RX:0
	nrf24_write_reg(CONFIG, 0x0a);		
 8000fe2:	210a      	movs	r1, #10
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fe45 	bl	8000c74 <nrf24_write_reg>
	
	uni_delay_us(5000);				//залержка
 8000fea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fee:	f7ff fe0b 	bl	8000c08 <uni_delay_us>
	
	nrf24_write_reg(EN_AA, 0x00);					//отключаем автоподтверждение
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fe3d 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(EN_RXADDR, 0x01);			//разрешаем Pipe0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fe39 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(SETUP_AW, 0x01);			//устанавливаем размер адреса 3 байта
 8001002:	2101      	movs	r1, #1
 8001004:	2003      	movs	r0, #3
 8001006:	f7ff fe35 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(SETUP_RETR, 0x00);		//устанавливаем период авто ретрансляции 1500мкс, 15 попыток
 800100a:	2100      	movs	r1, #0
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff fe31 	bl	8000c74 <nrf24_write_reg>
	nrf24_toggle_features();							//активируем дополнительные команды
 8001012:	f7ff fe53 	bl	8000cbc <nrf24_toggle_features>
	nrf24_write_reg(FEATURE, 0x07);				//устанавливаем стандартные значения регистра FEATURE 
 8001016:	2107      	movs	r1, #7
 8001018:	201d      	movs	r0, #29
 800101a:	f7ff fe2b 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(DYNPD, 0);						//отключаем динамический размер полезной нагрузки
 800101e:	2100      	movs	r1, #0
 8001020:	201c      	movs	r0, #28
 8001022:	f7ff fe27 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(STATUS, 0x70);				//опускаем флаг прерывания
 8001026:	2170      	movs	r1, #112	@ 0x70
 8001028:	2007      	movs	r0, #7
 800102a:	f7ff fe23 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(RF_CH, CHANNEL);			//устанавливаем канал
 800102e:	2110      	movs	r1, #16
 8001030:	2005      	movs	r0, #5
 8001032:	f7ff fe1f 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_reg(RF_SETUP, MAX_POWER);	//устанавливаем мощность и скорость передачи
 8001036:	2106      	movs	r1, #6
 8001038:	2006      	movs	r0, #6
 800103a:	f7ff fe1b 	bl	8000c74 <nrf24_write_reg>
	nrf24_write_buf(TX_ADDR, tx_addr_0, TX_ADR_WIDTH);		//запись адреса передачи
 800103e:	2203      	movs	r2, #3
 8001040:	4909      	ldr	r1, [pc, #36]	@ (8001068 <nrf24_init+0xa0>)
 8001042:	2010      	movs	r0, #16
 8001044:	f7ff fe8c 	bl	8000d60 <nrf24_write_buf>
	nrf24_write_buf(RX_ADDR_P1, tx_addr_0, TX_ADR_WIDTH);	//запись адреса приема
 8001048:	2203      	movs	r2, #3
 800104a:	4907      	ldr	r1, [pc, #28]	@ (8001068 <nrf24_init+0xa0>)
 800104c:	200b      	movs	r0, #11
 800104e:	f7ff fe87 	bl	8000d60 <nrf24_write_buf>
	nrf24_write_reg(RX_PW_P0, TX_PLOAD_WIDTH); //устанавливаем число байт полезной нагрузки
 8001052:	210b      	movs	r1, #11
 8001054:	2011      	movs	r0, #17
 8001056:	f7ff fe0d 	bl	8000c74 <nrf24_write_reg>
	nrf24_rx_mode();					//пока уходим в режим приёмника
 800105a:	f7ff feed 	bl	8000e38 <nrf24_rx_mode>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010800 	.word	0x40010800
 8001068:	20000000 	.word	0x20000000

0800106c <irq_callback>:

//Процедура обработки прерывания
void irq_callback(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	interrupt_off();
 8001072:	f7ff fdb9 	bl	8000be8 <interrupt_off>
	
	uint8_t status = 0x01;				//переменная статуса
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
	
	uni_delay_us(10);				//залержка
 800107a:	200a      	movs	r0, #10
 800107c:	f7ff fdc4 	bl	8000c08 <uni_delay_us>
	
	status = nrf24_read_reg(STATUS);	//читаем значения регистра статуса
 8001080:	2007      	movs	r0, #7
 8001082:	f7ff fdcd 	bl	8000c20 <nrf24_read_reg>
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	if (status & RX_DR)								//если есть данные на прием
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <irq_callback+0x40>
	{
		nrf24_read_buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH);	//чтение буфера
 8001094:	220b      	movs	r2, #11
 8001096:	4916      	ldr	r1, [pc, #88]	@ (80010f0 <irq_callback+0x84>)
 8001098:	2061      	movs	r0, #97	@ 0x61
 800109a:	f7ff fe31 	bl	8000d00 <nrf24_read_buf>
		nrf24_write_reg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 800109e:	2140      	movs	r1, #64	@ 0x40
 80010a0:	2007      	movs	r0, #7
 80010a2:	f7ff fde7 	bl	8000c74 <nrf24_write_reg>
		f_rx = 1;												//поднимаем флаг приема
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <irq_callback+0x88>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
	}
	if (status & TX_DS)								//если данные успешно отправлены
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <irq_callback+0x5e>
	{
		nrf24_write_reg(STATUS, 0x20);	//очищаем все биты кроме пятого
 80010b6:	2120      	movs	r1, #32
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff fddb 	bl	8000c74 <nrf24_write_reg>
		nrf24_rx_mode();								//переходим в режим приема
 80010be:	f7ff febb 	bl	8000e38 <nrf24_rx_mode>
		f_tx = 1;												//поднимаем флаг передачи
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <irq_callback+0x8c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e00c      	b.n	80010e4 <irq_callback+0x78>
	}
	else if (status & MAX_RT)					//если превышение количества попыток отправки
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <irq_callback+0x78>
	{
		nrf24_write_reg(STATUS, 0x10);	//однуление всех остальных битов, кроме 4го
 80010d4:	2110      	movs	r1, #16
 80010d6:	2007      	movs	r0, #7
 80010d8:	f7ff fdcc 	bl	8000c74 <nrf24_write_reg>
		nrf24_flush_tx();								//очистка буфера отправки
 80010dc:	f7ff fe90 	bl	8000e00 <nrf24_flush_tx>
		nrf24_rx_mode();								//переходим в режим приема
 80010e0:	f7ff feaa 	bl	8000e38 <nrf24_rx_mode>
	}
	
	interrupt_on();
 80010e4:	f7ff fd88 	bl	8000bf8 <interrupt_on>

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000188 	.word	0x20000188
 80010f4:	2000019f 	.word	0x2000019f
 80010f8:	200001a0 	.word	0x200001a0

080010fc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d101      	bne.n	8001156 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	330c      	adds	r3, #12
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	330c      	adds	r3, #12
 800118c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
	...

080011a0 <spi_init>:

#include "kombo_spi.h"				//добавляем заголовочный файл

//Процедура инициализации SPI
void spi_init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	PORTB &= ~((1<<PB2)|(1<<PB3)|(1<<PB5));				//низкий уровень
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
	#endif
	
	#ifdef STM32_LL
	LL_SPI_Enable(SPI1);										//включаем spi, основная инициализация генерируется автоматически
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <spi_init+0x10>)
 80011a6:	f7ff ffa9 	bl	80010fc <LL_SPI_Enable>
	#endif
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40013000 	.word	0x40013000

080011b4 <spi_send_byte>:

//Процедура отправки байта 
void spi_send_byte(uint8_t byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	SPDR = byte;				//записываем байт в регистр
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся
	#endif
	
	#ifdef STM32_LL
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)) {}
 80011be:	bf00      	nop
 80011c0:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <spi_send_byte+0x3c>)
 80011c2:	f7ff ffbc 	bl	800113e <LL_SPI_IsActiveFlag_TXE>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f9      	beq.n	80011c0 <spi_send_byte+0xc>
	LL_SPI_TransmitData8 (SPI1, byte);				//записываем адрес с командой записи
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <spi_send_byte+0x3c>)
 80011d2:	f7ff ffd3 	bl	800117c <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)) {}
 80011d6:	bf00      	nop
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <spi_send_byte+0x3c>)
 80011da:	f7ff ff9e 	bl	800111a <LL_SPI_IsActiveFlag_RXNE>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f9      	beq.n	80011d8 <spi_send_byte+0x24>
	(void) SPI1->DR;													//читаем регистр DR, имитация приема, который обязательно происходит одновременно с записью
 80011e4:	4b02      	ldr	r3, [pc, #8]	@ (80011f0 <spi_send_byte+0x3c>)
 80011e6:	68db      	ldr	r3, [r3, #12]
	#endif
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013000 	.word	0x40013000

080011f4 <spi_change_byte>:

//Функция приема/отправки байта
uint8_t spi_change_byte(uint8_t byte)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся (обменяются)
	return SPDR;				//возвращаем принятое значение
	#endif
	
	#ifdef STM32_LL
	uint8_t dt = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)) {}	//ждем пока не поднимется флаг txe (готовность к передаче)
 8001202:	bf00      	nop
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <spi_change_byte+0x48>)
 8001206:	f7ff ff9a 	bl	800113e <LL_SPI_IsActiveFlag_TXE>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f9      	beq.n	8001204 <spi_change_byte+0x10>
  LL_SPI_TransmitData8 (SPI1, byte);				//передаем байт адреса по spi
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	@ (800123c <spi_change_byte+0x48>)
 8001216:	f7ff ffb1 	bl	800117c <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)) {} //ждем пока не поднимется флаг rxne (есть данные на прием)
 800121a:	bf00      	nop
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <spi_change_byte+0x48>)
 800121e:	f7ff ff7c 	bl	800111a <LL_SPI_IsActiveFlag_RXNE>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <spi_change_byte+0x28>
	dt = LL_SPI_ReceiveData8(SPI1);						//принимаем данные по spi
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <spi_change_byte+0x48>)
 800122a:	f7ff ff9a 	bl	8001162 <LL_SPI_ReceiveData8>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
	return dt;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
	#endif
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40013000 	.word	0x40013000

08001240 <LL_USART_Enable>:
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <LL_USART_IsActiveFlag_TXE>:
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	2b80      	cmp	r3, #128	@ 0x80
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <LL_USART_TransmitData8>:
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	605a      	str	r2, [r3, #4]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <usart_init>:

#include "kombo_usart.h"				//добавляем заголовочный файл

//Процедура инициализации USART
void usart_init(unsigned int ubrr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	//ассинхронный режим (UMSEL=0), без контроля четности (UPM1=0 и UPM0=0),
	//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
	#endif
	
	#ifdef STM32_LL
	LL_USART_Enable(USART1);	//включаем порт, основная инициализация генерируется автоматически
 80012a8:	4803      	ldr	r0, [pc, #12]	@ (80012b8 <usart_init+0x18>)
 80012aa:	f7ff ffc9 	bl	8001240 <LL_USART_Enable>
	#endif
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40013800 	.word	0x40013800

080012bc <usart_transmit>:

//Процедура отправки одного байта
void usart_transmit(unsigned char data) 
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	while ( !(UCSR0A & (1<<UDRE0)) ); //ждем опустошения буфера приема
	UDR0 = data; //записываем байт в регистр
	#endif
	
	#ifdef STM32_LL
	while (!LL_USART_IsActiveFlag_TXE(USART1)) {}		//ждем отправки предыдущего байта
 80012c6:	bf00      	nop
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <usart_transmit+0x2c>)
 80012ca:	f7ff ffc8 	bl	800125e <LL_USART_IsActiveFlag_TXE>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <usart_transmit+0xc>
  LL_USART_TransmitData8(USART1,data);						//отправляем очередной байт в порт
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <usart_transmit+0x2c>)
 80012da:	f7ff ffd2 	bl	8001282 <LL_USART_TransmitData8>
	#endif
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013800 	.word	0x40013800

080012ec <usart_print>:

//Процедура отправки массива
void usart_print(char *str)
{	//цикл по всему массиву
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e009      	b.n	800130e <usart_print+0x22>
	{
		usart_transmit(str[i]); //отправляем очередной байт
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffda 	bl	80012bc <usart_transmit>
	for (int i = 0; i < strlen(str); i++)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7fe ff1c 	bl	800014c <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8ee      	bhi.n	80012fa <usart_print+0xe>
	}
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <DelayMicro>:
extern I2C_HandleTypeDef hi2c1;
char str1[100];
uint8_t portlcd; //ячейка для хранения данных порта микросхемы расширения
//------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <DelayMicro+0x34>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <DelayMicro+0x38>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0d5b      	lsrs	r3, r3, #21
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	607b      	str	r3, [r7, #4]
	while (micros--);
 8001344:	bf00      	nop
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1fa      	bne.n	8001346 <DelayMicro+0x1e>
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	200000a4 	.word	0x200000a4
 8001360:	6b5fca6b 	.word	0x6b5fca6b

08001364 <LCD_WriteByteI2CLCD>:
//------------------------------------------------
void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <LCD_WriteByteI2CLCD+0x2c>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) 0x4E,buf,1,1000);
 8001374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <LCD_WriteByteI2CLCD+0x2c>)
 800137e:	214e      	movs	r1, #78	@ 0x4e
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <LCD_WriteByteI2CLCD+0x30>)
 8001382:	f002 fd4b 	bl	8003e1c <HAL_I2C_Master_Transmit>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001a4 	.word	0x200001a4
 8001394:	20000134 	.word	0x20000134

08001398 <sendhalfbyte>:
//------------------------------------------------
void sendhalfbyte(uint8_t c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	71fb      	strb	r3, [r7, #7]
	e_set();//включаем линию E
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <sendhalfbyte+0x64>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <sendhalfbyte+0x64>)
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <sendhalfbyte+0x64>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ffd2 	bl	8001364 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 80013c0:	2032      	movs	r0, #50	@ 0x32
 80013c2:	f7ff ffb1 	bl	8001328 <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <sendhalfbyte+0x64>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ffc7 	bl	8001364 <LCD_WriteByteI2CLCD>
	e_reset();//выключаем линию E
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <sendhalfbyte+0x64>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f023 0304 	bic.w	r3, r3, #4
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <sendhalfbyte+0x64>)
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <sendhalfbyte+0x64>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ffbb 	bl	8001364 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 80013ee:	2032      	movs	r0, #50	@ 0x32
 80013f0:	f7ff ff9a 	bl	8001328 <DelayMicro>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001a5 	.word	0x200001a5

08001400 <sendbyte>:
//------------------------------------------------
void sendbyte(uint8_t c, uint8_t mode)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <sendbyte+0x30>
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <sendbyte+0x6c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <sendbyte+0x6c>)
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <sendbyte+0x6c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff9b 	bl	8001364 <LCD_WriteByteI2CLCD>
 800142e:	e00b      	b.n	8001448 <sendbyte+0x48>
	else rs_set();
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <sendbyte+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <sendbyte+0x6c>)
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <sendbyte+0x6c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff8e 	bl	8001364 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff9f 	bl	8001398 <sendhalfbyte>
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff9b 	bl	8001398 <sendhalfbyte>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001a5 	.word	0x200001a5

08001470 <LCD_Clear>:
//------------------------------------------------
void LCD_Clear(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	sendbyte(0x01,0);
 8001474:	2100      	movs	r1, #0
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ffc2 	bl	8001400 <sendbyte>
	HAL_Delay(2);
 800147c:	2002      	movs	r0, #2
 800147e:	f002 f8fd 	bl	800367c <HAL_Delay>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}

08001486 <LCD_SendChar>:
//------------------------------------------------
void LCD_SendChar(char ch)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
	sendbyte(ch,1);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2101      	movs	r1, #1
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ffb3 	bl	8001400 <sendbyte>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <LCD_String>:
//------------------------------------------------
void LCD_String(char* st)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80014ae:	e00a      	b.n	80014c6 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffa0 	bl	8001400 <sendbyte>
		i++;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3301      	adds	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <LCD_String+0xe>
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <LCD_SetPos>:
//------------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
	switch(y)
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d846      	bhi.n	8001580 <LCD_SetPos+0xa4>
 80014f2:	a201      	add	r2, pc, #4	@ (adr r2, 80014f8 <LCD_SetPos+0x1c>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001509 	.word	0x08001509
 80014fc:	08001521 	.word	0x08001521
 8001500:	08001541 	.word	0x08001541
 8001504:	08001561 	.word	0x08001561
	{
		case 0:
			sendbyte(x|0x80,0);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff74 	bl	8001400 <sendbyte>
			HAL_Delay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f002 f8af 	bl	800367c <HAL_Delay>
			break;
 800151e:	e02f      	b.n	8001580 <LCD_SetPos+0xa4>
		case 1:
			sendbyte((0x40+x)|0x80,0);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	3340      	adds	r3, #64	@ 0x40
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b25b      	sxtb	r3, r3
 8001528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff64 	bl	8001400 <sendbyte>
			HAL_Delay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f002 f89f 	bl	800367c <HAL_Delay>
			break;
 800153e:	e01f      	b.n	8001580 <LCD_SetPos+0xa4>
		case 2:
			sendbyte((0x14+x)|0x80,0);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	3314      	adds	r3, #20
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800154c:	b25b      	sxtb	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <sendbyte>
			HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f002 f88f 	bl	800367c <HAL_Delay>
			break;
 800155e:	e00f      	b.n	8001580 <LCD_SetPos+0xa4>
		case 3:
			sendbyte((0x54+x)|0x80,0);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	3354      	adds	r3, #84	@ 0x54
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800156c:	b25b      	sxtb	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff44 	bl	8001400 <sendbyte>
			HAL_Delay(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f002 f87f 	bl	800367c <HAL_Delay>
			break;
 800157e:	bf00      	nop
	}
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <LCD_init>:
//------------------------------------------------
void LCD_init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800158c:	200f      	movs	r0, #15
 800158e:	f002 f875 	bl	800367c <HAL_Delay>
	sendhalfbyte(0x03);
 8001592:	2003      	movs	r0, #3
 8001594:	f7ff ff00 	bl	8001398 <sendhalfbyte>
	HAL_Delay(4);
 8001598:	2004      	movs	r0, #4
 800159a:	f002 f86f 	bl	800367c <HAL_Delay>
	sendhalfbyte(0x03);
 800159e:	2003      	movs	r0, #3
 80015a0:	f7ff fefa 	bl	8001398 <sendhalfbyte>
	DelayMicro(100);
 80015a4:	2064      	movs	r0, #100	@ 0x64
 80015a6:	f7ff febf 	bl	8001328 <DelayMicro>
	sendhalfbyte(0x03);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f7ff fef4 	bl	8001398 <sendhalfbyte>
	HAL_Delay(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f002 f863 	bl	800367c <HAL_Delay>
	sendhalfbyte(0x02);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff feee 	bl	8001398 <sendhalfbyte>
	HAL_Delay(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f002 f85d 	bl	800367c <HAL_Delay>
	sendbyte(0x28,0);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8	
 80015c2:	2100      	movs	r1, #0
 80015c4:	2028      	movs	r0, #40	@ 0x28
 80015c6:	f7ff ff1b 	bl	8001400 <sendbyte>
	HAL_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f002 f856 	bl	800367c <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 80015d0:	2100      	movs	r1, #0
 80015d2:	200c      	movs	r0, #12
 80015d4:	f7ff ff14 	bl	8001400 <sendbyte>
	HAL_Delay(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f002 f84f 	bl	800367c <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 80015de:	2100      	movs	r1, #0
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff ff0d 	bl	8001400 <sendbyte>
	HAL_Delay(2);
 80015e6:	2002      	movs	r0, #2
 80015e8:	f002 f848 	bl	800367c <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 80015ec:	2100      	movs	r1, #0
 80015ee:	2006      	movs	r0, #6
 80015f0:	f7ff ff06 	bl	8001400 <sendbyte>
	HAL_Delay(1);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f002 f841 	bl	800367c <HAL_Delay>
	setled();//подсветка
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <LCD_init+0xa8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <LCD_init+0xa8>)
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <LCD_init+0xa8>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fea9 	bl	8001364 <LCD_WriteByteI2CLCD>
	setwrite();//запись
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <LCD_init+0xa8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	f023 0302 	bic.w	r3, r3, #2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <LCD_init+0xa8>)
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <LCD_init+0xa8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe9d 	bl	8001364 <LCD_WriteByteI2CLCD>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001a5 	.word	0x200001a5

08001634 <LL_IWDG_ReloadCounter>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
	...

08001650 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <LL_RCC_HSE_Enable+0x18>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a03      	ldr	r2, [pc, #12]	@ (8001668 <LL_RCC_HSE_Enable+0x18>)
 800165a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000

0800166c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <LL_RCC_HSE_IsReady+0x20>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <LL_RCC_LSI_Enable+0x18>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <LL_RCC_LSI_Enable+0x18>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <LL_RCC_LSI_IsReady+0x20>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <LL_RCC_SetSysClkSource+0x24>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 0203 	bic.w	r2, r3, #3
 80016e0:	4904      	ldr	r1, [pc, #16]	@ (80016f4 <LL_RCC_SetSysClkSource+0x24>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <LL_RCC_GetSysClkSource+0x14>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <LL_RCC_SetAHBPrescaler+0x24>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001720:	4904      	ldr	r1, [pc, #16]	@ (8001734 <LL_RCC_SetAHBPrescaler+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001748:	4904      	ldr	r1, [pc, #16]	@ (800175c <LL_RCC_SetAPB1Prescaler+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001770:	4904      	ldr	r1, [pc, #16]	@ (8001784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <LL_RCC_PLL_Enable+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <LL_RCC_PLL_Enable+0x18>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <LL_RCC_PLL_IsReady+0x20>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	430b      	orrs	r3, r1
 80017e4:	4903      	ldr	r1, [pc, #12]	@ (80017f4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000

080017f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <LL_FLASH_SetLatency+0x24>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4904      	ldr	r1, [pc, #16]	@ (800181c <LL_FLASH_SetLatency+0x24>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000

08001820 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <LL_FLASH_GetLatency+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0307 	and.w	r3, r3, #7
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40022000 	.word	0x40022000

08001838 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f06f 0201 	mvn.w	r2, #1
 8001864:	611a      	str	r2, [r3, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <LL_USART_EnableIT_RXNE>:
{
 80018b2:	b480      	push	{r7}
 80018b4:	b089      	sub	sp, #36	@ 0x24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	330c      	adds	r3, #12
 80018be:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	e853 3f00 	ldrex	r3, [r3]
 80018c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	330c      	adds	r3, #12
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	61ba      	str	r2, [r7, #24]
 80018d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	e841 2300 	strex	r3, r2, [r1]
 80018e2:	613b      	str	r3, [r7, #16]
   return(result);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1e7      	bne.n	80018ba <LL_USART_EnableIT_RXNE+0x8>
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	@ 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_GPIO_IsInputPinSet>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	43da      	mvns	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	4013      	ands	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
	...

08001924 <init_variables>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Процедура инициализации переменных, флагов, массивов
void init_variables(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
	flags.rst_push 					= 0;
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <init_variables+0xc8>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
	flags.nxt_push 					= 0;
 8001930:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <init_variables+0xc8>)
 8001932:	2200      	movs	r2, #0
 8001934:	705a      	strb	r2, [r3, #1]
	flags.set_push 					= 0;
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <init_variables+0xc8>)
 8001938:	2200      	movs	r2, #0
 800193a:	709a      	strb	r2, [r3, #2]
	flags.time_push 				= 0;
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <init_variables+0xc8>)
 800193e:	2200      	movs	r2, #0
 8001940:	70da      	strb	r2, [r3, #3]
	flags.f_timer 					= 0;
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <init_variables+0xc8>)
 8001944:	2200      	movs	r2, #0
 8001946:	711a      	strb	r2, [r3, #4]
	
	vars.seconds 						= 0;
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <init_variables+0xcc>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
	vars.temp_seconds 			= 0;
 800194e:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <init_variables+0xcc>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
	vars.millis 						= 0;
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <init_variables+0xcc>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
	vars.slave_counter 			= 0;
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <init_variables+0xcc>)
 800195c:	2200      	movs	r2, #0
 800195e:	741a      	strb	r2, [r3, #16]
	vars.send_order_count		= 1;
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <init_variables+0xcc>)
 8001962:	2201      	movs	r2, #1
 8001964:	749a      	strb	r2, [r3, #18]
	
	for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	e036      	b.n	80019da <init_variables+0xb6>
	{
		b_data[i].number 			= i;
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4a21      	ldr	r2, [pc, #132]	@ (80019f4 <init_variables+0xd0>)
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	701a      	strb	r2, [r3, #0]
		b_data[i].address 		= slave_addrs[i];
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	491e      	ldr	r1, [pc, #120]	@ (80019f8 <init_variables+0xd4>)
 800197e:	5c89      	ldrb	r1, [r1, r2]
 8001980:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <init_variables+0xd0>)
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3301      	adds	r3, #1
 8001988:	460a      	mov	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
		b_data[i].time 				= MAX_TIME;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <init_variables+0xd0>)
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	601a      	str	r2, [r3, #0]
		b_data[i].cmd 				= LED_STAT; 
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <init_variables+0xd0>)
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	330e      	adds	r3, #14
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
		b_data[i].led_status 	= LED_STAT_OFF; 
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <init_variables+0xd0>)
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	330c      	adds	r3, #12
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
		b_data[i].push_order 	= 0;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a0e      	ldr	r2, [pc, #56]	@ (80019f4 <init_variables+0xd0>)
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	330d      	adds	r3, #13
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
		b_data[i].pushed 			= 0;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <init_variables+0xd0>)
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4413      	add	r3, r2
 80019ce:	3302      	adds	r3, #2
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	3301      	adds	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b13      	cmp	r3, #19
 80019de:	d9c5      	bls.n	800196c <init_variables+0x48>
	}
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200001e8 	.word	0x200001e8
 80019f0:	200001f0 	.word	0x200001f0
 80019f4:	20000204 	.word	0x20000204
 80019f8:	2000001c 	.word	0x2000001c

080019fc <crc16_calc>:

//Процедура расчета контрольной суммы
uint16_t crc16_calc(volatile uint8_t buf[], uint8_t buf_size) 
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	uint16_t	crc = 0;			// возвращаемое значение
 8001a08:	2300      	movs	r3, #0
 8001a0a:	82fb      	strh	r3, [r7, #22]
	uint16_t	D;						// �?ндекс элемента массива для наложения 
	int16_t 	T;						// Элемент массива для наложения, вычисляется на лету
	uint16_t	P = 0x1021;		// Полином - маска
 8001a0c:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001a10:	823b      	strh	r3, [r7, #16]

	for (uint8_t i = 0; i < buf_size; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	74fb      	strb	r3, [r7, #19]
 8001a16:	e038      	b.n	8001a8a <crc16_calc+0x8e>
	{
		D = crc >> 8; 				// Сдвиг crc на 8 бит вправо
 8001a18:	8afb      	ldrh	r3, [r7, #22]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	81fb      	strh	r3, [r7, #14]
		D = D ^ buf[i];				// Вычисление индекса элемента массива для наложения  
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	4053      	eors	r3, r2
 8001a2e:	81fb      	strh	r3, [r7, #14]

		T = D;								// Вычисление элемента массива
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	82bb      	strh	r3, [r7, #20]
		T = T << 8;        		// Сдвиг элемента массива на 8 бит влево
 8001a34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	82bb      	strh	r3, [r7, #20]

		for (uint8_t j = 0; j < 8; j++)    // Повторение 8 раз
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	74bb      	strb	r3, [r7, #18]
 8001a40:	e014      	b.n	8001a6c <crc16_calc+0x70>
		{
			if (T < 0)					// Если старший бит = 1
 8001a42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da09      	bge.n	8001a5e <crc16_calc+0x62>
			{
				T = T << 1;				// Сдвиг элемента массива на 1 бит влево
 8001a4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	82bb      	strh	r3, [r7, #20]
				T = T ^ P;				// Наложение полинома
 8001a52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a56:	8abb      	ldrh	r3, [r7, #20]
 8001a58:	4053      	eors	r3, r2
 8001a5a:	82bb      	strh	r3, [r7, #20]
 8001a5c:	e003      	b.n	8001a66 <crc16_calc+0x6a>
			}
			else
			{
				T = T << 1;				// Сдвиг элемента массива на 1 бит влево
 8001a5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	82bb      	strh	r3, [r7, #20]
		for (uint8_t j = 0; j < 8; j++)    // Повторение 8 раз
 8001a66:	7cbb      	ldrb	r3, [r7, #18]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	74bb      	strb	r3, [r7, #18]
 8001a6c:	7cbb      	ldrb	r3, [r7, #18]
 8001a6e:	2b07      	cmp	r3, #7
 8001a70:	d9e7      	bls.n	8001a42 <crc16_calc+0x46>
			}
		}
		crc = crc << 8;				// Сдвиг С на 8 бит влево
 8001a72:	8afb      	ldrh	r3, [r7, #22]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	82fb      	strh	r3, [r7, #22]
		crc = crc ^ T;				// �?сключающе или между С и элементом массива
 8001a78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a7c:	8abb      	ldrh	r3, [r7, #20]
 8001a7e:	4053      	eors	r3, r2
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < buf_size; i++)
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	3301      	adds	r3, #1
 8001a88:	74fb      	strb	r3, [r7, #19]
 8001a8a:	7cfa      	ldrb	r2, [r7, #19]
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d3c2      	bcc.n	8001a18 <crc16_calc+0x1c>
	}

	return crc;							// Возврат значения crc
 8001a92:	8afb      	ldrh	r3, [r7, #22]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <nrf24l01_receive>:

//Процедура приема радиомодуля
void nrf24l01_receive(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
	if(f_rx)	//если флаг приема поднят (флаг поднимается по внешнему прерыванию от радиомодуля)
 8001aa6:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <nrf24l01_receive+0xc8>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d057      	beq.n	8001b60 <nrf24l01_receive+0xc0>
	{
		uint16_t temp_crc = crc16_calc(rx_buf, TX_PLOAD_WIDTH - 2);
 8001ab0:	2109      	movs	r1, #9
 8001ab2:	482e      	ldr	r0, [pc, #184]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001ab4:	f7ff ffa2 	bl	80019fc <crc16_calc>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	81bb      	strh	r3, [r7, #12]
		uint16_t input_crc = (uint16_t)rx_buf[TX_PLOAD_WIDTH - 1] + (uint16_t)(rx_buf[TX_PLOAD_WIDTH - 2] << 8);
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001abe:	7a9b      	ldrb	r3, [r3, #10]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001ac4:	7a5b      	ldrb	r3, [r3, #9]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	817b      	strh	r3, [r7, #10]
		if (temp_crc == input_crc)
 8001ace:	89ba      	ldrh	r2, [r7, #12]
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d141      	bne.n	8001b5a <nrf24l01_receive+0xba>
		{
			for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e039      	b.n	8001b50 <nrf24l01_receive+0xb0>
			{	//если найден принятый адрес
				if (rx_buf[0] == slave_addrs[i]) 	//если найден принятый адрес
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	4923      	ldr	r1, [pc, #140]	@ (8001b70 <nrf24l01_receive+0xd0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d12f      	bne.n	8001b4a <nrf24l01_receive+0xaa>
				{
					float_to_byte.char_val[0] = rx_buf[5];
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001aec:	795a      	ldrb	r2, [r3, #5]
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <nrf24l01_receive+0xd4>)
 8001af0:	701a      	strb	r2, [r3, #0]
					float_to_byte.char_val[1] = rx_buf[6];
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001af4:	799a      	ldrb	r2, [r3, #6]
 8001af6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <nrf24l01_receive+0xd4>)
 8001af8:	705a      	strb	r2, [r3, #1]
					float_to_byte.char_val[2] = rx_buf[7];
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001afc:	79da      	ldrb	r2, [r3, #7]
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <nrf24l01_receive+0xd4>)
 8001b00:	709a      	strb	r2, [r3, #2]
					float_to_byte.char_val[3] = rx_buf[8];
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <nrf24l01_receive+0xcc>)
 8001b04:	7a1a      	ldrb	r2, [r3, #8]
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <nrf24l01_receive+0xd4>)
 8001b08:	70da      	strb	r2, [r3, #3]
					b_data[i].vcc = float_to_byte.float_val;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <nrf24l01_receive+0xd4>)
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	4919      	ldr	r1, [pc, #100]	@ (8001b78 <nrf24l01_receive+0xd8>)
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	440b      	add	r3, r1
 8001b16:	3308      	adds	r3, #8
 8001b18:	601a      	str	r2, [r3, #0]
					
					if ((*(uint32_t*)&rx_buf[1]) != NOT_PUSHED)
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <nrf24l01_receive+0xdc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d019      	beq.n	8001b58 <nrf24l01_receive+0xb8>
					{	
						uint32_t time = *(uint32_t*)&rx_buf[1];	//преобразуем оставшиеся байты во время
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <nrf24l01_receive+0xdc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	607b      	str	r3, [r7, #4]

						if (b_data[i].pushed == 0)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <nrf24l01_receive+0xd8>)
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	3302      	adds	r3, #2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <nrf24l01_receive+0xb8>
						{
							b_data[i].time = time;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <nrf24l01_receive+0xd8>)
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
						}
					}	
					break;
 8001b48:	e006      	b.n	8001b58 <nrf24l01_receive+0xb8>
			for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b13      	cmp	r3, #19
 8001b54:	d9c2      	bls.n	8001adc <nrf24l01_receive+0x3c>
 8001b56:	e000      	b.n	8001b5a <nrf24l01_receive+0xba>
					break;
 8001b58:	bf00      	nop
				}
			}
		}
		f_rx = 0;					//опускаем флаг приема
 8001b5a:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <nrf24l01_receive+0xc8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000019f 	.word	0x2000019f
 8001b6c:	20000188 	.word	0x20000188
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	20000344 	.word	0x20000344
 8001b78:	20000204 	.word	0x20000204
 8001b7c:	20000189 	.word	0x20000189

08001b80 <refresh_display>:

//Процедура обновления дисплея
void refresh_display()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	#ifdef LCD_2004
		LCD_Clear();
 8001b84:	f7ff fc74 	bl	8001470 <LCD_Clear>

		LCD_SetPos(0,0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fca6 	bl	80014dc <LCD_SetPos>
		LCD_String(string_0);
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <refresh_display+0x44>)
 8001b92:	f7ff fc86 	bl	80014a2 <LCD_String>
		LCD_SetPos(0,1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fc9f 	bl	80014dc <LCD_SetPos>
		LCD_String(string_1);
 8001b9e:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <refresh_display+0x48>)
 8001ba0:	f7ff fc7f 	bl	80014a2 <LCD_String>
		LCD_SetPos(0,2);
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fc98 	bl	80014dc <LCD_SetPos>
		LCD_String(string_2);
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <refresh_display+0x4c>)
 8001bae:	f7ff fc78 	bl	80014a2 <LCD_String>
		LCD_SetPos(0,3);
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fc91 	bl	80014dc <LCD_SetPos>
		LCD_String(string_3);
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <refresh_display+0x50>)
 8001bbc:	f7ff fc71 	bl	80014a2 <LCD_String>
		ST7735_Write_W_String(0, 0,  "0123456789", Font_11x18, ST7735_WHITE, ST7735_BLACK);
		ST7735_Write_W_String(0, 50, "abcdefghij", Font_11x18, ST7735_WHITE, ST7735_BLACK);
	
		ST7735_WriteString(100, 120, "BS KomBO", Font_7x10, ST7735_WHITE, ST7735_BLACK);
	#endif
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000044 	.word	0x20000044
 8001bc8:	2000005c 	.word	0x2000005c
 8001bcc:	20000074 	.word	0x20000074
 8001bd0:	2000008c 	.word	0x2000008c

08001bd4 <display_init>:

//Процедура инициализации дисплея
void display_init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	#ifdef LCD_2004
		LCD_init();
 8001bd8:	f7ff fcd6 	bl	8001588 <LCD_init>
	
	#ifdef ST_7735
		ST7735_Init();
		ST7735_FillScreen(ST7735_BLACK);
	#endif
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <nrf_test>:

//Подпрограмма тестирования радиомодуля
uint8_t nrf_test(void)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af04      	add	r7, sp, #16
	uint8_t buf_0[TX_ADR_WIDTH] = {0};				
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <nrf_test+0xd4>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	823b      	strh	r3, [r7, #16]
 8001bec:	2300      	movs	r3, #0
 8001bee:	74bb      	strb	r3, [r7, #18]
	uint8_t buf_1[TX_ADR_WIDTH] = {0};
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <nrf_test+0xd4>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	81bb      	strh	r3, [r7, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73bb      	strb	r3, [r7, #14]
	uint8_t test_addr_0[TX_ADR_WIDTH] = UNIQUE_ADDRESS_0;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <nrf_test+0xd8>)
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4611      	mov	r1, r2
 8001c04:	8019      	strh	r1, [r3, #0]
 8001c06:	3302      	adds	r3, #2
 8001c08:	0c12      	lsrs	r2, r2, #16
 8001c0a:	701a      	strb	r2, [r3, #0]
	uint8_t test_addr_1[TX_ADR_WIDTH] = UNIQUE_ADDRESS_1;
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cbc <nrf_test+0xdc>)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4611      	mov	r1, r2
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	3302      	adds	r3, #2
 8001c18:	0c12      	lsrs	r2, r2, #16
 8001c1a:	701a      	strb	r2, [r3, #0]
	
	uint8_t err = ERR_OK;								
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]

	//читаем значения регистров
	
	#ifdef MASTER
		nrf24_read_buf(RX_ADDR_P1,buf_0,3);	
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2203      	movs	r2, #3
 8001c26:	4619      	mov	r1, r3
 8001c28:	200b      	movs	r0, #11
 8001c2a:	f7ff f869 	bl	8000d00 <nrf24_read_buf>
		nrf24_read_buf(TX_ADDR,buf_1,3);
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2203      	movs	r2, #3
 8001c34:	4619      	mov	r1, r3
 8001c36:	2010      	movs	r0, #16
 8001c38:	f7ff f862 	bl	8000d00 <nrf24_read_buf>
		nrf24_read_buf(RX_ADDR_P1,buf_1,3);	
		nrf24_read_buf(TX_ADDR,buf_0,3);
	#endif
	
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001c3c:	7b3b      	ldrb	r3, [r7, #12]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001c3e:	461c      	mov	r4, r3
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001c40:	7b7b      	ldrb	r3, [r7, #13]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001c42:	461d      	mov	r5, r3
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	7c3a      	ldrb	r2, [r7, #16]
 8001c48:	7c79      	ldrb	r1, [r7, #17]
 8001c4a:	7cb8      	ldrb	r0, [r7, #18]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001c4c:	9003      	str	r0, [sp, #12]
 8001c4e:	9102      	str	r1, [sp, #8]
 8001c50:	9201      	str	r2, [sp, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	462b      	mov	r3, r5
 8001c56:	4622      	mov	r2, r4
 8001c58:	4919      	ldr	r1, [pc, #100]	@ (8001cc0 <nrf_test+0xe0>)
 8001c5a:	481a      	ldr	r0, [pc, #104]	@ (8001cc4 <nrf_test+0xe4>)
 8001c5c:	f003 fbf8 	bl	8005450 <siprintf>
		usart_print(str);	
	#endif
	
	//проверяем значения регистров записанных при инициализации и считанных 
	
	for (uint8_t i = 0; i < TX_ADR_WIDTH; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	75bb      	strb	r3, [r7, #22]
 8001c64:	e01e      	b.n	8001ca4 <nrf_test+0xc4>
	{
		if (test_addr_0[i] != buf_0[i]) err = NRF_ERR;
 8001c66:	7dbb      	ldrb	r3, [r7, #22]
 8001c68:	3318      	adds	r3, #24
 8001c6a:	443b      	add	r3, r7
 8001c6c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001c70:	7dbb      	ldrb	r3, [r7, #22]
 8001c72:	3318      	adds	r3, #24
 8001c74:	443b      	add	r3, r7
 8001c76:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <nrf_test+0xa2>
 8001c7e:	23ff      	movs	r3, #255	@ 0xff
 8001c80:	75fb      	strb	r3, [r7, #23]
		if (test_addr_1[i] != buf_1[i]) err = NRF_ERR;
 8001c82:	7dbb      	ldrb	r3, [r7, #22]
 8001c84:	3318      	adds	r3, #24
 8001c86:	443b      	add	r3, r7
 8001c88:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001c8c:	7dbb      	ldrb	r3, [r7, #22]
 8001c8e:	3318      	adds	r3, #24
 8001c90:	443b      	add	r3, r7
 8001c92:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <nrf_test+0xbe>
 8001c9a:	23ff      	movs	r3, #255	@ 0xff
 8001c9c:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < TX_ADR_WIDTH; i++)
 8001c9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	75bb      	strb	r3, [r7, #22]
 8001ca4:	7dbb      	ldrb	r3, [r7, #22]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d9dd      	bls.n	8001c66 <nrf_test+0x86>
	}
	
	return err;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb4:	080064bc 	.word	0x080064bc
 8001cb8:	080064c0 	.word	0x080064c0
 8001cbc:	080064c4 	.word	0x080064c4
 8001cc0:	08006478 	.word	0x08006478
 8001cc4:	200001a8 	.word	0x200001a8

08001cc8 <test_and_info>:

//Процедура тестирования радиомодуля и сигнализации
void test_and_info(uint8_t err)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	sprintf(str, "v. %d.%02d", VERSION, SUBVERSION);
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	491c      	ldr	r1, [pc, #112]	@ (8001d48 <test_and_info+0x80>)
 8001cd8:	481c      	ldr	r0, [pc, #112]	@ (8001d4c <test_and_info+0x84>)
 8001cda:	f003 fbb9 	bl	8005450 <siprintf>
		usart_println(DEV_INFO);
		usart_println(str);
	#endif
	
	#ifdef LCD_2004
		LCD_SetPos(0,0);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff fbfb 	bl	80014dc <LCD_SetPos>
		LCD_String(DEV_INFO);
 8001ce6:	481a      	ldr	r0, [pc, #104]	@ (8001d50 <test_and_info+0x88>)
 8001ce8:	f7ff fbdb 	bl	80014a2 <LCD_String>
		LCD_SetPos(0,1);
 8001cec:	2101      	movs	r1, #1
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fbf4 	bl	80014dc <LCD_SetPos>
		LCD_String(str);
 8001cf4:	4815      	ldr	r0, [pc, #84]	@ (8001d4c <test_and_info+0x84>)
 8001cf6:	f7ff fbd4 	bl	80014a2 <LCD_String>
	#ifdef DEBUG_MODE
		usart_println(str);
	#endif	
	
	#ifndef DEBUG_MODE
	LL_IWDG_ReloadCounter(IWDG);
 8001cfa:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <test_and_info+0x8c>)
 8001cfc:	f7ff fc9a 	bl	8001634 <LL_IWDG_ReloadCounter>
	#endif
	
	err = nrf_test();		//выводим значения регистров в порт
 8001d00:	f7ff ff6e 	bl	8001be0 <nrf_test>
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
	
	if (err == ERR_OK) 
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <test_and_info+0x62>
	{
		sprintf(str, "%s ch = %d", "nrf24 OK ", CHANNEL);
 8001d0e:	2310      	movs	r3, #16
 8001d10:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <test_and_info+0x90>)
 8001d12:	4912      	ldr	r1, [pc, #72]	@ (8001d5c <test_and_info+0x94>)
 8001d14:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <test_and_info+0x84>)
 8001d16:	f003 fb9b 	bl	8005450 <siprintf>
		#ifdef DEBUG_MODE
			usart_println(str);
		#endif		
		
		#ifdef LCD_2004
			LCD_SetPos(0,2);
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff fbdd 	bl	80014dc <LCD_SetPos>
			LCD_String(str);
 8001d22:	480a      	ldr	r0, [pc, #40]	@ (8001d4c <test_and_info+0x84>)
 8001d24:	f7ff fbbd 	bl	80014a2 <LCD_String>
		
		#ifdef ST_7735
			ST7735_WriteString(0, 60, "nrf24 ERROR", Font_11x18, ST7735_WHITE, ST7735_BLACK);
		#endif
	}
}
 8001d28:	e009      	b.n	8001d3e <test_and_info+0x76>
	else  if (err == NRF_ERR) 
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2bff      	cmp	r3, #255	@ 0xff
 8001d2e:	d106      	bne.n	8001d3e <test_and_info+0x76>
			LCD_SetPos(0,2);
 8001d30:	2102      	movs	r1, #2
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fbd2 	bl	80014dc <LCD_SetPos>
			LCD_String("nrf ERROR");
 8001d38:	4809      	ldr	r0, [pc, #36]	@ (8001d60 <test_and_info+0x98>)
 8001d3a:	f7ff fbb2 	bl	80014a2 <LCD_String>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	080064c8 	.word	0x080064c8
 8001d4c:	200001a8 	.word	0x200001a8
 8001d50:	080064d4 	.word	0x080064d4
 8001d54:	40003000 	.word	0x40003000
 8001d58:	080064e4 	.word	0x080064e4
 8001d5c:	080064f0 	.word	0x080064f0
 8001d60:	080064fc 	.word	0x080064fc

08001d64 <sort_data>:

//Процедура сортировки данных по возрастанию
void sort_data(uint32_t *data) 
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES - 1; i++) 
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e033      	b.n	8001dda <sort_data+0x76>
	{ 
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES - i - 1 ; j++) 
 8001d72:	2300      	movs	r3, #0
 8001d74:	73bb      	strb	r3, [r7, #14]
 8001d76:	e027      	b.n	8001dc8 <sort_data+0x64>
		{
			if(data[j] > data[j+1]) 			//сравниваем два соседних элемента.
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	3301      	adds	r3, #1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	440b      	add	r3, r1
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d917      	bls.n	8001dc2 <sort_data+0x5e>
			{           									//если они идут в неправильном порядке, то  
				uint32_t tmp = data[j];			//меняем их местами. 
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60bb      	str	r3, [r7, #8]
        data[j] = data[j+1];
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	3301      	adds	r3, #1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	441a      	add	r2, r3
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	440b      	add	r3, r1
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	601a      	str	r2, [r3, #0]
        data[j+1] = tmp; 
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	3301      	adds	r3, #1
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	601a      	str	r2, [r3, #0]
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES - i - 1 ; j++) 
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	73bb      	strb	r3, [r7, #14]
 8001dc8:	7bba      	ldrb	r2, [r7, #14]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	f1c3 0313 	rsb	r3, r3, #19
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbd1      	blt.n	8001d78 <sort_data+0x14>
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES - 1; i++) 
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d9c8      	bls.n	8001d72 <sort_data+0xe>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <dwt_init>:

//Процедура инициализации модуля DWT
void dwt_init(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001df0:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <dwt_init+0x24>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <dwt_init+0x24>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <dwt_init+0x28>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <dwt_init+0x28>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000edfc 	.word	0xe000edfc
 8001e14:	e0001000 	.word	0xe0001000

08001e18 <delay_us>:

//Процедура микросекундной задержки
void delay_us(uint32_t us)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000); // получаем кол-во тактов за 1 мкс и умножаем на наше значение
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <delay_us+0x3c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <delay_us+0x40>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9a      	lsrs	r2, r3, #18
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U; // обнуляем счётчик
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <delay_us+0x44>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001e3a:	bf00      	nop
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <delay_us+0x44>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d8fa      	bhi.n	8001e3c <delay_us+0x24>
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200000a4 	.word	0x200000a4
 8001e58:	431bde83 	.word	0x431bde83
 8001e5c:	e0001000 	.word	0xe0001000

08001e60 <reset_all>:

//Процедура отправки общей команды сброса
void reset_all(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
	tx_buf[0] = RESET_CMD;	//
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <reset_all+0x3c>)
 8001e68:	22ff      	movs	r2, #255	@ 0xff
 8001e6a:	701a      	strb	r2, [r3, #0]
	
	uint16_t temp_crc = crc16_calc(tx_buf, TX_PLOAD_WIDTH - 2);
 8001e6c:	2109      	movs	r1, #9
 8001e6e:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <reset_all+0x3c>)
 8001e70:	f7ff fdc4 	bl	80019fc <crc16_calc>
 8001e74:	4603      	mov	r3, r0
 8001e76:	80fb      	strh	r3, [r7, #6]
	
	tx_buf[TX_PLOAD_WIDTH - 2] = (uint8_t)(temp_crc >> 8);
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <reset_all+0x3c>)
 8001e82:	725a      	strb	r2, [r3, #9]
	tx_buf[TX_PLOAD_WIDTH - 1] = (uint8_t)temp_crc;
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <reset_all+0x3c>)
 8001e8a:	729a      	strb	r2, [r3, #10]
	
	nrf24_send(tx_buf);						//отправляем посылку в эфир
 8001e8c:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <reset_all+0x3c>)
 8001e8e:	f7ff f85b 	bl	8000f48 <nrf24_send>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000194 	.word	0x20000194

08001ea0 <data_mix>:

//Процедура псевдослучайного перемешивания данных
void data_mix(uint8_t *data)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[NUM_OF_SLAVES];
	uint8_t i_rnd;
	
	//прибавляем ко всем элементам 1 потому что алгоритм предполагает отсутствие нулей
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77bb      	strb	r3, [r7, #30]
 8001eac:	e012      	b.n	8001ed4 <data_mix+0x34>
	{
			if (data[i] != 0xFF) data[i] = data[i] + 1;
 8001eae:	7fbb      	ldrb	r3, [r7, #30]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d009      	beq.n	8001ece <data_mix+0x2e>
 8001eba:	7fbb      	ldrb	r3, [r7, #30]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	7fbb      	ldrb	r3, [r7, #30]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3201      	adds	r2, #1
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001ece:	7fbb      	ldrb	r3, [r7, #30]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	77bb      	strb	r3, [r7, #30]
 8001ed4:	7fbb      	ldrb	r3, [r7, #30]
 8001ed6:	2b13      	cmp	r3, #19
 8001ed8:	d9e9      	bls.n	8001eae <data_mix+0xe>
	}
	
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8001eda:	2300      	movs	r3, #0
 8001edc:	777b      	strb	r3, [r7, #29]
 8001ede:	e03d      	b.n	8001f5c <data_mix+0xbc>
	{
		i_rnd = rand()%NUM_OF_SLAVES;	//генерируем случайный индекс
 8001ee0:	f003 f9b6 	bl	8005250 <rand>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <data_mix+0x100>)
 8001ee8:	fb83 1302 	smull	r1, r3, r3, r2
 8001eec:	10d9      	asrs	r1, r3, #3
 8001eee:	17d3      	asrs	r3, r2, #31
 8001ef0:	1ac9      	subs	r1, r1, r3
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	1ad1      	subs	r1, r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	77fb      	strb	r3, [r7, #31]
		
		while (data[i_rnd] == 0)			//в случае если элемент массива с полученным индексом нулевой
 8001f00:	e00f      	b.n	8001f22 <data_mix+0x82>
		{
				i_rnd = rand()%NUM_OF_SLAVES;		//генерируем новый случайный индекс пока не найдем ненулевой элемент
 8001f02:	f003 f9a5 	bl	8005250 <rand>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <data_mix+0x100>)
 8001f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f0e:	10d9      	asrs	r1, r3, #3
 8001f10:	17d3      	asrs	r3, r2, #31
 8001f12:	1ac9      	subs	r1, r1, r3
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	1ad1      	subs	r1, r2, r3
 8001f1e:	460b      	mov	r3, r1
 8001f20:	77fb      	strb	r3, [r7, #31]
		while (data[i_rnd] == 0)			//в случае если элемент массива с полученным индексом нулевой
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0e9      	beq.n	8001f02 <data_mix+0x62>
		}
		if (data[i_rnd] != 0)					
 8001f2e:	7ffb      	ldrb	r3, [r7, #31]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <data_mix+0xb6>
		{
				temp_data[i] = data[i_rnd];	//записываем случайный элемент массива во временный массив
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	441a      	add	r2, r3
 8001f40:	7f7b      	ldrb	r3, [r7, #29]
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	3320      	adds	r3, #32
 8001f46:	443b      	add	r3, r7
 8001f48:	f803 2c18 	strb.w	r2, [r3, #-24]
				data[i_rnd] = 0;						//обнуляем сохраненный элемент
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8001f56:	7f7b      	ldrb	r3, [r7, #29]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	777b      	strb	r3, [r7, #29]
 8001f5c:	7f7b      	ldrb	r3, [r7, #29]
 8001f5e:	2b13      	cmp	r3, #19
 8001f60:	d9be      	bls.n	8001ee0 <data_mix+0x40>
		}
	}
	
	//копируем перемешанные элементы массива обратно в исходный массив, вычитаем единицу
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001f62:	2300      	movs	r3, #0
 8001f64:	773b      	strb	r3, [r7, #28]
 8001f66:	e013      	b.n	8001f90 <data_mix+0xf0>
	{
			if (data[i] != 0xFF) data[i] = temp_data[i] - 1;
 8001f68:	7f3b      	ldrb	r3, [r7, #28]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2bff      	cmp	r3, #255	@ 0xff
 8001f72:	d00a      	beq.n	8001f8a <data_mix+0xea>
 8001f74:	7f3b      	ldrb	r3, [r7, #28]
 8001f76:	3320      	adds	r3, #32
 8001f78:	443b      	add	r3, r7
 8001f7a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f7e:	7f3b      	ldrb	r3, [r7, #28]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	440b      	add	r3, r1
 8001f84:	3a01      	subs	r2, #1
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001f8a:	7f3b      	ldrb	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	773b      	strb	r3, [r7, #28]
 8001f90:	7f3b      	ldrb	r3, [r7, #28]
 8001f92:	2b13      	cmp	r3, #19
 8001f94:	d9e8      	bls.n	8001f68 <data_mix+0xc8>
	}
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	66666667 	.word	0x66666667

08001fa4 <rst_push>:

//Процедура реализации команды "сброс"
void rst_push(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	reset_all();		//отправляем команду общего сброса всем кнопкам
 8001fa8:	f7ff ff5a 	bl	8001e60 <reset_all>
	
	f_rx = 0;					//опускаем флаг приема
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <rst_push+0x2c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]

	//приводим в исходное состояние дисплей
	#ifdef LCD_2004
		LCD_Clear();
 8001fb2:	f7ff fa5d 	bl	8001470 <LCD_Clear>
		refresh_display();
 8001fb6:	f7ff fde3 	bl	8001b80 <refresh_display>
			w_string_2[i] = ' ';
		}
	#endif
	
	//перемешаваем массив с номерами кнопок
	data_mix(slave_nums);
 8001fba:	4806      	ldr	r0, [pc, #24]	@ (8001fd4 <rst_push+0x30>)
 8001fbc:	f7ff ff70 	bl	8001ea0 <data_mix>
	//приводим все переменные в исходное состояние
	init_variables();
 8001fc0:	f7ff fcb0 	bl	8001924 <init_variables>
	//делаем паузу
	LL_mDelay(SCAN_PERIOD * 5);
 8001fc4:	2005      	movs	r0, #5
 8001fc6:	f003 f85b 	bl	8005080 <LL_mDelay>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000019f 	.word	0x2000019f
 8001fd4:	20000030 	.word	0x20000030

08001fd8 <set_push>:

//Процедура команды "установка"
void set_push(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	//присваиваем новое значение переключателя звуковых файлов
	vars.sound_switch++;			
 8001fdc:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <set_push+0x9c>)
 8001fde:	7c5b      	ldrb	r3, [r3, #17]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <set_push+0x9c>)
 8001fe8:	745a      	strb	r2, [r3, #17]
	if (vars.sound_switch >= 5) vars.sound_switch = 0;
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <set_push+0x9c>)
 8001fec:	7c5b      	ldrb	r3, [r3, #17]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d902      	bls.n	8001ffa <set_push+0x22>
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <set_push+0x9c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	745a      	strb	r2, [r3, #17]
	
	//отображаем на дисплее название нового звука
	#ifdef LCD_2004
		switch (vars.sound_switch)
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <set_push+0x9c>)
 8001ffc:	7c5b      	ldrb	r3, [r3, #17]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b04      	cmp	r3, #4
 8002002:	d835      	bhi.n	8002070 <set_push+0x98>
 8002004:	a201      	add	r2, pc, #4	@ (adr r2, 800200c <set_push+0x34>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	08002021 	.word	0x08002021
 8002010:	08002031 	.word	0x08002031
 8002014:	08002041 	.word	0x08002041
 8002018:	08002051 	.word	0x08002051
 800201c:	08002061 	.word	0x08002061
		{
			case 0:
				LCD_SetPos(12,2);
 8002020:	2102      	movs	r1, #2
 8002022:	200c      	movs	r0, #12
 8002024:	f7ff fa5a 	bl	80014dc <LCD_SetPos>
				LCD_String("shoot   ");
 8002028:	4813      	ldr	r0, [pc, #76]	@ (8002078 <set_push+0xa0>)
 800202a:	f7ff fa3a 	bl	80014a2 <LCD_String>
			break;
 800202e:	e01f      	b.n	8002070 <set_push+0x98>
			case 1:
				LCD_SetPos(12,2);
 8002030:	2102      	movs	r1, #2
 8002032:	200c      	movs	r0, #12
 8002034:	f7ff fa52 	bl	80014dc <LCD_SetPos>
				LCD_String("open    ");
 8002038:	4810      	ldr	r0, [pc, #64]	@ (800207c <set_push+0xa4>)
 800203a:	f7ff fa32 	bl	80014a2 <LCD_String>
			break;
 800203e:	e017      	b.n	8002070 <set_push+0x98>
			case 2:
				LCD_SetPos(12,2);
 8002040:	2102      	movs	r1, #2
 8002042:	200c      	movs	r0, #12
 8002044:	f7ff fa4a 	bl	80014dc <LCD_SetPos>
				LCD_String("svist   ");
 8002048:	480d      	ldr	r0, [pc, #52]	@ (8002080 <set_push+0xa8>)
 800204a:	f7ff fa2a 	bl	80014a2 <LCD_String>
			break;
 800204e:	e00f      	b.n	8002070 <set_push+0x98>
			case 3:
				LCD_SetPos(12,2);
 8002050:	2102      	movs	r1, #2
 8002052:	200c      	movs	r0, #12
 8002054:	f7ff fa42 	bl	80014dc <LCD_SetPos>
				LCD_String("falstart");
 8002058:	480a      	ldr	r0, [pc, #40]	@ (8002084 <set_push+0xac>)
 800205a:	f7ff fa22 	bl	80014a2 <LCD_String>
			break;
 800205e:	e007      	b.n	8002070 <set_push+0x98>
			case 4:
				LCD_SetPos(12,2);
 8002060:	2102      	movs	r1, #2
 8002062:	200c      	movs	r0, #12
 8002064:	f7ff fa3a 	bl	80014dc <LCD_SetPos>
				LCD_String("zvon    ");
 8002068:	4807      	ldr	r0, [pc, #28]	@ (8002088 <set_push+0xb0>)
 800206a:	f7ff fa1a 	bl	80014a2 <LCD_String>
			break;
 800206e:	bf00      	nop
				ST7735_WriteString(0, 90, "zvon    ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
			break;
		}
	#endif

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200001f0 	.word	0x200001f0
 8002078:	08006508 	.word	0x08006508
 800207c:	08006514 	.word	0x08006514
 8002080:	08006520 	.word	0x08006520
 8002084:	0800652c 	.word	0x0800652c
 8002088:	08006538 	.word	0x08006538

0800208c <time_push>:

//Процедура выполнения команды "время"
void time_push(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	flags.f_timer = 1;		//поднимаем флаг таймера
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <time_push+0x6c>)
 8002092:	2201      	movs	r2, #1
 8002094:	711a      	strb	r2, [r3, #4]
	vars.seconds = 0;			//обнуляем счетчик секунд
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <time_push+0x70>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
	//Выводим на дисплей значение времени
	#ifdef LCD_2004
		LCD_SetPos(0,2);
 800209c:	2102      	movs	r1, #2
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fa1c 	bl	80014dc <LCD_SetPos>
		LCD_String(string_2);	//очищаем строку
 80020a4:	4816      	ldr	r0, [pc, #88]	@ (8002100 <time_push+0x74>)
 80020a6:	f7ff f9fc 	bl	80014a2 <LCD_String>
		sprintf(str, "%02d:%02d", (uint8_t)vars.seconds/60, (uint8_t)vars.seconds%60);
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <time_push+0x70>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <time_push+0x78>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <time_push+0x70>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <time_push+0x78>)
 80020c4:	fba3 1302 	umull	r1, r3, r3, r2
 80020c8:	0959      	lsrs	r1, r3, #5
 80020ca:	460b      	mov	r3, r1
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a5b      	subs	r3, r3, r1
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4602      	mov	r2, r0
 80020d8:	490b      	ldr	r1, [pc, #44]	@ (8002108 <time_push+0x7c>)
 80020da:	480c      	ldr	r0, [pc, #48]	@ (800210c <time_push+0x80>)
 80020dc:	f003 f9b8 	bl	8005450 <siprintf>
		LCD_SetPos(0,2);
 80020e0:	2102      	movs	r1, #2
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff f9fa 	bl	80014dc <LCD_SetPos>
		LCD_String(str);
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <time_push+0x80>)
 80020ea:	f7ff f9da 	bl	80014a2 <LCD_String>
	#ifdef ST_7735
		sprintf(str, "%02d:%02d", vars.seconds/60, vars.seconds%60);
		ST7735_WriteString(0, 110, str, Font_11x18, ST7735_WHITE, ST7735_BLACK);
	#endif
	//воспроизводим нужный звуковой айл
	mp3_play(MP3_START);
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7fe f914 	bl	800031c <mp3_play>
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200001e8 	.word	0x200001e8
 80020fc:	200001f0 	.word	0x200001f0
 8002100:	20000074 	.word	0x20000074
 8002104:	88888889 	.word	0x88888889
 8002108:	08006544 	.word	0x08006544
 800210c:	200001a8 	.word	0x200001a8

08002110 <order_processing>:

//Процедура формирования очереди нажатий
void order_processing(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09c      	sub	sp, #112	@ 0x70
 8002114:	af00      	add	r7, sp, #0
	uint32_t time_to_sort[NUM_OF_SLAVES];
	//uint32_t buts_to_sort[NUM_OF_SLAVES];
	
	uint8_t flag_order[NUM_OF_SLAVES] = {0};
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
	
	uint8_t order = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	//uint8_t number = 0;
	
	//копируем времена кнопок для сортировки
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800212e:	2300      	movs	r3, #0
 8002130:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002134:	e012      	b.n	800215c <order_processing+0x4c>
	{ 
		time_to_sort[i] = b_data[i].time;
 8002136:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800213a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800213e:	499b      	ldr	r1, [pc, #620]	@ (80023ac <order_processing+0x29c>)
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	440a      	add	r2, r1
 8002144:	3204      	adds	r2, #4
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3370      	adds	r3, #112	@ 0x70
 800214c:	443b      	add	r3, r7
 800214e:	f843 2c58 	str.w	r2, [r3, #-88]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002152:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002156:	3301      	adds	r3, #1
 8002158:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800215c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002160:	2b13      	cmp	r3, #19
 8002162:	d9e8      	bls.n	8002136 <order_processing+0x26>
	}
	//сортируем времена
	sort_data(time_to_sort);
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fdfb 	bl	8001d64 <sort_data>
	
	//находим 
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800216e:	2300      	movs	r3, #0
 8002170:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8002174:	e052      	b.n	800221c <order_processing+0x10c>
	{ 
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES; j++) 
 8002176:	2300      	movs	r3, #0
 8002178:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800217c:	e045      	b.n	800220a <order_processing+0xfa>
		{ 
			//в качестве индекса номер из перемешанного массива для обеспечения более объективного выбора очередности при совпадении времен
			//если время кнопки сопадает со следующим по величине, точно нажималась и соответствующий флаг учета очереди не поднят
			if ((b_data[slave_nums[j]].time == time_to_sort[i]) && (b_data[slave_nums[j]].time != MAX_TIME) && (!flag_order[slave_nums[j]]) )
 800217e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002182:	4a8b      	ldr	r2, [pc, #556]	@ (80023b0 <order_processing+0x2a0>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	4a89      	ldr	r2, [pc, #548]	@ (80023ac <order_processing+0x29c>)
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3370      	adds	r3, #112	@ 0x70
 8002198:	443b      	add	r3, r7
 800219a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d12e      	bne.n	8002200 <order_processing+0xf0>
 80021a2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80021a6:	4a82      	ldr	r2, [pc, #520]	@ (80023b0 <order_processing+0x2a0>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	4a80      	ldr	r2, [pc, #512]	@ (80023ac <order_processing+0x29c>)
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d022      	beq.n	8002200 <order_processing+0xf0>
 80021ba:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80021be:	4a7c      	ldr	r2, [pc, #496]	@ (80023b0 <order_processing+0x2a0>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	3370      	adds	r3, #112	@ 0x70
 80021c4:	443b      	add	r3, r7
 80021c6:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <order_processing+0xf0>
			{
				order++;																	//переходим к следующему значению очереди
 80021ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80021d2:	3301      	adds	r3, #1
 80021d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				b_data[slave_nums[j]].push_order = order;	//присваиваем соответствующий номер в очереди кнопке
 80021d8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80021dc:	4a74      	ldr	r2, [pc, #464]	@ (80023b0 <order_processing+0x2a0>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	4a72      	ldr	r2, [pc, #456]	@ (80023ac <order_processing+0x29c>)
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	330d      	adds	r3, #13
 80021e8:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80021ec:	701a      	strb	r2, [r3, #0]
				flag_order[slave_nums[j]] = 1;						//поднимаем флаг учета
 80021ee:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80021f2:	4a6f      	ldr	r2, [pc, #444]	@ (80023b0 <order_processing+0x2a0>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	3370      	adds	r3, #112	@ 0x70
 80021f8:	443b      	add	r3, r7
 80021fa:	2201      	movs	r2, #1
 80021fc:	f803 2c6c 	strb.w	r2, [r3, #-108]
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES; j++) 
 8002200:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002204:	3301      	adds	r3, #1
 8002206:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800220a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800220e:	2b13      	cmp	r3, #19
 8002210:	d9b5      	bls.n	800217e <order_processing+0x6e>
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002212:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002216:	3301      	adds	r3, #1
 8002218:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800221c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002220:	2b13      	cmp	r3, #19
 8002222:	d9a8      	bls.n	8002176 <order_processing+0x66>
			}
		}
	}
	
	//отсылаем в последовательный порт символы в нужной последовательности
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002224:	2300      	movs	r3, #0
 8002226:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800222a:	e02d      	b.n	8002288 <order_processing+0x178>
	{ 
		//если номер в очереди соответствует текущему значению счетчика очереди и кнопка нажималась
		if ((b_data[i].push_order == vars.send_order_count) && (b_data[i].time != MAX_TIME))
 800222c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002230:	4a5e      	ldr	r2, [pc, #376]	@ (80023ac <order_processing+0x29c>)
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	330d      	adds	r3, #13
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4b5e      	ldr	r3, [pc, #376]	@ (80023b4 <order_processing+0x2a4>)
 800223c:	7c9b      	ldrb	r3, [r3, #18]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	429a      	cmp	r2, r3
 8002242:	d11c      	bne.n	800227e <order_processing+0x16e>
 8002244:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002248:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <order_processing+0x29c>)
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d012      	beq.n	800227e <order_processing+0x16e>
		{
			sprintf(str,"%c",char_to_send[i]);		
 8002258:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800225c:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <order_processing+0x2a8>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	461a      	mov	r2, r3
 8002262:	4956      	ldr	r1, [pc, #344]	@ (80023bc <order_processing+0x2ac>)
 8002264:	4856      	ldr	r0, [pc, #344]	@ (80023c0 <order_processing+0x2b0>)
 8002266:	f003 f8f3 	bl	8005450 <siprintf>
			usart_print(str);					//высылаем символ в порт
 800226a:	4855      	ldr	r0, [pc, #340]	@ (80023c0 <order_processing+0x2b0>)
 800226c:	f7ff f83e 	bl	80012ec <usart_print>
			vars.send_order_count++;	//увеличиваем значение счетчика
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <order_processing+0x2a4>)
 8002272:	7c9b      	ldrb	r3, [r3, #18]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b4e      	ldr	r3, [pc, #312]	@ (80023b4 <order_processing+0x2a4>)
 800227c:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800227e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002282:	3301      	adds	r3, #1
 8002284:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002288:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800228c:	2b13      	cmp	r3, #19
 800228e:	d9cd      	bls.n	800222c <order_processing+0x11c>
		}
	}
	
	//расставляем состояния кнопок для отправки и выводим очередь на дисплей
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002290:	2300      	movs	r3, #0
 8002292:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8002296:	e07e      	b.n	8002396 <order_processing+0x286>
	{ 
		if (b_data[i].push_order != 0)
 8002298:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800229c:	4a43      	ldr	r2, [pc, #268]	@ (80023ac <order_processing+0x29c>)
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	330d      	adds	r3, #13
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d070      	beq.n	800238c <order_processing+0x27c>
		{
			if (b_data[i].push_order == 1)
 80022aa:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022ae:	4a3f      	ldr	r2, [pc, #252]	@ (80023ac <order_processing+0x29c>)
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	4413      	add	r3, r2
 80022b4:	330d      	adds	r3, #13
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <order_processing+0x1be>
			{
				b_data[i].led_status = LED_STAT_TGL;	//первому в очереди - моргать
 80022bc:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022c0:	4a3a      	ldr	r2, [pc, #232]	@ (80023ac <order_processing+0x29c>)
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	330c      	adds	r3, #12
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e007      	b.n	80022de <order_processing+0x1ce>
			}
			else
			{
				b_data[i].led_status = LED_STAT_ON;		//оставшиеся нажатые - зажечь
 80022ce:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022d2:	4a36      	ldr	r2, [pc, #216]	@ (80023ac <order_processing+0x29c>)
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	330c      	adds	r3, #12
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
			}
			//выводим данные на дисплей
			#ifdef LCD_2004
				LCD_SetPos(b_data[i].number, 1);
 80022de:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022e2:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <order_processing+0x29c>)
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f8f5 	bl	80014dc <LCD_SetPos>
				LCD_SendChar(char_to_send[b_data[i].push_order - 1]);
 80022f2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022f6:	4a2d      	ldr	r2, [pc, #180]	@ (80023ac <order_processing+0x29c>)
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4413      	add	r3, r2
 80022fc:	330d      	adds	r3, #13
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <order_processing+0x2a8>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f8bd 	bl	8001486 <LCD_SendChar>
					ST7735_Write_W_String(0, 70, w_string_2, Font_11x18, ST7735_YELLOW, ST7735_BLACK);
				}
			#endif
			
			//воспроизводим звук нажатия в зависимости от состояния таймера и настроек
			if (!b_data[i].pushed)
 800230c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <order_processing+0x29c>)
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	3302      	adds	r3, #2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d136      	bne.n	800238c <order_processing+0x27c>
			{
				b_data[i].pushed = 1;
 800231e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8002322:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <order_processing+0x29c>)
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	3302      	adds	r3, #2
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]

				if (flags.f_timer)
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <order_processing+0x2b4>)
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <order_processing+0x230>
				{
					mp3_play(MP3_ANSWER);
 8002338:	2002      	movs	r0, #2
 800233a:	f7fd ffef 	bl	800031c <mp3_play>
 800233e:	e025      	b.n	800238c <order_processing+0x27c>
				}
				else
				{
					switch (vars.sound_switch)
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <order_processing+0x2a4>)
 8002342:	7c5b      	ldrb	r3, [r3, #17]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b04      	cmp	r3, #4
 8002348:	d820      	bhi.n	800238c <order_processing+0x27c>
 800234a:	a201      	add	r2, pc, #4	@ (adr r2, 8002350 <order_processing+0x240>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002365 	.word	0x08002365
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002375 	.word	0x08002375
 800235c:	0800237d 	.word	0x0800237d
 8002360:	08002385 	.word	0x08002385
					{
						case 0:
							mp3_play(MP3_SHOOT);
 8002364:	2001      	movs	r0, #1
 8002366:	f7fd ffd9 	bl	800031c <mp3_play>
						break;
 800236a:	e00f      	b.n	800238c <order_processing+0x27c>
						case 1:
							mp3_play(MP3_ANSWER);
 800236c:	2002      	movs	r0, #2
 800236e:	f7fd ffd5 	bl	800031c <mp3_play>
						break;
 8002372:	e00b      	b.n	800238c <order_processing+0x27c>
						case 2:
							mp3_play(MP3_SVIST);
 8002374:	2003      	movs	r0, #3
 8002376:	f7fd ffd1 	bl	800031c <mp3_play>
						break;
 800237a:	e007      	b.n	800238c <order_processing+0x27c>
						case 3:
							mp3_play(MP3_FALSTART);
 800237c:	2004      	movs	r0, #4
 800237e:	f7fd ffcd 	bl	800031c <mp3_play>
						break;
 8002382:	e003      	b.n	800238c <order_processing+0x27c>
						case 4:
							mp3_play(MP3_ZVON);
 8002384:	2006      	movs	r0, #6
 8002386:	f7fd ffc9 	bl	800031c <mp3_play>
						break;
 800238a:	bf00      	nop
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800238c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8002390:	3301      	adds	r3, #1
 8002392:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8002396:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800239a:	2b13      	cmp	r3, #19
 800239c:	f67f af7c 	bls.w	8002298 <order_processing+0x188>
					}
				}
			}
		}
	}
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3770      	adds	r7, #112	@ 0x70
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000204 	.word	0x20000204
 80023b0:	20000030 	.word	0x20000030
 80023b4:	200001f0 	.word	0x200001f0
 80023b8:	20000008 	.word	0x20000008
 80023bc:	08006550 	.word	0x08006550
 80023c0:	200001a8 	.word	0x200001a8
 80023c4:	200001e8 	.word	0x200001e8

080023c8 <nxt_push>:

//Процедура выполнения команды "далее"
void nxt_push(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 80023ce:	2300      	movs	r3, #0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	e037      	b.n	8002444 <nxt_push+0x7c>
	{ 
		//находим первого в очереди
		if (b_data[i].push_order == 1) 	
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <nxt_push+0xa0>)
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4413      	add	r3, r2
 80023dc:	330d      	adds	r3, #13
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d116      	bne.n	8002412 <nxt_push+0x4a>
		{
			b_data[i].push_order = 0;						//обнуляем значение номера в очереди
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <nxt_push+0xa0>)
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	330d      	adds	r3, #13
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
			b_data[i].time = MAX_TIME;					//устанавливаем стандартное значение времени
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <nxt_push+0xa0>)
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	601a      	str	r2, [r3, #0]
			b_data[i].led_status = LED_STAT_OFF;//записываем команду на выключения для отправки
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <nxt_push+0xa0>)
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	330c      	adds	r3, #12
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e015      	b.n	800243e <nxt_push+0x76>
		}
		else if (b_data[i].push_order > 1) 		//уменьшаем номер в очереди всем остальным в очереди
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <nxt_push+0xa0>)
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	330d      	adds	r3, #13
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d90d      	bls.n	800243e <nxt_push+0x76>
		{
			b_data[i].push_order--;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4910      	ldr	r1, [pc, #64]	@ (8002468 <nxt_push+0xa0>)
 8002426:	011a      	lsls	r2, r3, #4
 8002428:	440a      	add	r2, r1
 800242a:	320d      	adds	r2, #13
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	3a01      	subs	r2, #1
 8002430:	b2d1      	uxtb	r1, r2
 8002432:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <nxt_push+0xa0>)
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4413      	add	r3, r2
 8002438:	330d      	adds	r3, #13
 800243a:	460a      	mov	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	3301      	adds	r3, #1
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b13      	cmp	r3, #19
 8002448:	d9c4      	bls.n	80023d4 <nxt_push+0xc>
		}
	}
	
	//очищаем отображение очереди на дисплее
	#ifdef LCD_2004
		LCD_SetPos(0,1);
 800244a:	2101      	movs	r1, #1
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff f845 	bl	80014dc <LCD_SetPos>
		LCD_String(string_1);
 8002452:	4806      	ldr	r0, [pc, #24]	@ (800246c <nxt_push+0xa4>)
 8002454:	f7ff f825 	bl	80014a2 <LCD_String>
	#endif
	
	//формируем новую очередь
	//order_processing();

	LL_mDelay(100); //пауза против дребезга кнопки
 8002458:	2064      	movs	r0, #100	@ 0x64
 800245a:	f002 fe11 	bl	8005080 <LL_mDelay>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000204 	.word	0x20000204
 800246c:	2000005c 	.word	0x2000005c

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t err = ERR_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800247a:	f001 f89d 	bl	80035b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247e:	f000 f901 	bl	8002684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002482:	f7fe f96d 	bl	8000760 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002486:	f000 f9e3 	bl	8002850 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800248a:	f000 ffaf 	bl	80033ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800248e:	f000 fe4d 	bl	800312c <MX_TIM1_Init>
  MX_I2C1_Init();
 8002492:	f7fe faa7 	bl	80009e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002496:	f000 fe8d 	bl	80031b4 <MX_TIM2_Init>
  MX_SPI2_Init();
 800249a:	f000 fa2d 	bl	80028f8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800249e:	f001 f80d 	bl	80034bc <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80024a2:	f7fe fb63 	bl	8000b6c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	
	dwt_init();					//инициализируем dwt
 80024a6:	f7ff fca1 	bl	8001dec <dwt_init>
	spi_init();					//инициализируем SPI
 80024aa:	f7fe fe79 	bl	80011a0 <spi_init>
	nrf24_init();				//инициализируем радиомодуль
 80024ae:	f7fe fd8b 	bl	8000fc8 <nrf24_init>
	usart_init(103);		//инициализируем USART
 80024b2:	2067      	movs	r0, #103	@ 0x67
 80024b4:	f7fe fef4 	bl	80012a0 <usart_init>
	
	display_init();			//инициализируем дисплей
 80024b8:	f7ff fb8c 	bl	8001bd4 <display_init>

	test_and_info(err);	//тестируем радиомодуль и выводим информацию	
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fc02 	bl	8001cc8 <test_and_info>
	
	#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80024c4:	4865      	ldr	r0, [pc, #404]	@ (800265c <main+0x1ec>)
 80024c6:	f7ff f8b5 	bl	8001634 <LL_IWDG_ReloadCounter>
	#endif
	
	mp3_init();					//инициализируем звуковой модуль
 80024ca:	f7fd fea7 	bl	800021c <mp3_init>

	refresh_display();	//обновляем дисплей
 80024ce:	f7ff fb57 	bl	8001b80 <refresh_display>
	
	//разрешаем прерывания, запускаем таймеры
	LL_TIM_EnableIT_UPDATE(TIM1);
 80024d2:	4863      	ldr	r0, [pc, #396]	@ (8002660 <main+0x1f0>)
 80024d4:	f7ff f9de 	bl	8001894 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);	
 80024d8:	4861      	ldr	r0, [pc, #388]	@ (8002660 <main+0x1f0>)
 80024da:	f7ff f9ad 	bl	8001838 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM2);
 80024de:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80024e2:	f7ff f9d7 	bl	8001894 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 80024e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80024ea:	f7ff f9a5 	bl	8001838 <LL_TIM_EnableCounter>
	LL_USART_EnableIT_RXNE(USART1);
 80024ee:	485d      	ldr	r0, [pc, #372]	@ (8002664 <main+0x1f4>)
 80024f0:	f7ff f9df 	bl	80018b2 <LL_USART_EnableIT_RXNE>
	
	//инициализируем переменные
	init_variables();
 80024f4:	f7ff fa16 	bl	8001924 <init_variables>
	
	//отправляем команду общего сброса
	reset_all();
 80024f8:	f7ff fcb2 	bl	8001e60 <reset_all>
	
	//устанавливаем громкость звукового модуля
	mp3_volume(15);
 80024fc:	200f      	movs	r0, #15
 80024fe:	f7fd ff7f 	bl	8000400 <mp3_volume>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	
		//проверяем флаг сброса 
		if (flags.rst_push)			//если поднят флаг
 8002502:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <main+0x1f8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <main+0xa6>
		{
			flags.rst_push = 0;		//опускаем флаг
 800250c:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <main+0x1f8>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
			rst_push();						//выполняем команду "сброс"
 8002512:	f7ff fd47 	bl	8001fa4 <rst_push>
		}
		
		//следующий блок выполняется с указанной периодичностью
		if ((vars.millis - vars.temp_millis) > SCAN_PERIOD)
 8002516:	4b55      	ldr	r3, [pc, #340]	@ (800266c <main+0x1fc>)
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	4b54      	ldr	r3, [pc, #336]	@ (800266c <main+0x1fc>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	f240 8094 	bls.w	800264e <main+0x1de>
		{
			vars.temp_millis = vars.millis;
 8002526:	4b51      	ldr	r3, [pc, #324]	@ (800266c <main+0x1fc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4a50      	ldr	r2, [pc, #320]	@ (800266c <main+0x1fc>)
 800252c:	60d3      	str	r3, [r2, #12]
			
			tx_buf[0] = b_data[vars.slave_counter].address;	//записываем в буфер очередной адрес
 800252e:	4b4f      	ldr	r3, [pc, #316]	@ (800266c <main+0x1fc>)
 8002530:	7c1b      	ldrb	r3, [r3, #16]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4a4e      	ldr	r2, [pc, #312]	@ (8002670 <main+0x200>)
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	3301      	adds	r3, #1
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <main+0x204>)
 8002540:	701a      	strb	r2, [r3, #0]
			tx_buf[1] = b_data[vars.slave_counter].cmd;
 8002542:	4b4a      	ldr	r3, [pc, #296]	@ (800266c <main+0x1fc>)
 8002544:	7c1b      	ldrb	r3, [r3, #16]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4a49      	ldr	r2, [pc, #292]	@ (8002670 <main+0x200>)
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	330e      	adds	r3, #14
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	4b48      	ldr	r3, [pc, #288]	@ (8002674 <main+0x204>)
 8002554:	705a      	strb	r2, [r3, #1]
			tx_buf[2] = b_data[vars.slave_counter].led_status;
 8002556:	4b45      	ldr	r3, [pc, #276]	@ (800266c <main+0x1fc>)
 8002558:	7c1b      	ldrb	r3, [r3, #16]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4a44      	ldr	r2, [pc, #272]	@ (8002670 <main+0x200>)
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4413      	add	r3, r2
 8002562:	330c      	adds	r3, #12
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <main+0x204>)
 8002568:	709a      	strb	r2, [r3, #2]
			
			uint16_t temp_crc = crc16_calc(tx_buf, TX_PLOAD_WIDTH - 2);
 800256a:	2109      	movs	r1, #9
 800256c:	4841      	ldr	r0, [pc, #260]	@ (8002674 <main+0x204>)
 800256e:	f7ff fa45 	bl	80019fc <crc16_calc>
 8002572:	4603      	mov	r3, r0
 8002574:	80bb      	strh	r3, [r7, #4]
			
			tx_buf[TX_PLOAD_WIDTH - 2] = (uint8_t)(temp_crc >> 8);
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29b      	uxth	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <main+0x204>)
 8002580:	725a      	strb	r2, [r3, #9]
			tx_buf[TX_PLOAD_WIDTH - 1] = (uint8_t)temp_crc;
 8002582:	88bb      	ldrh	r3, [r7, #4]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <main+0x204>)
 8002588:	729a      	strb	r2, [r3, #10]
			
			nrf24_send(tx_buf);						//отправляем посылку в эфир
 800258a:	483a      	ldr	r0, [pc, #232]	@ (8002674 <main+0x204>)
 800258c:	f7fe fcdc 	bl	8000f48 <nrf24_send>

			vars.slave_counter++;
 8002590:	4b36      	ldr	r3, [pc, #216]	@ (800266c <main+0x1fc>)
 8002592:	7c1b      	ldrb	r3, [r3, #16]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <main+0x1fc>)
 800259c:	741a      	strb	r2, [r3, #16]
			
			if (vars.slave_counter >= NUM_OF_SLAVES) 
 800259e:	4b33      	ldr	r3, [pc, #204]	@ (800266c <main+0x1fc>)
 80025a0:	7c1b      	ldrb	r3, [r3, #16]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b13      	cmp	r3, #19
 80025a6:	d922      	bls.n	80025ee <main+0x17e>
			{
				vars.slave_counter = 0;			
 80025a8:	4b30      	ldr	r3, [pc, #192]	@ (800266c <main+0x1fc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	741a      	strb	r2, [r3, #16]
				
				if (flags.nxt_push)
 80025ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <main+0x1f8>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <main+0x152>
				{
					flags.nxt_push = 0;
 80025b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <main+0x1f8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	705a      	strb	r2, [r3, #1]
					nxt_push();
 80025be:	f7ff ff03 	bl	80023c8 <nxt_push>
				}
				
				if (flags.set_push)
 80025c2:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <main+0x1f8>)
 80025c4:	789b      	ldrb	r3, [r3, #2]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <main+0x166>
				{
					flags.set_push = 0;
 80025cc:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <main+0x1f8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	709a      	strb	r2, [r3, #2]
					set_push();
 80025d2:	f7ff fd01 	bl	8001fd8 <set_push>
				}

				if (flags.time_push)
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <main+0x1f8>)
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <main+0x17a>
				{
					flags.time_push = 0;
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <main+0x1f8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	70da      	strb	r2, [r3, #3]
					time_push();
 80025e6:	f7ff fd51 	bl	800208c <time_push>
				}
				
				order_processing();
 80025ea:	f7ff fd91 	bl	8002110 <order_processing>
			}
			
			if (flags.f_timer)	//если секундный таймер запущен
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <main+0x1f8>)
 80025f0:	791b      	ldrb	r3, [r3, #4]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02a      	beq.n	800264e <main+0x1de>
			{			
				//если прошла секунда
				if ((vars.seconds - vars.temp_seconds) > 0)
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <main+0x1fc>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <main+0x1fc>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d024      	beq.n	800264e <main+0x1de>
				{
					uint8_t dec = vars.seconds/60;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <main+0x1fc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <main+0x208>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	70fb      	strb	r3, [r7, #3]
					uint8_t ed = vars.seconds%60;
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <main+0x1fc>)
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <main+0x208>)
 8002618:	fba3 2301 	umull	r2, r3, r3, r1
 800261c:	095a      	lsrs	r2, r3, #5
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	1aca      	subs	r2, r1, r3
 8002628:	4613      	mov	r3, r2
 800262a:	70bb      	strb	r3, [r7, #2]
					vars.temp_seconds = vars.seconds;
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <main+0x1fc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <main+0x1fc>)
 8002632:	6053      	str	r3, [r2, #4]
					
					//отображаем текущее время на дисплее
					#ifdef LCD_2004
						sprintf(str, "%02d:%02d", dec, ed);
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	78bb      	ldrb	r3, [r7, #2]
 8002638:	4910      	ldr	r1, [pc, #64]	@ (800267c <main+0x20c>)
 800263a:	4811      	ldr	r0, [pc, #68]	@ (8002680 <main+0x210>)
 800263c:	f002 ff08 	bl	8005450 <siprintf>
						LCD_SetPos(0,2);
 8002640:	2102      	movs	r1, #2
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe ff4a 	bl	80014dc <LCD_SetPos>
						LCD_String(str);
 8002648:	480d      	ldr	r0, [pc, #52]	@ (8002680 <main+0x210>)
 800264a:	f7fe ff2a 	bl	80014a2 <LCD_String>
					#endif
				}
			}
		}

		nrf24l01_receive();		//прием
 800264e:	f7ff fa27 	bl	8001aa0 <nrf24l01_receive>
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 8002652:	4802      	ldr	r0, [pc, #8]	@ (800265c <main+0x1ec>)
 8002654:	f7fe ffee 	bl	8001634 <LL_IWDG_ReloadCounter>
		if (flags.rst_push)			//если поднят флаг
 8002658:	e753      	b.n	8002502 <main+0x92>
 800265a:	bf00      	nop
 800265c:	40003000 	.word	0x40003000
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40013800 	.word	0x40013800
 8002668:	200001e8 	.word	0x200001e8
 800266c:	200001f0 	.word	0x200001f0
 8002670:	20000204 	.word	0x20000204
 8002674:	20000194 	.word	0x20000194
 8002678:	88888889 	.word	0x88888889
 800267c:	08006544 	.word	0x08006544
 8002680:	200001a8 	.word	0x200001a8

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002688:	2002      	movs	r0, #2
 800268a:	f7ff f8b5 	bl	80017f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800268e:	bf00      	nop
 8002690:	f7ff f8c6 	bl	8001820 <LL_FLASH_GetLatency>
 8002694:	4603      	mov	r3, r0
 8002696:	2b02      	cmp	r3, #2
 8002698:	d1fa      	bne.n	8002690 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800269a:	f7fe ffd9 	bl	8001650 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800269e:	bf00      	nop
 80026a0:	f7fe ffe4 	bl	800166c <LL_RCC_HSE_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d1fa      	bne.n	80026a0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 80026aa:	f7fe fff1 	bl	8001690 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80026ae:	bf00      	nop
 80026b0:	f7fe fffc 	bl	80016ac <LL_RCC_LSI_IsReady>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d1fa      	bne.n	80026b0 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80026ba:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80026be:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80026c2:	f7ff f881 	bl	80017c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80026c6:	f7ff f85f 	bl	8001788 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026ca:	bf00      	nop
 80026cc:	f7ff f86a 	bl	80017a4 <LL_RCC_PLL_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1fa      	bne.n	80026cc <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff f81a 	bl	8001710 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80026dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026e0:	f7ff f82a 	bl	8001738 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff f83b 	bl	8001760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026ea:	2002      	movs	r0, #2
 80026ec:	f7fe fff0 	bl	80016d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026f0:	bf00      	nop
 80026f2:	f7ff f801 	bl	80016f8 <LL_RCC_GetSysClkSource>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d1fa      	bne.n	80026f2 <SystemClock_Config+0x6e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80026fc:	4806      	ldr	r0, [pc, #24]	@ (8002718 <SystemClock_Config+0x94>)
 80026fe:	f002 fce3 	bl	80050c8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002702:	200f      	movs	r0, #15
 8002704:	f000 ff6e 	bl	80035e4 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800270e:	f000 f881 	bl	8002814 <Error_Handler>
  }
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	044aa200 	.word	0x044aa200

0800271c <rst_callback>:

/* USER CODE BEGIN 4 */

//обработка прерывания по нажатию кнопки "сброс"
void rst_callback(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(RST_GPIO_Port, RST_Pin))	//если состояние входа - 0, кнопка нажата
 8002720:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002724:	4805      	ldr	r0, [pc, #20]	@ (800273c <rst_callback+0x20>)
 8002726:	f7ff f8e6 	bl	80018f6 <LL_GPIO_IsInputPinSet>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <rst_callback+0x1a>
	{
		flags.rst_push = 1;	//поднимаем флаг нажатия 
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <rst_callback+0x24>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
	}
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40010c00 	.word	0x40010c00
 8002740:	200001e8 	.word	0x200001e8

08002744 <nxt_callback>:

//обработка прерывания по нажатию кнопки "далее"
void nxt_callback(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(NEXT_GPIO_Port, NEXT_Pin))	//если состояние входа - 0, кнопка нажата
 8002748:	f640 0108 	movw	r1, #2056	@ 0x808
 800274c:	4805      	ldr	r0, [pc, #20]	@ (8002764 <nxt_callback+0x20>)
 800274e:	f7ff f8d2 	bl	80018f6 <LL_GPIO_IsInputPinSet>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <nxt_callback+0x1a>
	{
		flags.nxt_push = 1;	//поднимаем флаг нажатия 
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <nxt_callback+0x24>)
 800275a:	2201      	movs	r2, #1
 800275c:	705a      	strb	r2, [r3, #1]
	}
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40010c00 	.word	0x40010c00
 8002768:	200001e8 	.word	0x200001e8

0800276c <set_callback>:

//обработка прерывания по нажатию кнопки "установка"
void set_callback(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(SET_GPIO_Port, SET_Pin))	//если состояние входа - 0, кнопка нажата
 8002770:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002774:	4805      	ldr	r0, [pc, #20]	@ (800278c <set_callback+0x20>)
 8002776:	f7ff f8be 	bl	80018f6 <LL_GPIO_IsInputPinSet>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <set_callback+0x1a>
	{
		flags.set_push = 1;	//поднимаем флаг нажатия 
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <set_callback+0x24>)
 8002782:	2201      	movs	r2, #1
 8002784:	709a      	strb	r2, [r3, #2]
	}
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40010c00 	.word	0x40010c00
 8002790:	200001e8 	.word	0x200001e8

08002794 <time_callback>:

//обработка прерывания по нажатию кнопки "время"
void time_callback(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(TIME_GPIO_Port, TIME_Pin))	//если состояние входа - 0, кнопка нажата
 8002798:	4905      	ldr	r1, [pc, #20]	@ (80027b0 <time_callback+0x1c>)
 800279a:	4806      	ldr	r0, [pc, #24]	@ (80027b4 <time_callback+0x20>)
 800279c:	f7ff f8ab 	bl	80018f6 <LL_GPIO_IsInputPinSet>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <time_callback+0x18>
	{
		flags.time_push = 1;	//поднимаем флаг нажатия 
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <time_callback+0x24>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	70da      	strb	r2, [r3, #3]
	}
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	04800080 	.word	0x04800080
 80027b4:	40010800 	.word	0x40010800
 80027b8:	200001e8 	.word	0x200001e8

080027bc <tim1_callback>:

//обработка прерывания таймера 1
void tim1_callback(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1))			//если флаг прерывания т/с
 80027c0:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <tim1_callback+0x24>)
 80027c2:	f7ff f855 	bl	8001870 <LL_TIM_IsActiveFlag_UPDATE>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <tim1_callback+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM1);					//опускаем флаг прерывания
 80027cc:	4804      	ldr	r0, [pc, #16]	@ (80027e0 <tim1_callback+0x24>)
 80027ce:	f7ff f842 	bl	8001856 <LL_TIM_ClearFlag_UPDATE>
		vars.seconds++;													//считаем секунду
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <tim1_callback+0x28>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a02      	ldr	r2, [pc, #8]	@ (80027e4 <tim1_callback+0x28>)
 80027da:	6013      	str	r3, [r2, #0]
	}
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	200001f0 	.word	0x200001f0

080027e8 <tim2_callback>:

//обработка прерывания таймера 2
void tim2_callback(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))			//если флаг прерывания таймера поднят
 80027ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80027f0:	f7ff f83e 	bl	8001870 <LL_TIM_IsActiveFlag_UPDATE>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <tim2_callback+0x24>
	{
		LL_TIM_ClearFlag_UPDATE(TIM2);					//опускаем флаг прерывания
 80027fa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80027fe:	f7ff f82a 	bl	8001856 <LL_TIM_ClearFlag_UPDATE>
		vars.millis++;													//считаем милисекунду
 8002802:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <tim2_callback+0x28>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	3301      	adds	r3, #1
 8002808:	4a01      	ldr	r2, [pc, #4]	@ (8002810 <tim2_callback+0x28>)
 800280a:	6093      	str	r3, [r2, #8]
	}
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200001f0 	.word	0x200001f0

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <LL_APB2_GRP1_EnableClock>:
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <LL_APB2_GRP1_EnableClock+0x2c>)
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	4907      	ldr	r1, [pc, #28]	@ (800284c <LL_APB2_GRP1_EnableClock+0x2c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4313      	orrs	r3, r2
 8002832:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b090      	sub	sp, #64	@ 0x40
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	2228      	movs	r2, #40	@ 0x28
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f002 fe59 	bl	8005516 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002872:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002876:	f7ff ffd3 	bl	8002820 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800287a:	2004      	movs	r0, #4
 800287c:	f7ff ffd0 	bl	8002820 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8002880:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 8002884:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002886:	2309      	movs	r3, #9
 8002888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4816      	ldr	r0, [pc, #88]	@ (80028f0 <MX_SPI1_Init+0xa0>)
 8002898:	f002 f881 	bl	800499e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800289c:	f244 0340 	movw	r3, #16448	@ 0x4040
 80028a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80028a2:	2304      	movs	r3, #4
 80028a4:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4811      	ldr	r0, [pc, #68]	@ (80028f0 <MX_SPI1_Init+0xa0>)
 80028ac:	f002 f877 	bl	800499e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028b4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80028b8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80028cc:	2320      	movs	r3, #32
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80028d8:	230a      	movs	r3, #10
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80028dc:	f107 0318 	add.w	r3, r7, #24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <MX_SPI1_Init+0xa4>)
 80028e4:	f002 f9f5 	bl	8004cd2 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3740      	adds	r7, #64	@ 0x40
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40010800 	.word	0x40010800
 80028f4:	40013000 	.word	0x40013000

080028f8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <MX_SPI2_Init+0x68>)
 80028fe:	4a19      	ldr	r2, [pc, #100]	@ (8002964 <MX_SPI2_Init+0x6c>)
 8002900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002902:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002904:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002908:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <MX_SPI2_Init+0x68>)
 800290c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002910:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <MX_SPI2_Init+0x68>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002924:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <MX_SPI2_Init+0x68>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <MX_SPI2_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <MX_SPI2_Init+0x68>)
 8002946:	220a      	movs	r2, #10
 8002948:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	@ (8002960 <MX_SPI2_Init+0x68>)
 800294c:	f001 fddc 	bl	8004508 <HAL_SPI_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002956:	f7ff ff5d 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000348 	.word	0x20000348
 8002964:	40003800 	.word	0x40003800

08002968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a16      	ldr	r2, [pc, #88]	@ (80029dc <HAL_SPI_MspInit+0x74>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d124      	bne.n	80029d2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 800298e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <HAL_SPI_MspInit+0x78>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029b8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80029bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <HAL_SPI_MspInit+0x7c>)
 80029ce:	f000 ff5d 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40003800 	.word	0x40003800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010c00 	.word	0x40010c00

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <HAL_MspInit+0x5c>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <HAL_MspInit+0x5c>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6193      	str	r3, [r2, #24]
 80029fa:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_MspInit+0x5c>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <HAL_MspInit+0x5c>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <HAL_MspInit+0x5c>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <HAL_MspInit+0x5c>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_MspInit+0x60>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <HAL_MspInit+0x60>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010000 	.word	0x40010000

08002a4c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010400 	.word	0x40010400

08002a78 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002a80:	4a03      	ldr	r2, [pc, #12]	@ (8002a90 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6153      	str	r3, [r2, #20]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40010400 	.word	0x40010400

08002a94 <LL_USART_IsActiveFlag_FE>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <LL_USART_IsActiveFlag_NE>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <LL_USART_IsActiveFlag_ORE>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_USART_IsActiveFlag_RXNE>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_USART_ClearFlag_FE>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b32:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_USART_ClearFlag_NE>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b54:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_USART_ClearFlag_ORE>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b76:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <LL_USART_IsEnabledIT_RXNE>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_USART_ReceiveData8>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b2db      	uxtb	r3, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bca:	bf00      	nop
 8002bcc:	e7fd      	b.n	8002bca <NMI_Handler+0x4>

08002bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd2:	bf00      	nop
 8002bd4:	e7fd      	b.n	8002bd2 <HardFault_Handler+0x4>

08002bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	bf00      	nop
 8002be4:	e7fd      	b.n	8002be2 <BusFault_Handler+0x4>

08002be6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <UsageFault_Handler+0x4>

08002bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c16:	f000 fd15 	bl	8003644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002c22:	2004      	movs	r0, #4
 8002c24:	f7ff ff12 	bl	8002a4c <LL_EXTI_IsActiveFlag_0_31>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f7ff ff22 	bl	8002a78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
		irq_callback();
 8002c34:	f7fe fa1a 	bl	800106c <irq_callback>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8002c40:	2008      	movs	r0, #8
 8002c42:	f7ff ff03 	bl	8002a4c <LL_EXTI_IsActiveFlag_0_31>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <EXTI3_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002c4c:	2008      	movs	r0, #8
 8002c4e:	f7ff ff13 	bl	8002a78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
		nxt_callback();
 8002c52:	f7ff fd77 	bl	8002744 <nxt_callback>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8002c5e:	2010      	movs	r0, #16
 8002c60:	f7ff fef4 	bl	8002a4c <LL_EXTI_IsActiveFlag_0_31>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8002c6a:	2010      	movs	r0, #16
 8002c6c:	f7ff ff04 	bl	8002a78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
		rst_callback();
 8002c70:	f7ff fd54 	bl	800271c <rst_callback>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8002c7c:	2020      	movs	r0, #32
 8002c7e:	f7ff fee5 	bl	8002a4c <LL_EXTI_IsActiveFlag_0_31>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8002c88:	2020      	movs	r0, #32
 8002c8a:	f7ff fef5 	bl	8002a78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
		set_callback();
 8002c8e:	f7ff fd6d 	bl	800276c <set_callback>
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	tim1_callback();
 8002c9a:	f7ff fd8f 	bl	80027bc <tim1_callback>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	tim2_callback();
 8002ca6:	f7ff fd9f 	bl	80027e8 <tim2_callback>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	//Если поднят флаг приема и разрешены прерывания по приему 
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8002cb6:	4829      	ldr	r0, [pc, #164]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002cb8:	f7ff ff22 	bl	8002b00 <LL_USART_IsActiveFlag_RXNE>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02a      	beq.n	8002d18 <USART1_IRQHandler+0x68>
 8002cc2:	4826      	ldr	r0, [pc, #152]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002cc4:	f7ff ff61 	bl	8002b8a <LL_USART_IsEnabledIT_RXNE>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <USART1_IRQHandler+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cce:	b672      	cpsid	i
}
 8002cd0:	bf00      	nop
	{
		__disable_irq();	//отключаем все прерывания
		//Читаем байт из регистра
		uint8_t rbyte =  LL_USART_ReceiveData8(USART1);	
 8002cd2:	4822      	ldr	r0, [pc, #136]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002cd4:	f7ff ff6b 	bl	8002bae <LL_USART_ReceiveData8>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
		
		if(f_usart_command)	//если поднят флаг приема команды
 8002cdc:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <USART1_IRQHandler+0xb0>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d010      	beq.n	8002d06 <USART1_IRQHandler+0x56>
		{
			if (rbyte == USART_RESET)	//если новый байт - команда сброса
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b31      	cmp	r3, #49	@ 0x31
 8002ce8:	d103      	bne.n	8002cf2 <USART1_IRQHandler+0x42>
			{
				flags.rst_push = 1;			//поднимаем флаг сброса
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <USART1_IRQHandler+0xb4>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e005      	b.n	8002cfe <USART1_IRQHandler+0x4e>
			}
			else if (rbyte == USART_NEXT)//если новый байт - команда "далее"
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b32      	cmp	r3, #50	@ 0x32
 8002cf6:	d102      	bne.n	8002cfe <USART1_IRQHandler+0x4e>
			{
				flags.nxt_push = 1;			//поднимаем флаг
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <USART1_IRQHandler+0xb4>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	705a      	strb	r2, [r3, #1]
			}
			f_usart_command = 0;			//опускаем флаг приема команды
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <USART1_IRQHandler+0xb0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e005      	b.n	8002d12 <USART1_IRQHandler+0x62>
		}
		else
		{
			if (rbyte == USART_COMMAND)	//если пришел байт команды из порта
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b31      	cmp	r3, #49	@ 0x31
 8002d0a:	d102      	bne.n	8002d12 <USART1_IRQHandler+0x62>
			{
				f_usart_command = 1;			//поднимаем флаг команды из порта
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <USART1_IRQHandler+0xb0>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d12:	b662      	cpsie	i
}
 8002d14:	bf00      	nop
	{
 8002d16:	e01c      	b.n	8002d52 <USART1_IRQHandler+0xa2>
		}
		__enable_irq();							//включаем все прерывания
	}
	else //сбрасываем посторонние флаги
	{
		if(LL_USART_IsActiveFlag_ORE(USART1))
 8002d18:	4810      	ldr	r0, [pc, #64]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d1a:	f7ff fedf 	bl	8002adc <LL_USART_IsActiveFlag_ORE>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <USART1_IRQHandler+0x7c>
		{
			LL_USART_ClearFlag_ORE(USART1);
 8002d24:	480d      	ldr	r0, [pc, #52]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d26:	f7ff ff1f 	bl	8002b68 <LL_USART_ClearFlag_ORE>
		{
			LL_USART_ClearFlag_NE(USART1);
		}
	}
	
	return;
 8002d2a:	e013      	b.n	8002d54 <USART1_IRQHandler+0xa4>
		else if(LL_USART_IsActiveFlag_FE(USART1))
 8002d2c:	480b      	ldr	r0, [pc, #44]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d2e:	f7ff feb1 	bl	8002a94 <LL_USART_IsActiveFlag_FE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <USART1_IRQHandler+0x90>
			LL_USART_ClearFlag_FE(USART1);
 8002d38:	4808      	ldr	r0, [pc, #32]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d3a:	f7ff fef3 	bl	8002b24 <LL_USART_ClearFlag_FE>
	return;
 8002d3e:	e009      	b.n	8002d54 <USART1_IRQHandler+0xa4>
		else if(LL_USART_IsActiveFlag_NE(USART1))
 8002d40:	4806      	ldr	r0, [pc, #24]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d42:	f7ff feb9 	bl	8002ab8 <LL_USART_IsActiveFlag_NE>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <USART1_IRQHandler+0xa4>
			LL_USART_ClearFlag_NE(USART1);
 8002d4c:	4803      	ldr	r0, [pc, #12]	@ (8002d5c <USART1_IRQHandler+0xac>)
 8002d4e:	f7ff fefa 	bl	8002b46 <LL_USART_ClearFlag_NE>
	return;
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
	
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	200003a0 	.word	0x200003a0
 8002d64:	200001e8 	.word	0x200001e8

08002d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002d6c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002d70:	f7ff fe6c 	bl	8002a4c <LL_EXTI_IsActiveFlag_0_31>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002d7a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002d7e:	f7ff fe7b 	bl	8002a78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
		time_callback();
 8002d82:	f7ff fd07 	bl	8002794 <time_callback>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return 1;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <_kill>:

int _kill(int pid, int sig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002da2:	f002 fc17 	bl	80055d4 <__errno>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2216      	movs	r2, #22
 8002daa:	601a      	str	r2, [r3, #0]
  return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_exit>:

void _exit (int status)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe7 	bl	8002d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <_exit+0x12>

08002dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e00a      	b.n	8002df6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de0:	f3af 8000 	nop.w
 8002de4:	4601      	mov	r1, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	60ba      	str	r2, [r7, #8]
 8002dec:	b2ca      	uxtb	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3301      	adds	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dbf0      	blt.n	8002de0 <_read+0x12>
  }

  return len;
 8002dfe:	687b      	ldr	r3, [r7, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e009      	b.n	8002e2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	60ba      	str	r2, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbf1      	blt.n	8002e1a <_write+0x12>
  }
  return len;
 8002e36:	687b      	ldr	r3, [r7, #4]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_close>:

int _close(int file)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e66:	605a      	str	r2, [r3, #4]
  return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <_isatty>:

int _isatty(int file)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <_sbrk+0x5c>)
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <_sbrk+0x60>)
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <_sbrk+0x64>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	@ (8002f08 <_sbrk+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed0:	f002 fb80 	bl	80055d4 <__errno>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	e009      	b.n	8002ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <_sbrk+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <_sbrk+0x64>)
 8002ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20005000 	.word	0x20005000
 8002f00:	00000400 	.word	0x00000400
 8002f04:	200003a4 	.word	0x200003a4
 8002f08:	200004f8 	.word	0x200004f8

08002f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <__NVIC_GetPriorityGrouping>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4906      	ldr	r1, [pc, #24]	@ (8002f68 <__NVIC_EnableIRQ+0x34>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_SetPriority>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db0a      	blt.n	8002f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	490c      	ldr	r1, [pc, #48]	@ (8002fb8 <__NVIC_SetPriority+0x4c>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f94:	e00a      	b.n	8002fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4908      	ldr	r1, [pc, #32]	@ (8002fbc <__NVIC_SetPriority+0x50>)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	3b04      	subs	r3, #4
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	440b      	add	r3, r1
 8002faa:	761a      	strb	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <NVIC_EncodePriority>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	@ 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f1c3 0307 	rsb	r3, r3, #7
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf28      	it	cs
 8002fde:	2304      	movcs	r3, #4
 8002fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d902      	bls.n	8002ff0 <NVIC_EncodePriority+0x30>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3b03      	subs	r3, #3
 8002fee:	e000      	b.n	8002ff2 <NVIC_EncodePriority+0x32>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	401a      	ands	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43d9      	mvns	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	4313      	orrs	r3, r2
}
 800301a:	4618      	mov	r0, r3
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <LL_APB1_GRP1_EnableClock>:
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	4907      	ldr	r1, [pc, #28]	@ (8003050 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <LL_APB2_GRP1_EnableClock>:
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <LL_APB2_GRP1_EnableClock+0x2c>)
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <LL_APB2_GRP1_EnableClock+0x2c>)
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000

08003084 <LL_TIM_EnableARRPreload>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_TIM_DisableARRPreload>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <LL_TIM_SetClockSource>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030d2:	f023 0307 	bic.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <LL_TIM_SetTriggerOutput>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <LL_TIM_DisableMasterSlaveMode>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003140:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003144:	f7ff ff86 	bl	8003054 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003148:	f7ff fee6 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800314c:	4603      	mov	r3, r0
 800314e:	2200      	movs	r2, #0
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff34 	bl	8002fc0 <NVIC_EncodePriority>
 8003158:	4603      	mov	r3, r0
 800315a:	4619      	mov	r1, r3
 800315c:	2019      	movs	r0, #25
 800315e:	f7ff ff05 	bl	8002f6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003162:	2019      	movs	r0, #25
 8003164:	f7ff fee6 	bl	8002f34 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 10000;
 8003168:	f242 7310 	movw	r3, #10000	@ 0x2710
 800316c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7199;
 8003172:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 8003176:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	4619      	mov	r1, r3
 8003184:	480a      	ldr	r0, [pc, #40]	@ (80031b0 <MX_TIM1_Init+0x84>)
 8003186:	f001 fe27 	bl	8004dd8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800318a:	4809      	ldr	r0, [pc, #36]	@ (80031b0 <MX_TIM1_Init+0x84>)
 800318c:	f7ff ff7a 	bl	8003084 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003190:	2100      	movs	r1, #0
 8003192:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <MX_TIM1_Init+0x84>)
 8003194:	f7ff ff94 	bl	80030c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003198:	2100      	movs	r1, #0
 800319a:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <MX_TIM1_Init+0x84>)
 800319c:	f7ff ffa4 	bl	80030e8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80031a0:	4803      	ldr	r0, [pc, #12]	@ (80031b0 <MX_TIM1_Init+0x84>)
 80031a2:	f7ff ffb3 	bl	800310c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00

080031b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff ff2b 	bl	8003024 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80031ce:	f7ff fea3 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2200      	movs	r2, #0
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fef1 	bl	8002fc0 <NVIC_EncodePriority>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	201c      	movs	r0, #28
 80031e4:	f7ff fec2 	bl	8002f6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80031e8:	201c      	movs	r0, #28
 80031ea:	f7ff fea3 	bl	8002f34 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 10;
 80031ee:	230a      	movs	r3, #10
 80031f0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 6539;
 80031f6:	f641 138b 	movw	r3, #6539	@ 0x198b
 80031fa:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003208:	f001 fde6 	bl	8004dd8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800320c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003210:	f7ff ff47 	bl	80030a2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003214:	2100      	movs	r1, #0
 8003216:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800321a:	f7ff ff51 	bl	80030c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800321e:	2100      	movs	r1, #0
 8003220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003224:	f7ff ff60 	bl	80030e8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003228:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800322c:	f7ff ff6e 	bl	800310c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <__NVIC_GetPriorityGrouping>:
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4906      	ldr	r1, [pc, #24]	@ (8003288 <__NVIC_EnableIRQ+0x34>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	@ (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	@ (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <LL_APB1_GRP1_EnableClock>:
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800334c:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <LL_APB1_GRP1_EnableClock+0x2c>)
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	4907      	ldr	r1, [pc, #28]	@ (8003370 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <LL_APB1_GRP1_EnableClock+0x2c>)
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <LL_APB2_GRP1_EnableClock>:
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	4907      	ldr	r1, [pc, #28]	@ (80033a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4313      	orrs	r3, r2
 8003386:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <LL_USART_Enable>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <LL_USART_ConfigAsyncMode>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	615a      	str	r2, [r3, #20]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	@ 0x30
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	611a      	str	r2, [r3, #16]
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	463b      	mov	r3, r7
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003414:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003418:	f7ff ffac 	bl	8003374 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800341c:	2004      	movs	r0, #4
 800341e:	f7ff ffa9 	bl	8003374 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003422:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <MX_USART1_UART_Init+0xc0>)
 8003424:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003426:	2309      	movs	r3, #9
 8003428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	463b      	mov	r3, r7
 8003434:	4619      	mov	r1, r3
 8003436:	481e      	ldr	r0, [pc, #120]	@ (80034b0 <MX_USART1_UART_Init+0xc4>)
 8003438:	f001 fab1 	bl	800499e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800343c:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <MX_USART1_UART_Init+0xc8>)
 800343e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003440:	2304      	movs	r3, #4
 8003442:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	463b      	mov	r3, r7
 8003446:	4619      	mov	r1, r3
 8003448:	4819      	ldr	r0, [pc, #100]	@ (80034b0 <MX_USART1_UART_Init+0xc4>)
 800344a:	f001 faa8 	bl	800499e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800344e:	f7ff fef3 	bl	8003238 <__NVIC_GetPriorityGrouping>
 8003452:	4603      	mov	r3, r0
 8003454:	2200      	movs	r2, #0
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff41 	bl	80032e0 <NVIC_EncodePriority>
 800345e:	4603      	mov	r3, r0
 8003460:	4619      	mov	r1, r3
 8003462:	2025      	movs	r0, #37	@ 0x25
 8003464:	f7ff ff12 	bl	800328c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003468:	2025      	movs	r0, #37	@ 0x25
 800346a:	f7ff fef3 	bl	8003254 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800346e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8003472:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003480:	230c      	movs	r3, #12
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4619      	mov	r1, r3
 8003492:	4809      	ldr	r0, [pc, #36]	@ (80034b8 <MX_USART1_UART_Init+0xcc>)
 8003494:	f001 fd94 	bl	8004fc0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003498:	4807      	ldr	r0, [pc, #28]	@ (80034b8 <MX_USART1_UART_Init+0xcc>)
 800349a:	f7ff ff92 	bl	80033c2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800349e:	4806      	ldr	r0, [pc, #24]	@ (80034b8 <MX_USART1_UART_Init+0xcc>)
 80034a0:	f7ff ff80 	bl	80033a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034a4:	bf00      	nop
 80034a6:	3730      	adds	r7, #48	@ 0x30
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	04020002 	.word	0x04020002
 80034b0:	40010800 	.word	0x40010800
 80034b4:	04040004 	.word	0x04040004
 80034b8:	40013800 	.word	0x40013800

080034bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	@ 0x30
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	615a      	str	r2, [r3, #20]
 80034d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d6:	463b      	mov	r3, r7
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80034e4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80034e8:	f7ff ff2c 	bl	8003344 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80034ec:	2008      	movs	r0, #8
 80034ee:	f7ff ff41 	bl	8003374 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <MX_USART3_UART_Init+0xa0>)
 80034f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034f6:	2309      	movs	r3, #9
 80034f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80034fa:	2303      	movs	r3, #3
 80034fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003502:	463b      	mov	r3, r7
 8003504:	4619      	mov	r1, r3
 8003506:	4816      	ldr	r0, [pc, #88]	@ (8003560 <MX_USART3_UART_Init+0xa4>)
 8003508:	f001 fa49 	bl	800499e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <MX_USART3_UART_Init+0xa8>)
 800350e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003510:	2304      	movs	r3, #4
 8003512:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003514:	463b      	mov	r3, r7
 8003516:	4619      	mov	r1, r3
 8003518:	4811      	ldr	r0, [pc, #68]	@ (8003560 <MX_USART3_UART_Init+0xa4>)
 800351a:	f001 fa40 	bl	800499e <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800351e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8003522:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800352c:	2300      	movs	r3, #0
 800352e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003530:	230c      	movs	r3, #12
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003534:	2300      	movs	r3, #0
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	4809      	ldr	r0, [pc, #36]	@ (8003568 <MX_USART3_UART_Init+0xac>)
 8003544:	f001 fd3c 	bl	8004fc0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003548:	4807      	ldr	r0, [pc, #28]	@ (8003568 <MX_USART3_UART_Init+0xac>)
 800354a:	f7ff ff3a 	bl	80033c2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800354e:	4806      	ldr	r0, [pc, #24]	@ (8003568 <MX_USART3_UART_Init+0xac>)
 8003550:	f7ff ff28 	bl	80033a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003554:	bf00      	nop
 8003556:	3730      	adds	r7, #48	@ 0x30
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	04040004 	.word	0x04040004
 8003560:	40010c00 	.word	0x40010c00
 8003564:	04080008 	.word	0x04080008
 8003568:	40004800 	.word	0x40004800

0800356c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800356c:	f7ff fcce 	bl	8002f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003570:	480b      	ldr	r0, [pc, #44]	@ (80035a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003572:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003574:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a09      	ldr	r2, [pc, #36]	@ (80035ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003588:	4c09      	ldr	r4, [pc, #36]	@ (80035b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003596:	f002 f823 	bl	80055e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800359a:	f7fe ff69 	bl	8002470 <main>
  bx lr
 800359e:	4770      	bx	lr
  ldr r0, =_sdata
 80035a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80035a8:	0800665c 	.word	0x0800665c
  ldr r2, =_sbss
 80035ac:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80035b0:	200004f8 	.word	0x200004f8

080035b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035b4:	e7fe      	b.n	80035b4 <ADC1_2_IRQHandler>
	...

080035b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <HAL_Init+0x28>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a07      	ldr	r2, [pc, #28]	@ (80035e0 <HAL_Init+0x28>)
 80035c2:	f043 0310 	orr.w	r3, r3, #16
 80035c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c8:	2003      	movs	r0, #3
 80035ca:	f000 f92b 	bl	8003824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ce:	200f      	movs	r0, #15
 80035d0:	f000 f808 	bl	80035e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d4:	f7ff fa08 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40022000 	.word	0x40022000

080035e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_InitTick+0x54>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b12      	ldr	r3, [pc, #72]	@ (800363c <HAL_InitTick+0x58>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f935 	bl	8003872 <HAL_SYSTICK_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e00e      	b.n	8003630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d80a      	bhi.n	800362e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003618:	2200      	movs	r2, #0
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	f000 f90b 	bl	800383a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003624:	4a06      	ldr	r2, [pc, #24]	@ (8003640 <HAL_InitTick+0x5c>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200000a4 	.word	0x200000a4
 800363c:	200000ac 	.word	0x200000ac
 8003640:	200000a8 	.word	0x200000a8

08003644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_IncTick+0x1c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_IncTick+0x20>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4413      	add	r3, r2
 8003654:	4a03      	ldr	r2, [pc, #12]	@ (8003664 <HAL_IncTick+0x20>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	200000ac 	.word	0x200000ac
 8003664:	200003a8 	.word	0x200003a8

08003668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return uwTick;
 800366c:	4b02      	ldr	r3, [pc, #8]	@ (8003678 <HAL_GetTick+0x10>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	200003a8 	.word	0x200003a8

0800367c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff fff0 	bl	8003668 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d005      	beq.n	80036a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_Delay+0x44>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036a2:	bf00      	nop
 80036a4:	f7ff ffe0 	bl	8003668 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d8f7      	bhi.n	80036a4 <HAL_Delay+0x28>
  {
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200000ac 	.word	0x200000ac

080036c4 <__NVIC_SetPriorityGrouping>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f6:	4a04      	ldr	r2, [pc, #16]	@ (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	60d3      	str	r3, [r2, #12]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_GetPriorityGrouping>:
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <__NVIC_GetPriorityGrouping+0x18>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 0307 	and.w	r3, r3, #7
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_SetPriority>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	@ (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	@ (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	@ 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	@ 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f0:	d301      	bcc.n	80037f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00f      	b.n	8003816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <SysTick_Config+0x40>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fe:	210f      	movs	r1, #15
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f7ff ff90 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <SysTick_Config+0x40>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380e:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <SysTick_Config+0x40>)
 8003810:	2207      	movs	r2, #7
 8003812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000e010 	.word	0xe000e010

08003824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff49 	bl	80036c4 <__NVIC_SetPriorityGrouping>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800384c:	f7ff ff5e 	bl	800370c <__NVIC_GetPriorityGrouping>
 8003850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff ff90 	bl	800377c <NVIC_EncodePriority>
 800385c:	4602      	mov	r2, r0
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff5f 	bl	8003728 <__NVIC_SetPriority>
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffb0 	bl	80037e0 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b08b      	sub	sp, #44	@ 0x2c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389e:	e169      	b.n	8003b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038a0:	2201      	movs	r2, #1
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 8158 	bne.w	8003b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a9a      	ldr	r2, [pc, #616]	@ (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d05e      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038c8:	4a98      	ldr	r2, [pc, #608]	@ (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d875      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038ce:	4a98      	ldr	r2, [pc, #608]	@ (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d058      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038d4:	4a96      	ldr	r2, [pc, #600]	@ (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d86f      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038da:	4a96      	ldr	r2, [pc, #600]	@ (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d052      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038e0:	4a94      	ldr	r2, [pc, #592]	@ (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d869      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038e6:	4a94      	ldr	r2, [pc, #592]	@ (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04c      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038ec:	4a92      	ldr	r2, [pc, #584]	@ (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d863      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038f2:	4a92      	ldr	r2, [pc, #584]	@ (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d046      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038f8:	4a90      	ldr	r2, [pc, #576]	@ (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d85d      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038fe:	2b12      	cmp	r3, #18
 8003900:	d82a      	bhi.n	8003958 <HAL_GPIO_Init+0xcc>
 8003902:	2b12      	cmp	r3, #18
 8003904:	d859      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 8003906:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HAL_GPIO_Init+0x80>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003987 	.word	0x08003987
 8003910:	08003961 	.word	0x08003961
 8003914:	08003973 	.word	0x08003973
 8003918:	080039b5 	.word	0x080039b5
 800391c:	080039bb 	.word	0x080039bb
 8003920:	080039bb 	.word	0x080039bb
 8003924:	080039bb 	.word	0x080039bb
 8003928:	080039bb 	.word	0x080039bb
 800392c:	080039bb 	.word	0x080039bb
 8003930:	080039bb 	.word	0x080039bb
 8003934:	080039bb 	.word	0x080039bb
 8003938:	080039bb 	.word	0x080039bb
 800393c:	080039bb 	.word	0x080039bb
 8003940:	080039bb 	.word	0x080039bb
 8003944:	080039bb 	.word	0x080039bb
 8003948:	080039bb 	.word	0x080039bb
 800394c:	080039bb 	.word	0x080039bb
 8003950:	08003969 	.word	0x08003969
 8003954:	0800397d 	.word	0x0800397d
 8003958:	4a79      	ldr	r2, [pc, #484]	@ (8003b40 <HAL_GPIO_Init+0x2b4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800395e:	e02c      	b.n	80039ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	623b      	str	r3, [r7, #32]
          break;
 8003966:	e029      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	623b      	str	r3, [r7, #32]
          break;
 8003970:	e024      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	3308      	adds	r3, #8
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e01f      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	330c      	adds	r3, #12
 8003982:	623b      	str	r3, [r7, #32]
          break;
 8003984:	e01a      	b.n	80039bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800398e:	2304      	movs	r3, #4
 8003990:	623b      	str	r3, [r7, #32]
          break;
 8003992:	e013      	b.n	80039bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800399c:	2308      	movs	r3, #8
 800399e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	611a      	str	r2, [r3, #16]
          break;
 80039a6:	e009      	b.n	80039bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a8:	2308      	movs	r3, #8
 80039aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	615a      	str	r2, [r3, #20]
          break;
 80039b2:	e003      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
          break;
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x130>
          break;
 80039ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2bff      	cmp	r3, #255	@ 0xff
 80039c0:	d801      	bhi.n	80039c6 <HAL_GPIO_Init+0x13a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_Init+0x13e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2bff      	cmp	r3, #255	@ 0xff
 80039d0:	d802      	bhi.n	80039d8 <HAL_GPIO_Init+0x14c>
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x152>
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	3b08      	subs	r3, #8
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	210f      	movs	r1, #15
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b1 	beq.w	8003b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	@ (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b4a      	ldr	r3, [pc, #296]	@ (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a24:	4a48      	ldr	r2, [pc, #288]	@ (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	@ (8003b4c <HAL_GPIO_Init+0x2c0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_GPIO_Init+0x1ec>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	@ (8003b50 <HAL_GPIO_Init+0x2c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00d      	beq.n	8003a74 <HAL_GPIO_Init+0x1e8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b54 <HAL_GPIO_Init+0x2c8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <HAL_GPIO_Init+0x1e4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3d      	ldr	r2, [pc, #244]	@ (8003b58 <HAL_GPIO_Init+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_Init+0x1e0>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e006      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8a:	492f      	ldr	r1, [pc, #188]	@ (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	492c      	ldr	r1, [pc, #176]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4928      	ldr	r1, [pc, #160]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003acc:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4922      	ldr	r1, [pc, #136]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ada:	4b20      	ldr	r3, [pc, #128]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	491e      	ldr	r1, [pc, #120]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4918      	ldr	r1, [pc, #96]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b02:	4b16      	ldr	r3, [pc, #88]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	4914      	ldr	r1, [pc, #80]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d021      	beq.n	8003b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	490e      	ldr	r1, [pc, #56]	@ (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e021      	b.n	8003b6e <HAL_GPIO_Init+0x2e2>
 8003b2a:	bf00      	nop
 8003b2c:	10320000 	.word	0x10320000
 8003b30:	10310000 	.word	0x10310000
 8003b34:	10220000 	.word	0x10220000
 8003b38:	10210000 	.word	0x10210000
 8003b3c:	10120000 	.word	0x10120000
 8003b40:	10110000 	.word	0x10110000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	4909      	ldr	r1, [pc, #36]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f47f ae8e 	bne.w	80038a0 <HAL_GPIO_Init+0x14>
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	372c      	adds	r7, #44	@ 0x2c
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e12b      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc ff40 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	@ 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f000 fc72 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a81      	ldr	r2, [pc, #516]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d807      	bhi.n	8003c18 <HAL_I2C_Init+0x84>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a80      	ldr	r2, [pc, #512]	@ (8003e0c <HAL_I2C_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e006      	b.n	8003c26 <HAL_I2C_Init+0x92>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e10 <HAL_I2C_Init+0x27c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0e7      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a78      	ldr	r2, [pc, #480]	@ (8003e14 <HAL_I2C_Init+0x280>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d802      	bhi.n	8003c68 <HAL_I2C_Init+0xd4>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	e009      	b.n	8003c7c <HAL_I2C_Init+0xe8>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a69      	ldr	r2, [pc, #420]	@ (8003e18 <HAL_I2C_Init+0x284>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	495c      	ldr	r1, [pc, #368]	@ (8003e08 <HAL_I2C_Init+0x274>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d819      	bhi.n	8003cd0 <HAL_I2C_Init+0x13c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e59      	subs	r1, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_I2C_Init+0x138>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e59      	subs	r1, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	e051      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	e04f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <HAL_I2C_Init+0x168>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e012      	b.n	8003d22 <HAL_I2C_Init+0x18e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Init+0x196>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <HAL_I2C_Init+0x1bc>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e58      	subs	r0, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	e00f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6809      	ldr	r1, [r1, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6911      	ldr	r1, [r2, #16]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	000186a0 	.word	0x000186a0
 8003e0c:	001e847f 	.word	0x001e847f
 8003e10:	003d08ff 	.word	0x003d08ff
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	10624dd3 	.word	0x10624dd3

08003e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7ff fc1a 	bl	8003668 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 80e0 	bne.w	8004004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4970      	ldr	r1, [pc, #448]	@ (8004010 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f964 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0d3      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2C_Master_Transmit+0x50>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0cc      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	@ 0x21
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2210      	movs	r2, #16
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	@ (8004014 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed4:	8979      	ldrh	r1, [r7, #10]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f89c 	bl	8004018 <I2C_MasterRequestWrite>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e08d      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f00:	e066      	b.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa22 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	6a39      	ldr	r1, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fa19 	bl	80043e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e01a      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d194      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000

08004018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d006      	beq.n	8004042 <I2C_MasterRequestWrite+0x2a>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d003      	beq.n	8004042 <I2C_MasterRequestWrite+0x2a>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004040:	d108      	bne.n	8004054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e00b      	b.n	800406c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	2b12      	cmp	r3, #18
 800405a:	d107      	bne.n	800406c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800406a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f84f 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004092:	d103      	bne.n	800409c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e035      	b.n	800410c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a8:	d108      	bne.n	80040bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	e01b      	b.n	80040f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	11db      	asrs	r3, r3, #7
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f003 0306 	and.w	r3, r3, #6
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f063 030f 	orn	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	490e      	ldr	r1, [pc, #56]	@ (8004114 <I2C_MasterRequestWrite+0xfc>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f898 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e010      	b.n	800410c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4907      	ldr	r1, [pc, #28]	@ (8004118 <I2C_MasterRequestWrite+0x100>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f888 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010008 	.word	0x00010008
 8004118:	00010002 	.word	0x00010002

0800411c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412c:	e048      	b.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d044      	beq.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7ff fa97 	bl	8003668 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d139      	bne.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10d      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	e00c      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d116      	bne.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e023      	b.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10d      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	43da      	mvns	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	e00c      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	429a      	cmp	r2, r3
 8004204:	d093      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421e:	e071      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422e:	d123      	bne.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e067      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d041      	beq.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004280:	f7ff f9f2 	bl	8003668 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d136      	bne.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10c      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e00b      	b.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e021      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10c      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e00b      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af6d 	bne.w	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f886 	bl	8004470 <I2C_IsAcknowledgeFailed>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e034      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d028      	beq.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7ff f977 	bl	8003668 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11d      	bne.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b80      	cmp	r3, #128	@ 0x80
 8004398:	d016      	beq.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d1c3      	bne.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ec:	e034      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f83e 	bl	8004470 <I2C_IsAcknowledgeFailed>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e034      	b.n	8004468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d028      	beq.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7ff f92f 	bl	8003668 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11d      	bne.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d016      	beq.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e007      	b.n	8004468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d1c3      	bne.n	80043ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004486:	d11b      	bne.n	80044c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004490:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b02      	ldr	r3, [pc, #8]	@ (80044dc <HAL_RCC_GetHCLKFreq+0x10>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	200000a4 	.word	0x200000a4

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff2 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	@ (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	08006564 	.word	0x08006564

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e076      	b.n	8004608 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fa04 	bl	8002968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1a      	lsrs	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 0204 	and.w	r2, r2, #4
 80045e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <LL_EXTI_EnableIT_0_31>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <LL_EXTI_EnableIT_0_31+0x20>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4904      	ldr	r1, [pc, #16]	@ (8004630 <LL_EXTI_EnableIT_0_31+0x20>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010400 	.word	0x40010400

08004634 <LL_EXTI_DisableIT_0_31>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <LL_EXTI_DisableIT_0_31+0x20>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	43db      	mvns	r3, r3
 8004644:	4903      	ldr	r1, [pc, #12]	@ (8004654 <LL_EXTI_DisableIT_0_31+0x20>)
 8004646:	4013      	ands	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	40010400 	.word	0x40010400

08004658 <LL_EXTI_EnableEvent_0_31>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4904      	ldr	r1, [pc, #16]	@ (8004678 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010400 	.word	0x40010400

0800467c <LL_EXTI_DisableEvent_0_31>:
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <LL_EXTI_DisableEvent_0_31+0x20>)
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	43db      	mvns	r3, r3
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <LL_EXTI_DisableEvent_0_31+0x20>)
 800468e:	4013      	ands	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	40010400 	.word	0x40010400

080046a0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010400 	.word	0x40010400

080046c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	40010400 	.word	0x40010400

080046e8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60cb      	str	r3, [r1, #12]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010400 	.word	0x40010400

0800470c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	43db      	mvns	r3, r3
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr
 800472c:	40010400 	.word	0x40010400

08004730 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d065      	beq.n	8004810 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d06b      	beq.n	8004824 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	795b      	ldrb	r3, [r3, #5]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d01c      	beq.n	800478e <LL_EXTI_Init+0x5e>
 8004754:	2b02      	cmp	r3, #2
 8004756:	dc25      	bgt.n	80047a4 <LL_EXTI_Init+0x74>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <LL_EXTI_Init+0x32>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d00b      	beq.n	8004778 <LL_EXTI_Init+0x48>
 8004760:	e020      	b.n	80047a4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff88 	bl	800467c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff4d 	bl	8004610 <LL_EXTI_EnableIT_0_31>
          break;
 8004776:	e018      	b.n	80047aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff59 	bl	8004634 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff66 	bl	8004658 <LL_EXTI_EnableEvent_0_31>
          break;
 800478c:	e00d      	b.n	80047aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff3c 	bl	8004610 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff5b 	bl	8004658 <LL_EXTI_EnableEvent_0_31>
          break;
 80047a2:	e002      	b.n	80047aa <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
          break;
 80047a8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	799b      	ldrb	r3, [r3, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d038      	beq.n	8004824 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	799b      	ldrb	r3, [r3, #6]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d01c      	beq.n	80047f4 <LL_EXTI_Init+0xc4>
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	dc25      	bgt.n	800480a <LL_EXTI_Init+0xda>
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <LL_EXTI_Init+0x98>
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d00b      	beq.n	80047de <LL_EXTI_Init+0xae>
 80047c6:	e020      	b.n	800480a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff9d 	bl	800470c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ff62 	bl	80046a0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80047dc:	e022      	b.n	8004824 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ff6e 	bl	80046c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff7b 	bl	80046e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80047f2:	e017      	b.n	8004824 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff51 	bl	80046a0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff70 	bl	80046e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004808:	e00c      	b.n	8004824 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
            break;
 800480e:	e009      	b.n	8004824 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff0d 	bl	8004634 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff2c 	bl	800467c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <LL_GPIO_SetPinMode>:
{
 800482e:	b490      	push	{r4, r7}
 8004830:	b088      	sub	sp, #32
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	4413      	add	r3, r2
 8004844:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	613b      	str	r3, [r7, #16]
  return result;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	210f      	movs	r1, #15
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	401a      	ands	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	61bb      	str	r3, [r7, #24]
  return result;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	6023      	str	r3, [r4, #0]
}
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bc90      	pop	{r4, r7}
 8004890:	4770      	bx	lr

08004892 <LL_GPIO_SetPinSpeed>:
{
 8004892:	b490      	push	{r4, r7}
 8004894:	b088      	sub	sp, #32
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	4413      	add	r3, r2
 80048a8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	613b      	str	r3, [r7, #16]
  return result;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	2103      	movs	r1, #3
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	61bb      	str	r3, [r7, #24]
  return result;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	6023      	str	r3, [r4, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc90      	pop	{r4, r7}
 80048f4:	4770      	bx	lr

080048f6 <LL_GPIO_SetPinOutputType>:
{
 80048f6:	b490      	push	{r4, r7}
 80048f8:	b088      	sub	sp, #32
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0e1b      	lsrs	r3, r3, #24
 800490a:	4413      	add	r3, r2
 800490c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	613b      	str	r3, [r7, #16]
  return result;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	fab3 f383 	clz	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	2104      	movs	r1, #4
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	401a      	ands	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	fa93 f3a3 	rbit	r3, r3
 800493a:	61bb      	str	r3, [r7, #24]
  return result;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	4313      	orrs	r3, r2
 800494e:	6023      	str	r3, [r4, #0]
}
 8004950:	bf00      	nop
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bc90      	pop	{r4, r7}
 8004958:	4770      	bx	lr

0800495a <LL_GPIO_SetPinPull>:
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	43db      	mvns	r3, r3
 8004970:	401a      	ands	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	613b      	str	r3, [r7, #16]
  return result;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	4619      	mov	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	408b      	lsls	r3, r1
 800498e:	431a      	orrs	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b088      	sub	sp, #32
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	60fb      	str	r3, [r7, #12]
  return result;
 80049be:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80049c8:	e044      	b.n	8004a54 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80049ca:	2201      	movs	r2, #1
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	409a      	lsls	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03a      	beq.n	8004a4e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	d806      	bhi.n	80049ec <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80049de:	f240 1201 	movw	r2, #257	@ 0x101
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e008      	b.n	80049fe <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3b08      	subs	r3, #8
 80049f0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049fc:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d106      	bne.n	8004a14 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	69b9      	ldr	r1, [r7, #24]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ffa3 	bl	800495a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff06 	bl	800482e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d003      	beq.n	8004a32 <LL_GPIO_Init+0x94>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d10d      	bne.n	8004a4e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	461a      	mov	r2, r3
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff29 	bl	8004892 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	461a      	mov	r2, r3
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff54 	bl	80048f6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1b4      	bne.n	80049ca <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <LL_RCC_GetSysClkSource>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <LL_RCC_GetSysClkSource+0x14>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	40021000 	.word	0x40021000

08004a84 <LL_RCC_GetAHBPrescaler>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a88:	4b03      	ldr	r3, [pc, #12]	@ (8004a98 <LL_RCC_GetAHBPrescaler+0x14>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	40021000 	.word	0x40021000

08004a9c <LL_RCC_GetAPB1Prescaler>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <LL_RCC_GetAPB2Prescaler>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <LL_RCC_GetAPB2Prescaler+0x14>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	40021000 	.word	0x40021000

08004acc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004ad0:	4b03      	ldr	r3, [pc, #12]	@ (8004ae0 <LL_RCC_PLL_GetMainSource+0x14>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40021000 	.word	0x40021000

08004afc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004b00:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <LL_RCC_PLL_GetPrediv+0x18>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	0c5b      	lsrs	r3, r3, #17
 8004b06:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000

08004b18 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b20:	f000 f820 	bl	8004b64 <RCC_GetSystemClockFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f83e 	bl	8004bb0 <RCC_GetHCLKClockFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f84c 	bl	8004bdc <RCC_GetPCLK1ClockFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f858 	bl	8004c04 <RCC_GetPCLK2ClockFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004b6e:	f7ff ff7d 	bl	8004a6c <LL_RCC_GetSysClkSource>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00c      	beq.n	8004b92 <RCC_GetSystemClockFreq+0x2e>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d80e      	bhi.n	8004b9a <RCC_GetSystemClockFreq+0x36>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <RCC_GetSystemClockFreq+0x22>
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d003      	beq.n	8004b8c <RCC_GetSystemClockFreq+0x28>
 8004b84:	e009      	b.n	8004b9a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004b86:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <RCC_GetSystemClockFreq+0x48>)
 8004b88:	607b      	str	r3, [r7, #4]
      break;
 8004b8a:	e009      	b.n	8004ba0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <RCC_GetSystemClockFreq+0x48>)
 8004b8e:	607b      	str	r3, [r7, #4]
      break;
 8004b90:	e006      	b.n	8004ba0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004b92:	f000 f84b 	bl	8004c2c <RCC_PLL_GetFreqDomain_SYS>
 8004b96:	6078      	str	r0, [r7, #4]
      break;
 8004b98:	e002      	b.n	8004ba0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004b9a:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <RCC_GetSystemClockFreq+0x48>)
 8004b9c:	607b      	str	r3, [r7, #4]
      break;
 8004b9e:	bf00      	nop
  }

  return frequency;
 8004ba0:	687b      	ldr	r3, [r7, #4]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	007a1200 	.word	0x007a1200

08004bb0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004bb8:	f7ff ff64 	bl	8004a84 <LL_RCC_GetAHBPrescaler>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <RCC_GetHCLKClockFreq+0x28>)
 8004bc6:	5cd3      	ldrb	r3, [r2, r3]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	40d3      	lsrs	r3, r2
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08006554 	.word	0x08006554

08004bdc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004be4:	f7ff ff5a 	bl	8004a9c <LL_RCC_GetAPB1Prescaler>
 8004be8:	4603      	mov	r3, r0
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	4a04      	ldr	r2, [pc, #16]	@ (8004c00 <RCC_GetPCLK1ClockFreq+0x24>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	40d3      	lsrs	r3, r2
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	08006564 	.word	0x08006564

08004c04 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c0c:	f7ff ff52 	bl	8004ab4 <LL_RCC_GetAPB2Prescaler>
 8004c10:	4603      	mov	r3, r0
 8004c12:	0adb      	lsrs	r3, r3, #11
 8004c14:	4a04      	ldr	r2, [pc, #16]	@ (8004c28 <RCC_GetPCLK2ClockFreq+0x24>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	40d3      	lsrs	r3, r2
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	08006564 	.word	0x08006564

08004c2c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	2300      	movs	r3, #0
 8004c38:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004c3a:	f7ff ff47 	bl	8004acc <LL_RCC_PLL_GetMainSource>
 8004c3e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4c:	d003      	beq.n	8004c56 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004c4e:	e00b      	b.n	8004c68 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004c52:	607b      	str	r3, [r7, #4]
      break;
 8004c54:	e00b      	b.n	8004c6e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004c56:	f7ff ff51 	bl	8004afc <LL_RCC_PLL_GetPrediv>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c8c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	607b      	str	r3, [r7, #4]
      break;
 8004c66:	e002      	b.n	8004c6e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004c6a:	607b      	str	r3, [r7, #4]
      break;
 8004c6c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004c6e:	f7ff ff39 	bl	8004ae4 <LL_RCC_PLL_GetMultiplicator>
 8004c72:	4603      	mov	r3, r0
 8004c74:	0c9b      	lsrs	r3, r3, #18
 8004c76:	3302      	adds	r3, #2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	003d0900 	.word	0x003d0900
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <LL_SPI_IsEnabled>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d101      	bne.n	8004ca8 <LL_SPI_IsEnabled+0x18>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <LL_SPI_IsEnabled+0x1a>
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <LL_SPI_SetCRCPolynomial>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	611a      	str	r2, [r3, #16]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ffd5 	bl	8004c90 <LL_SPI_IsEnabled>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d139      	bne.n	8004d60 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	6811      	ldr	r1, [r2, #0]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	6852      	ldr	r2, [r2, #4]
 8004d00:	4311      	orrs	r1, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	4311      	orrs	r1, r2
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	68d2      	ldr	r2, [r2, #12]
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	6912      	ldr	r2, [r2, #16]
 8004d12:	4311      	orrs	r1, r2
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	6952      	ldr	r2, [r2, #20]
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	6992      	ldr	r2, [r2, #24]
 8004d1e:	4311      	orrs	r1, r2
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	69d2      	ldr	r2, [r2, #28]
 8004d24:	4311      	orrs	r1, r2
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	6a12      	ldr	r2, [r2, #32]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f023 0204 	bic.w	r2, r3, #4
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4e:	d105      	bne.n	8004d5c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ffac 	bl	8004cb4 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <LL_TIM_SetPrescaler>:
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <LL_TIM_SetAutoReload>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <LL_TIM_SetRepetitionCounter>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	615a      	str	r2, [r3, #20]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr
	...

08004dd8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a27      	ldr	r2, [pc, #156]	@ (8004e88 <LL_TIM_Init+0xb0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00b      	beq.n	8004e08 <LL_TIM_Init+0x30>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df6:	d007      	beq.n	8004e08 <LL_TIM_Init+0x30>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a24      	ldr	r2, [pc, #144]	@ (8004e8c <LL_TIM_Init+0xb4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <LL_TIM_Init+0x30>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a23      	ldr	r2, [pc, #140]	@ (8004e90 <LL_TIM_Init+0xb8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d106      	bne.n	8004e16 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <LL_TIM_Init+0xb0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <LL_TIM_Init+0x5e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d007      	beq.n	8004e36 <LL_TIM_Init+0x5e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a18      	ldr	r2, [pc, #96]	@ (8004e8c <LL_TIM_Init+0xb4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <LL_TIM_Init+0x5e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <LL_TIM_Init+0xb8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d106      	bne.n	8004e44 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff97 	bl	8004d84 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff84 	bl	8004d6a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <LL_TIM_Init+0xb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d105      	bne.n	8004e76 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff94 	bl	8004d9e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff9e 	bl	8004db8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800

08004e94 <LL_USART_IsEnabled>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <LL_USART_SetStopBitsLength>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <LL_USART_SetHWFlowCtrl>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	615a      	str	r2, [r3, #20]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
	...

08004f04 <LL_USART_SetBaudRate>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	4a25      	ldr	r2, [pc, #148]	@ (8004fbc <LL_USART_SetBaudRate+0xb8>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	b299      	uxth	r1, r3
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009a      	lsls	r2, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f46:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <LL_USART_SetBaudRate+0xb8>)
 8004f48:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2064      	movs	r0, #100	@ 0x64
 8004f50:	fb00 f303 	mul.w	r3, r0, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	3332      	adds	r3, #50	@ 0x32
 8004f5a:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <LL_USART_SetBaudRate+0xb8>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	440b      	add	r3, r1
 8004f6c:	b299      	uxth	r1, r3
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009a      	lsls	r2, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f82:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <LL_USART_SetBaudRate+0xb8>)
 8004f84:	fba3 0302 	umull	r0, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2064      	movs	r0, #100	@ 0x64
 8004f8c:	fb00 f303 	mul.w	r3, r0, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	3332      	adds	r3, #50	@ 0x32
 8004f96:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <LL_USART_SetBaudRate+0xb8>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff5e 	bl	8004e94 <LL_USART_IsEnabled>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d145      	bne.n	800506a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004fe6:	f023 030c 	bic.w	r3, r3, #12
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	6851      	ldr	r1, [r2, #4]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	6912      	ldr	r2, [r2, #16]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ff57 	bl	8004eba <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff63 	bl	8004ede <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fd7b 	bl	8004b18 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a13      	ldr	r2, [pc, #76]	@ (8005074 <LL_USART_Init+0xb4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d102      	bne.n	8005030 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e00c      	b.n	800504a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <LL_USART_Init+0xb8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d102      	bne.n	800503e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e005      	b.n	800504a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <LL_USART_Init+0xbc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005058:	2300      	movs	r3, #0
 800505a:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005060:	461a      	mov	r2, r3
 8005062:	69b9      	ldr	r1, [r7, #24]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff4d 	bl	8004f04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800506a:	7ffb      	ldrb	r3, [r7, #31]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40013800 	.word	0x40013800
 8005078:	40004400 	.word	0x40004400
 800507c:	40004800 	.word	0x40004800

08005080 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005088:	4b0e      	ldr	r3, [pc, #56]	@ (80050c4 <LL_mDelay+0x44>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800508e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d00c      	beq.n	80050b2 <LL_mDelay+0x32>
  {
    Delay++;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3301      	adds	r3, #1
 800509c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800509e:	e008      	b.n	80050b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80050a0:	4b08      	ldr	r3, [pc, #32]	@ (80050c4 <LL_mDelay+0x44>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <LL_mDelay+0x32>
    {
      Delay--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f3      	bne.n	80050a0 <LL_mDelay+0x20>
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80050d0:	4a03      	ldr	r2, [pc, #12]	@ (80050e0 <LL_SetSystemCoreClock+0x18>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6013      	str	r3, [r2, #0]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	200000a4 	.word	0x200000a4

080050e4 <malloc>:
 80050e4:	4b02      	ldr	r3, [pc, #8]	@ (80050f0 <malloc+0xc>)
 80050e6:	4601      	mov	r1, r0
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f000 b825 	b.w	8005138 <_malloc_r>
 80050ee:	bf00      	nop
 80050f0:	200000bc 	.word	0x200000bc

080050f4 <sbrk_aligned>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005134 <sbrk_aligned+0x40>)
 80050f8:	460c      	mov	r4, r1
 80050fa:	6831      	ldr	r1, [r6, #0]
 80050fc:	4605      	mov	r5, r0
 80050fe:	b911      	cbnz	r1, 8005106 <sbrk_aligned+0x12>
 8005100:	f000 fa46 	bl	8005590 <_sbrk_r>
 8005104:	6030      	str	r0, [r6, #0]
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 fa41 	bl	8005590 <_sbrk_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	d103      	bne.n	800511a <sbrk_aligned+0x26>
 8005112:	f04f 34ff 	mov.w	r4, #4294967295
 8005116:	4620      	mov	r0, r4
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	1cc4      	adds	r4, r0, #3
 800511c:	f024 0403 	bic.w	r4, r4, #3
 8005120:	42a0      	cmp	r0, r4
 8005122:	d0f8      	beq.n	8005116 <sbrk_aligned+0x22>
 8005124:	1a21      	subs	r1, r4, r0
 8005126:	4628      	mov	r0, r5
 8005128:	f000 fa32 	bl	8005590 <_sbrk_r>
 800512c:	3001      	adds	r0, #1
 800512e:	d1f2      	bne.n	8005116 <sbrk_aligned+0x22>
 8005130:	e7ef      	b.n	8005112 <sbrk_aligned+0x1e>
 8005132:	bf00      	nop
 8005134:	200003ac 	.word	0x200003ac

08005138 <_malloc_r>:
 8005138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800513c:	1ccd      	adds	r5, r1, #3
 800513e:	f025 0503 	bic.w	r5, r5, #3
 8005142:	3508      	adds	r5, #8
 8005144:	2d0c      	cmp	r5, #12
 8005146:	bf38      	it	cc
 8005148:	250c      	movcc	r5, #12
 800514a:	2d00      	cmp	r5, #0
 800514c:	4606      	mov	r6, r0
 800514e:	db01      	blt.n	8005154 <_malloc_r+0x1c>
 8005150:	42a9      	cmp	r1, r5
 8005152:	d904      	bls.n	800515e <_malloc_r+0x26>
 8005154:	230c      	movs	r3, #12
 8005156:	6033      	str	r3, [r6, #0]
 8005158:	2000      	movs	r0, #0
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005234 <_malloc_r+0xfc>
 8005162:	f000 f869 	bl	8005238 <__malloc_lock>
 8005166:	f8d8 3000 	ldr.w	r3, [r8]
 800516a:	461c      	mov	r4, r3
 800516c:	bb44      	cbnz	r4, 80051c0 <_malloc_r+0x88>
 800516e:	4629      	mov	r1, r5
 8005170:	4630      	mov	r0, r6
 8005172:	f7ff ffbf 	bl	80050f4 <sbrk_aligned>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	4604      	mov	r4, r0
 800517a:	d158      	bne.n	800522e <_malloc_r+0xf6>
 800517c:	f8d8 4000 	ldr.w	r4, [r8]
 8005180:	4627      	mov	r7, r4
 8005182:	2f00      	cmp	r7, #0
 8005184:	d143      	bne.n	800520e <_malloc_r+0xd6>
 8005186:	2c00      	cmp	r4, #0
 8005188:	d04b      	beq.n	8005222 <_malloc_r+0xea>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	4639      	mov	r1, r7
 800518e:	4630      	mov	r0, r6
 8005190:	eb04 0903 	add.w	r9, r4, r3
 8005194:	f000 f9fc 	bl	8005590 <_sbrk_r>
 8005198:	4581      	cmp	r9, r0
 800519a:	d142      	bne.n	8005222 <_malloc_r+0xea>
 800519c:	6821      	ldr	r1, [r4, #0]
 800519e:	4630      	mov	r0, r6
 80051a0:	1a6d      	subs	r5, r5, r1
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7ff ffa6 	bl	80050f4 <sbrk_aligned>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d03a      	beq.n	8005222 <_malloc_r+0xea>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	442b      	add	r3, r5
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	f8d8 3000 	ldr.w	r3, [r8]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	bb62      	cbnz	r2, 8005214 <_malloc_r+0xdc>
 80051ba:	f8c8 7000 	str.w	r7, [r8]
 80051be:	e00f      	b.n	80051e0 <_malloc_r+0xa8>
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	1b52      	subs	r2, r2, r5
 80051c4:	d420      	bmi.n	8005208 <_malloc_r+0xd0>
 80051c6:	2a0b      	cmp	r2, #11
 80051c8:	d917      	bls.n	80051fa <_malloc_r+0xc2>
 80051ca:	1961      	adds	r1, r4, r5
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	6025      	str	r5, [r4, #0]
 80051d0:	bf18      	it	ne
 80051d2:	6059      	strne	r1, [r3, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	bf08      	it	eq
 80051d8:	f8c8 1000 	streq.w	r1, [r8]
 80051dc:	5162      	str	r2, [r4, r5]
 80051de:	604b      	str	r3, [r1, #4]
 80051e0:	4630      	mov	r0, r6
 80051e2:	f000 f82f 	bl	8005244 <__malloc_unlock>
 80051e6:	f104 000b 	add.w	r0, r4, #11
 80051ea:	1d23      	adds	r3, r4, #4
 80051ec:	f020 0007 	bic.w	r0, r0, #7
 80051f0:	1ac2      	subs	r2, r0, r3
 80051f2:	bf1c      	itt	ne
 80051f4:	1a1b      	subne	r3, r3, r0
 80051f6:	50a3      	strne	r3, [r4, r2]
 80051f8:	e7af      	b.n	800515a <_malloc_r+0x22>
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	bf0c      	ite	eq
 8005200:	f8c8 2000 	streq.w	r2, [r8]
 8005204:	605a      	strne	r2, [r3, #4]
 8005206:	e7eb      	b.n	80051e0 <_malloc_r+0xa8>
 8005208:	4623      	mov	r3, r4
 800520a:	6864      	ldr	r4, [r4, #4]
 800520c:	e7ae      	b.n	800516c <_malloc_r+0x34>
 800520e:	463c      	mov	r4, r7
 8005210:	687f      	ldr	r7, [r7, #4]
 8005212:	e7b6      	b.n	8005182 <_malloc_r+0x4a>
 8005214:	461a      	mov	r2, r3
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	42a3      	cmp	r3, r4
 800521a:	d1fb      	bne.n	8005214 <_malloc_r+0xdc>
 800521c:	2300      	movs	r3, #0
 800521e:	6053      	str	r3, [r2, #4]
 8005220:	e7de      	b.n	80051e0 <_malloc_r+0xa8>
 8005222:	230c      	movs	r3, #12
 8005224:	4630      	mov	r0, r6
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f000 f80c 	bl	8005244 <__malloc_unlock>
 800522c:	e794      	b.n	8005158 <_malloc_r+0x20>
 800522e:	6005      	str	r5, [r0, #0]
 8005230:	e7d6      	b.n	80051e0 <_malloc_r+0xa8>
 8005232:	bf00      	nop
 8005234:	200003b0 	.word	0x200003b0

08005238 <__malloc_lock>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__malloc_lock+0x8>)
 800523a:	f000 b9f6 	b.w	800562a <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	200004f4 	.word	0x200004f4

08005244 <__malloc_unlock>:
 8005244:	4801      	ldr	r0, [pc, #4]	@ (800524c <__malloc_unlock+0x8>)
 8005246:	f000 b9f1 	b.w	800562c <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	200004f4 	.word	0x200004f4

08005250 <rand>:
 8005250:	4b16      	ldr	r3, [pc, #88]	@ (80052ac <rand+0x5c>)
 8005252:	b510      	push	{r4, lr}
 8005254:	681c      	ldr	r4, [r3, #0]
 8005256:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005258:	b9b3      	cbnz	r3, 8005288 <rand+0x38>
 800525a:	2018      	movs	r0, #24
 800525c:	f7ff ff42 	bl	80050e4 <malloc>
 8005260:	4602      	mov	r2, r0
 8005262:	6320      	str	r0, [r4, #48]	@ 0x30
 8005264:	b920      	cbnz	r0, 8005270 <rand+0x20>
 8005266:	2152      	movs	r1, #82	@ 0x52
 8005268:	4b11      	ldr	r3, [pc, #68]	@ (80052b0 <rand+0x60>)
 800526a:	4812      	ldr	r0, [pc, #72]	@ (80052b4 <rand+0x64>)
 800526c:	f000 f9e0 	bl	8005630 <__assert_func>
 8005270:	4911      	ldr	r1, [pc, #68]	@ (80052b8 <rand+0x68>)
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <rand+0x6c>)
 8005274:	e9c0 1300 	strd	r1, r3, [r0]
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <rand+0x70>)
 800527a:	2100      	movs	r1, #0
 800527c:	6083      	str	r3, [r0, #8]
 800527e:	230b      	movs	r3, #11
 8005280:	8183      	strh	r3, [r0, #12]
 8005282:	2001      	movs	r0, #1
 8005284:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800528a:	480e      	ldr	r0, [pc, #56]	@ (80052c4 <rand+0x74>)
 800528c:	690b      	ldr	r3, [r1, #16]
 800528e:	694c      	ldr	r4, [r1, #20]
 8005290:	4358      	muls	r0, r3
 8005292:	4a0d      	ldr	r2, [pc, #52]	@ (80052c8 <rand+0x78>)
 8005294:	fb02 0004 	mla	r0, r2, r4, r0
 8005298:	fba3 3202 	umull	r3, r2, r3, r2
 800529c:	3301      	adds	r3, #1
 800529e:	eb40 0002 	adc.w	r0, r0, r2
 80052a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80052a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80052aa:	bd10      	pop	{r4, pc}
 80052ac:	200000bc 	.word	0x200000bc
 80052b0:	0800656c 	.word	0x0800656c
 80052b4:	08006583 	.word	0x08006583
 80052b8:	abcd330e 	.word	0xabcd330e
 80052bc:	e66d1234 	.word	0xe66d1234
 80052c0:	0005deec 	.word	0x0005deec
 80052c4:	5851f42d 	.word	0x5851f42d
 80052c8:	4c957f2d 	.word	0x4c957f2d

080052cc <std>:
 80052cc:	2300      	movs	r3, #0
 80052ce:	b510      	push	{r4, lr}
 80052d0:	4604      	mov	r4, r0
 80052d2:	e9c0 3300 	strd	r3, r3, [r0]
 80052d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052da:	6083      	str	r3, [r0, #8]
 80052dc:	8181      	strh	r1, [r0, #12]
 80052de:	6643      	str	r3, [r0, #100]	@ 0x64
 80052e0:	81c2      	strh	r2, [r0, #14]
 80052e2:	6183      	str	r3, [r0, #24]
 80052e4:	4619      	mov	r1, r3
 80052e6:	2208      	movs	r2, #8
 80052e8:	305c      	adds	r0, #92	@ 0x5c
 80052ea:	f000 f914 	bl	8005516 <memset>
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x58>)
 80052f0:	6224      	str	r4, [r4, #32]
 80052f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <std+0x5c>)
 80052f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052f8:	4b0c      	ldr	r3, [pc, #48]	@ (800532c <std+0x60>)
 80052fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <std+0x64>)
 80052fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <std+0x68>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d006      	beq.n	8005314 <std+0x48>
 8005306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800530a:	4294      	cmp	r4, r2
 800530c:	d002      	beq.n	8005314 <std+0x48>
 800530e:	33d0      	adds	r3, #208	@ 0xd0
 8005310:	429c      	cmp	r4, r3
 8005312:	d105      	bne.n	8005320 <std+0x54>
 8005314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531c:	f000 b984 	b.w	8005628 <__retarget_lock_init_recursive>
 8005320:	bd10      	pop	{r4, pc}
 8005322:	bf00      	nop
 8005324:	08005491 	.word	0x08005491
 8005328:	080054b3 	.word	0x080054b3
 800532c:	080054eb 	.word	0x080054eb
 8005330:	0800550f 	.word	0x0800550f
 8005334:	200003b4 	.word	0x200003b4

08005338 <stdio_exit_handler>:
 8005338:	4a02      	ldr	r2, [pc, #8]	@ (8005344 <stdio_exit_handler+0xc>)
 800533a:	4903      	ldr	r1, [pc, #12]	@ (8005348 <stdio_exit_handler+0x10>)
 800533c:	4803      	ldr	r0, [pc, #12]	@ (800534c <stdio_exit_handler+0x14>)
 800533e:	f000 b869 	b.w	8005414 <_fwalk_sglue>
 8005342:	bf00      	nop
 8005344:	200000b0 	.word	0x200000b0
 8005348:	08005dd1 	.word	0x08005dd1
 800534c:	200000c0 	.word	0x200000c0

08005350 <cleanup_stdio>:
 8005350:	6841      	ldr	r1, [r0, #4]
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <cleanup_stdio+0x34>)
 8005354:	b510      	push	{r4, lr}
 8005356:	4299      	cmp	r1, r3
 8005358:	4604      	mov	r4, r0
 800535a:	d001      	beq.n	8005360 <cleanup_stdio+0x10>
 800535c:	f000 fd38 	bl	8005dd0 <_fflush_r>
 8005360:	68a1      	ldr	r1, [r4, #8]
 8005362:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <cleanup_stdio+0x38>)
 8005364:	4299      	cmp	r1, r3
 8005366:	d002      	beq.n	800536e <cleanup_stdio+0x1e>
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fd31 	bl	8005dd0 <_fflush_r>
 800536e:	68e1      	ldr	r1, [r4, #12]
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <cleanup_stdio+0x3c>)
 8005372:	4299      	cmp	r1, r3
 8005374:	d004      	beq.n	8005380 <cleanup_stdio+0x30>
 8005376:	4620      	mov	r0, r4
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f000 bd28 	b.w	8005dd0 <_fflush_r>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	bf00      	nop
 8005384:	200003b4 	.word	0x200003b4
 8005388:	2000041c 	.word	0x2000041c
 800538c:	20000484 	.word	0x20000484

08005390 <global_stdio_init.part.0>:
 8005390:	b510      	push	{r4, lr}
 8005392:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <global_stdio_init.part.0+0x30>)
 8005394:	4c0b      	ldr	r4, [pc, #44]	@ (80053c4 <global_stdio_init.part.0+0x34>)
 8005396:	4a0c      	ldr	r2, [pc, #48]	@ (80053c8 <global_stdio_init.part.0+0x38>)
 8005398:	4620      	mov	r0, r4
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	2104      	movs	r1, #4
 800539e:	2200      	movs	r2, #0
 80053a0:	f7ff ff94 	bl	80052cc <std>
 80053a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053a8:	2201      	movs	r2, #1
 80053aa:	2109      	movs	r1, #9
 80053ac:	f7ff ff8e 	bl	80052cc <std>
 80053b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053b4:	2202      	movs	r2, #2
 80053b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ba:	2112      	movs	r1, #18
 80053bc:	f7ff bf86 	b.w	80052cc <std>
 80053c0:	200004ec 	.word	0x200004ec
 80053c4:	200003b4 	.word	0x200003b4
 80053c8:	08005339 	.word	0x08005339

080053cc <__sfp_lock_acquire>:
 80053cc:	4801      	ldr	r0, [pc, #4]	@ (80053d4 <__sfp_lock_acquire+0x8>)
 80053ce:	f000 b92c 	b.w	800562a <__retarget_lock_acquire_recursive>
 80053d2:	bf00      	nop
 80053d4:	200004f5 	.word	0x200004f5

080053d8 <__sfp_lock_release>:
 80053d8:	4801      	ldr	r0, [pc, #4]	@ (80053e0 <__sfp_lock_release+0x8>)
 80053da:	f000 b927 	b.w	800562c <__retarget_lock_release_recursive>
 80053de:	bf00      	nop
 80053e0:	200004f5 	.word	0x200004f5

080053e4 <__sinit>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4604      	mov	r4, r0
 80053e8:	f7ff fff0 	bl	80053cc <__sfp_lock_acquire>
 80053ec:	6a23      	ldr	r3, [r4, #32]
 80053ee:	b11b      	cbz	r3, 80053f8 <__sinit+0x14>
 80053f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f4:	f7ff bff0 	b.w	80053d8 <__sfp_lock_release>
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <__sinit+0x28>)
 80053fa:	6223      	str	r3, [r4, #32]
 80053fc:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <__sinit+0x2c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f5      	bne.n	80053f0 <__sinit+0xc>
 8005404:	f7ff ffc4 	bl	8005390 <global_stdio_init.part.0>
 8005408:	e7f2      	b.n	80053f0 <__sinit+0xc>
 800540a:	bf00      	nop
 800540c:	08005351 	.word	0x08005351
 8005410:	200004ec 	.word	0x200004ec

08005414 <_fwalk_sglue>:
 8005414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005418:	4607      	mov	r7, r0
 800541a:	4688      	mov	r8, r1
 800541c:	4614      	mov	r4, r2
 800541e:	2600      	movs	r6, #0
 8005420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005424:	f1b9 0901 	subs.w	r9, r9, #1
 8005428:	d505      	bpl.n	8005436 <_fwalk_sglue+0x22>
 800542a:	6824      	ldr	r4, [r4, #0]
 800542c:	2c00      	cmp	r4, #0
 800542e:	d1f7      	bne.n	8005420 <_fwalk_sglue+0xc>
 8005430:	4630      	mov	r0, r6
 8005432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005436:	89ab      	ldrh	r3, [r5, #12]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d907      	bls.n	800544c <_fwalk_sglue+0x38>
 800543c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005440:	3301      	adds	r3, #1
 8005442:	d003      	beq.n	800544c <_fwalk_sglue+0x38>
 8005444:	4629      	mov	r1, r5
 8005446:	4638      	mov	r0, r7
 8005448:	47c0      	blx	r8
 800544a:	4306      	orrs	r6, r0
 800544c:	3568      	adds	r5, #104	@ 0x68
 800544e:	e7e9      	b.n	8005424 <_fwalk_sglue+0x10>

08005450 <siprintf>:
 8005450:	b40e      	push	{r1, r2, r3}
 8005452:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005456:	b500      	push	{lr}
 8005458:	b09c      	sub	sp, #112	@ 0x70
 800545a:	ab1d      	add	r3, sp, #116	@ 0x74
 800545c:	9002      	str	r0, [sp, #8]
 800545e:	9006      	str	r0, [sp, #24]
 8005460:	9107      	str	r1, [sp, #28]
 8005462:	9104      	str	r1, [sp, #16]
 8005464:	4808      	ldr	r0, [pc, #32]	@ (8005488 <siprintf+0x38>)
 8005466:	4909      	ldr	r1, [pc, #36]	@ (800548c <siprintf+0x3c>)
 8005468:	f853 2b04 	ldr.w	r2, [r3], #4
 800546c:	9105      	str	r1, [sp, #20]
 800546e:	6800      	ldr	r0, [r0, #0]
 8005470:	a902      	add	r1, sp, #8
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	f000 f99e 	bl	80057b4 <_svfiprintf_r>
 8005478:	2200      	movs	r2, #0
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	b01c      	add	sp, #112	@ 0x70
 8005480:	f85d eb04 	ldr.w	lr, [sp], #4
 8005484:	b003      	add	sp, #12
 8005486:	4770      	bx	lr
 8005488:	200000bc 	.word	0x200000bc
 800548c:	ffff0208 	.word	0xffff0208

08005490 <__sread>:
 8005490:	b510      	push	{r4, lr}
 8005492:	460c      	mov	r4, r1
 8005494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005498:	f000 f868 	bl	800556c <_read_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	bfab      	itete	ge
 80054a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054a2:	89a3      	ldrhlt	r3, [r4, #12]
 80054a4:	181b      	addge	r3, r3, r0
 80054a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054aa:	bfac      	ite	ge
 80054ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054ae:	81a3      	strhlt	r3, [r4, #12]
 80054b0:	bd10      	pop	{r4, pc}

080054b2 <__swrite>:
 80054b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	461f      	mov	r7, r3
 80054b8:	898b      	ldrh	r3, [r1, #12]
 80054ba:	4605      	mov	r5, r0
 80054bc:	05db      	lsls	r3, r3, #23
 80054be:	460c      	mov	r4, r1
 80054c0:	4616      	mov	r6, r2
 80054c2:	d505      	bpl.n	80054d0 <__swrite+0x1e>
 80054c4:	2302      	movs	r3, #2
 80054c6:	2200      	movs	r2, #0
 80054c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054cc:	f000 f83c 	bl	8005548 <_lseek_r>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	4632      	mov	r2, r6
 80054d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	4628      	mov	r0, r5
 80054dc:	463b      	mov	r3, r7
 80054de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e6:	f000 b863 	b.w	80055b0 <_write_r>

080054ea <__sseek>:
 80054ea:	b510      	push	{r4, lr}
 80054ec:	460c      	mov	r4, r1
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 f829 	bl	8005548 <_lseek_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	bf15      	itete	ne
 80054fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005506:	81a3      	strheq	r3, [r4, #12]
 8005508:	bf18      	it	ne
 800550a:	81a3      	strhne	r3, [r4, #12]
 800550c:	bd10      	pop	{r4, pc}

0800550e <__sclose>:
 800550e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005512:	f000 b809 	b.w	8005528 <_close_r>

08005516 <memset>:
 8005516:	4603      	mov	r3, r0
 8005518:	4402      	add	r2, r0
 800551a:	4293      	cmp	r3, r2
 800551c:	d100      	bne.n	8005520 <memset+0xa>
 800551e:	4770      	bx	lr
 8005520:	f803 1b01 	strb.w	r1, [r3], #1
 8005524:	e7f9      	b.n	800551a <memset+0x4>
	...

08005528 <_close_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	2300      	movs	r3, #0
 800552c:	4d05      	ldr	r5, [pc, #20]	@ (8005544 <_close_r+0x1c>)
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fd fc84 	bl	8002e40 <_close>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_close_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_close_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200004f0 	.word	0x200004f0

08005548 <_lseek_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	2200      	movs	r2, #0
 8005552:	4d05      	ldr	r5, [pc, #20]	@ (8005568 <_lseek_r+0x20>)
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fd fc96 	bl	8002e88 <_lseek>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_lseek_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_lseek_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	200004f0 	.word	0x200004f0

0800556c <_read_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	2200      	movs	r2, #0
 8005576:	4d05      	ldr	r5, [pc, #20]	@ (800558c <_read_r+0x20>)
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fd fc27 	bl	8002dce <_read>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_read_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_read_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	200004f0 	.word	0x200004f0

08005590 <_sbrk_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	2300      	movs	r3, #0
 8005594:	4d05      	ldr	r5, [pc, #20]	@ (80055ac <_sbrk_r+0x1c>)
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fd fc80 	bl	8002ea0 <_sbrk>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_sbrk_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_sbrk_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	200004f0 	.word	0x200004f0

080055b0 <_write_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	2200      	movs	r2, #0
 80055ba:	4d05      	ldr	r5, [pc, #20]	@ (80055d0 <_write_r+0x20>)
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fd fc22 	bl	8002e08 <_write>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_write_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_write_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	200004f0 	.word	0x200004f0

080055d4 <__errno>:
 80055d4:	4b01      	ldr	r3, [pc, #4]	@ (80055dc <__errno+0x8>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200000bc 	.word	0x200000bc

080055e0 <__libc_init_array>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	2600      	movs	r6, #0
 80055e4:	4d0c      	ldr	r5, [pc, #48]	@ (8005618 <__libc_init_array+0x38>)
 80055e6:	4c0d      	ldr	r4, [pc, #52]	@ (800561c <__libc_init_array+0x3c>)
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	d109      	bne.n	8005604 <__libc_init_array+0x24>
 80055f0:	f000 ff36 	bl	8006460 <_init>
 80055f4:	2600      	movs	r6, #0
 80055f6:	4d0a      	ldr	r5, [pc, #40]	@ (8005620 <__libc_init_array+0x40>)
 80055f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005624 <__libc_init_array+0x44>)
 80055fa:	1b64      	subs	r4, r4, r5
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	42a6      	cmp	r6, r4
 8005600:	d105      	bne.n	800560e <__libc_init_array+0x2e>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	f855 3b04 	ldr.w	r3, [r5], #4
 8005608:	4798      	blx	r3
 800560a:	3601      	adds	r6, #1
 800560c:	e7ee      	b.n	80055ec <__libc_init_array+0xc>
 800560e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005612:	4798      	blx	r3
 8005614:	3601      	adds	r6, #1
 8005616:	e7f2      	b.n	80055fe <__libc_init_array+0x1e>
 8005618:	08006654 	.word	0x08006654
 800561c:	08006654 	.word	0x08006654
 8005620:	08006654 	.word	0x08006654
 8005624:	08006658 	.word	0x08006658

08005628 <__retarget_lock_init_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_acquire_recursive>:
 800562a:	4770      	bx	lr

0800562c <__retarget_lock_release_recursive>:
 800562c:	4770      	bx	lr
	...

08005630 <__assert_func>:
 8005630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005632:	4614      	mov	r4, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4b09      	ldr	r3, [pc, #36]	@ (800565c <__assert_func+0x2c>)
 8005638:	4605      	mov	r5, r0
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68d8      	ldr	r0, [r3, #12]
 800563e:	b954      	cbnz	r4, 8005656 <__assert_func+0x26>
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <__assert_func+0x30>)
 8005642:	461c      	mov	r4, r3
 8005644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005648:	9100      	str	r1, [sp, #0]
 800564a:	462b      	mov	r3, r5
 800564c:	4905      	ldr	r1, [pc, #20]	@ (8005664 <__assert_func+0x34>)
 800564e:	f000 fbe7 	bl	8005e20 <fiprintf>
 8005652:	f000 fc2d 	bl	8005eb0 <abort>
 8005656:	4b04      	ldr	r3, [pc, #16]	@ (8005668 <__assert_func+0x38>)
 8005658:	e7f4      	b.n	8005644 <__assert_func+0x14>
 800565a:	bf00      	nop
 800565c:	200000bc 	.word	0x200000bc
 8005660:	08006616 	.word	0x08006616
 8005664:	080065e8 	.word	0x080065e8
 8005668:	080065db 	.word	0x080065db

0800566c <_free_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4605      	mov	r5, r0
 8005670:	2900      	cmp	r1, #0
 8005672:	d040      	beq.n	80056f6 <_free_r+0x8a>
 8005674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005678:	1f0c      	subs	r4, r1, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	bfb8      	it	lt
 800567e:	18e4      	addlt	r4, r4, r3
 8005680:	f7ff fdda 	bl	8005238 <__malloc_lock>
 8005684:	4a1c      	ldr	r2, [pc, #112]	@ (80056f8 <_free_r+0x8c>)
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	b933      	cbnz	r3, 8005698 <_free_r+0x2c>
 800568a:	6063      	str	r3, [r4, #4]
 800568c:	6014      	str	r4, [r2, #0]
 800568e:	4628      	mov	r0, r5
 8005690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005694:	f7ff bdd6 	b.w	8005244 <__malloc_unlock>
 8005698:	42a3      	cmp	r3, r4
 800569a:	d908      	bls.n	80056ae <_free_r+0x42>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	1821      	adds	r1, r4, r0
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf01      	itttt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	1809      	addeq	r1, r1, r0
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	e7ed      	b.n	800568a <_free_r+0x1e>
 80056ae:	461a      	mov	r2, r3
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	b10b      	cbz	r3, 80056b8 <_free_r+0x4c>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d9fa      	bls.n	80056ae <_free_r+0x42>
 80056b8:	6811      	ldr	r1, [r2, #0]
 80056ba:	1850      	adds	r0, r2, r1
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d10b      	bne.n	80056d8 <_free_r+0x6c>
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	4401      	add	r1, r0
 80056c4:	1850      	adds	r0, r2, r1
 80056c6:	4283      	cmp	r3, r0
 80056c8:	6011      	str	r1, [r2, #0]
 80056ca:	d1e0      	bne.n	800568e <_free_r+0x22>
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4408      	add	r0, r1
 80056d2:	6010      	str	r0, [r2, #0]
 80056d4:	6053      	str	r3, [r2, #4]
 80056d6:	e7da      	b.n	800568e <_free_r+0x22>
 80056d8:	d902      	bls.n	80056e0 <_free_r+0x74>
 80056da:	230c      	movs	r3, #12
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	e7d6      	b.n	800568e <_free_r+0x22>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	1821      	adds	r1, r4, r0
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf01      	itttt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	1809      	addeq	r1, r1, r0
 80056ee:	6021      	streq	r1, [r4, #0]
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	6054      	str	r4, [r2, #4]
 80056f4:	e7cb      	b.n	800568e <_free_r+0x22>
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	200003b0 	.word	0x200003b0

080056fc <__ssputs_r>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	461f      	mov	r7, r3
 8005702:	688e      	ldr	r6, [r1, #8]
 8005704:	4682      	mov	sl, r0
 8005706:	42be      	cmp	r6, r7
 8005708:	460c      	mov	r4, r1
 800570a:	4690      	mov	r8, r2
 800570c:	680b      	ldr	r3, [r1, #0]
 800570e:	d82d      	bhi.n	800576c <__ssputs_r+0x70>
 8005710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005718:	d026      	beq.n	8005768 <__ssputs_r+0x6c>
 800571a:	6965      	ldr	r5, [r4, #20]
 800571c:	6909      	ldr	r1, [r1, #16]
 800571e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005722:	eba3 0901 	sub.w	r9, r3, r1
 8005726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800572a:	1c7b      	adds	r3, r7, #1
 800572c:	444b      	add	r3, r9
 800572e:	106d      	asrs	r5, r5, #1
 8005730:	429d      	cmp	r5, r3
 8005732:	bf38      	it	cc
 8005734:	461d      	movcc	r5, r3
 8005736:	0553      	lsls	r3, r2, #21
 8005738:	d527      	bpl.n	800578a <__ssputs_r+0x8e>
 800573a:	4629      	mov	r1, r5
 800573c:	f7ff fcfc 	bl	8005138 <_malloc_r>
 8005740:	4606      	mov	r6, r0
 8005742:	b360      	cbz	r0, 800579e <__ssputs_r+0xa2>
 8005744:	464a      	mov	r2, r9
 8005746:	6921      	ldr	r1, [r4, #16]
 8005748:	f000 fba4 	bl	8005e94 <memcpy>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	6126      	str	r6, [r4, #16]
 800575a:	444e      	add	r6, r9
 800575c:	6026      	str	r6, [r4, #0]
 800575e:	463e      	mov	r6, r7
 8005760:	6165      	str	r5, [r4, #20]
 8005762:	eba5 0509 	sub.w	r5, r5, r9
 8005766:	60a5      	str	r5, [r4, #8]
 8005768:	42be      	cmp	r6, r7
 800576a:	d900      	bls.n	800576e <__ssputs_r+0x72>
 800576c:	463e      	mov	r6, r7
 800576e:	4632      	mov	r2, r6
 8005770:	4641      	mov	r1, r8
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	f000 fb66 	bl	8005e44 <memmove>
 8005778:	2000      	movs	r0, #0
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	4433      	add	r3, r6
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	462a      	mov	r2, r5
 800578c:	f000 fb97 	bl	8005ebe <_realloc_r>
 8005790:	4606      	mov	r6, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d1e0      	bne.n	8005758 <__ssputs_r+0x5c>
 8005796:	4650      	mov	r0, sl
 8005798:	6921      	ldr	r1, [r4, #16]
 800579a:	f7ff ff67 	bl	800566c <_free_r>
 800579e:	230c      	movs	r3, #12
 80057a0:	f8ca 3000 	str.w	r3, [sl]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	e7e9      	b.n	8005786 <__ssputs_r+0x8a>
	...

080057b4 <_svfiprintf_r>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	4698      	mov	r8, r3
 80057ba:	898b      	ldrh	r3, [r1, #12]
 80057bc:	4607      	mov	r7, r0
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	460d      	mov	r5, r1
 80057c2:	4614      	mov	r4, r2
 80057c4:	b09d      	sub	sp, #116	@ 0x74
 80057c6:	d510      	bpl.n	80057ea <_svfiprintf_r+0x36>
 80057c8:	690b      	ldr	r3, [r1, #16]
 80057ca:	b973      	cbnz	r3, 80057ea <_svfiprintf_r+0x36>
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	f7ff fcb3 	bl	8005138 <_malloc_r>
 80057d2:	6028      	str	r0, [r5, #0]
 80057d4:	6128      	str	r0, [r5, #16]
 80057d6:	b930      	cbnz	r0, 80057e6 <_svfiprintf_r+0x32>
 80057d8:	230c      	movs	r3, #12
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	b01d      	add	sp, #116	@ 0x74
 80057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e6:	2340      	movs	r3, #64	@ 0x40
 80057e8:	616b      	str	r3, [r5, #20]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ee:	2320      	movs	r3, #32
 80057f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057f4:	2330      	movs	r3, #48	@ 0x30
 80057f6:	f04f 0901 	mov.w	r9, #1
 80057fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005998 <_svfiprintf_r+0x1e4>
 8005802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005806:	4623      	mov	r3, r4
 8005808:	469a      	mov	sl, r3
 800580a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580e:	b10a      	cbz	r2, 8005814 <_svfiprintf_r+0x60>
 8005810:	2a25      	cmp	r2, #37	@ 0x25
 8005812:	d1f9      	bne.n	8005808 <_svfiprintf_r+0x54>
 8005814:	ebba 0b04 	subs.w	fp, sl, r4
 8005818:	d00b      	beq.n	8005832 <_svfiprintf_r+0x7e>
 800581a:	465b      	mov	r3, fp
 800581c:	4622      	mov	r2, r4
 800581e:	4629      	mov	r1, r5
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ff6b 	bl	80056fc <__ssputs_r>
 8005826:	3001      	adds	r0, #1
 8005828:	f000 80a7 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800582c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800582e:	445a      	add	r2, fp
 8005830:	9209      	str	r2, [sp, #36]	@ 0x24
 8005832:	f89a 3000 	ldrb.w	r3, [sl]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 809f 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800583c:	2300      	movs	r3, #0
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005846:	f10a 0a01 	add.w	sl, sl, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	9307      	str	r3, [sp, #28]
 800584e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005852:	931a      	str	r3, [sp, #104]	@ 0x68
 8005854:	4654      	mov	r4, sl
 8005856:	2205      	movs	r2, #5
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	484e      	ldr	r0, [pc, #312]	@ (8005998 <_svfiprintf_r+0x1e4>)
 800585e:	f000 fb0b 	bl	8005e78 <memchr>
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	b9d8      	cbnz	r0, 800589e <_svfiprintf_r+0xea>
 8005866:	06d0      	lsls	r0, r2, #27
 8005868:	bf44      	itt	mi
 800586a:	2320      	movmi	r3, #32
 800586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005870:	0711      	lsls	r1, r2, #28
 8005872:	bf44      	itt	mi
 8005874:	232b      	movmi	r3, #43	@ 0x2b
 8005876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005880:	d015      	beq.n	80058ae <_svfiprintf_r+0xfa>
 8005882:	4654      	mov	r4, sl
 8005884:	2000      	movs	r0, #0
 8005886:	f04f 0c0a 	mov.w	ip, #10
 800588a:	9a07      	ldr	r2, [sp, #28]
 800588c:	4621      	mov	r1, r4
 800588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005892:	3b30      	subs	r3, #48	@ 0x30
 8005894:	2b09      	cmp	r3, #9
 8005896:	d94b      	bls.n	8005930 <_svfiprintf_r+0x17c>
 8005898:	b1b0      	cbz	r0, 80058c8 <_svfiprintf_r+0x114>
 800589a:	9207      	str	r2, [sp, #28]
 800589c:	e014      	b.n	80058c8 <_svfiprintf_r+0x114>
 800589e:	eba0 0308 	sub.w	r3, r0, r8
 80058a2:	fa09 f303 	lsl.w	r3, r9, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	46a2      	mov	sl, r4
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	e7d2      	b.n	8005854 <_svfiprintf_r+0xa0>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	1d19      	adds	r1, r3, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	9103      	str	r1, [sp, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfbb      	ittet	lt
 80058ba:	425b      	neglt	r3, r3
 80058bc:	f042 0202 	orrlt.w	r2, r2, #2
 80058c0:	9307      	strge	r3, [sp, #28]
 80058c2:	9307      	strlt	r3, [sp, #28]
 80058c4:	bfb8      	it	lt
 80058c6:	9204      	strlt	r2, [sp, #16]
 80058c8:	7823      	ldrb	r3, [r4, #0]
 80058ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80058cc:	d10a      	bne.n	80058e4 <_svfiprintf_r+0x130>
 80058ce:	7863      	ldrb	r3, [r4, #1]
 80058d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d2:	d132      	bne.n	800593a <_svfiprintf_r+0x186>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	3402      	adds	r4, #2
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	9203      	str	r2, [sp, #12]
 80058de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800599c <_svfiprintf_r+0x1e8>
 80058e8:	2203      	movs	r2, #3
 80058ea:	4650      	mov	r0, sl
 80058ec:	7821      	ldrb	r1, [r4, #0]
 80058ee:	f000 fac3 	bl	8005e78 <memchr>
 80058f2:	b138      	cbz	r0, 8005904 <_svfiprintf_r+0x150>
 80058f4:	2240      	movs	r2, #64	@ 0x40
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	eba0 000a 	sub.w	r0, r0, sl
 80058fc:	4082      	lsls	r2, r0
 80058fe:	4313      	orrs	r3, r2
 8005900:	3401      	adds	r4, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	2206      	movs	r2, #6
 800590a:	4825      	ldr	r0, [pc, #148]	@ (80059a0 <_svfiprintf_r+0x1ec>)
 800590c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005910:	f000 fab2 	bl	8005e78 <memchr>
 8005914:	2800      	cmp	r0, #0
 8005916:	d036      	beq.n	8005986 <_svfiprintf_r+0x1d2>
 8005918:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <_svfiprintf_r+0x1f0>)
 800591a:	bb1b      	cbnz	r3, 8005964 <_svfiprintf_r+0x1b0>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	3308      	adds	r3, #8
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592a:	4433      	add	r3, r6
 800592c:	9309      	str	r3, [sp, #36]	@ 0x24
 800592e:	e76a      	b.n	8005806 <_svfiprintf_r+0x52>
 8005930:	460c      	mov	r4, r1
 8005932:	2001      	movs	r0, #1
 8005934:	fb0c 3202 	mla	r2, ip, r2, r3
 8005938:	e7a8      	b.n	800588c <_svfiprintf_r+0xd8>
 800593a:	2300      	movs	r3, #0
 800593c:	f04f 0c0a 	mov.w	ip, #10
 8005940:	4619      	mov	r1, r3
 8005942:	3401      	adds	r4, #1
 8005944:	9305      	str	r3, [sp, #20]
 8005946:	4620      	mov	r0, r4
 8005948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594c:	3a30      	subs	r2, #48	@ 0x30
 800594e:	2a09      	cmp	r2, #9
 8005950:	d903      	bls.n	800595a <_svfiprintf_r+0x1a6>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c6      	beq.n	80058e4 <_svfiprintf_r+0x130>
 8005956:	9105      	str	r1, [sp, #20]
 8005958:	e7c4      	b.n	80058e4 <_svfiprintf_r+0x130>
 800595a:	4604      	mov	r4, r0
 800595c:	2301      	movs	r3, #1
 800595e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005962:	e7f0      	b.n	8005946 <_svfiprintf_r+0x192>
 8005964:	ab03      	add	r3, sp, #12
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	462a      	mov	r2, r5
 800596a:	4638      	mov	r0, r7
 800596c:	4b0e      	ldr	r3, [pc, #56]	@ (80059a8 <_svfiprintf_r+0x1f4>)
 800596e:	a904      	add	r1, sp, #16
 8005970:	f3af 8000 	nop.w
 8005974:	1c42      	adds	r2, r0, #1
 8005976:	4606      	mov	r6, r0
 8005978:	d1d6      	bne.n	8005928 <_svfiprintf_r+0x174>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	f53f af2d 	bmi.w	80057dc <_svfiprintf_r+0x28>
 8005982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005984:	e72c      	b.n	80057e0 <_svfiprintf_r+0x2c>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4638      	mov	r0, r7
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <_svfiprintf_r+0x1f4>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	f000 f87d 	bl	8005a90 <_printf_i>
 8005996:	e7ed      	b.n	8005974 <_svfiprintf_r+0x1c0>
 8005998:	08006617 	.word	0x08006617
 800599c:	0800661d 	.word	0x0800661d
 80059a0:	08006621 	.word	0x08006621
 80059a4:	00000000 	.word	0x00000000
 80059a8:	080056fd 	.word	0x080056fd

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4616      	mov	r6, r2
 80059b2:	4698      	mov	r8, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	4607      	mov	r7, r0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bfb8      	it	lt
 80059be:	4613      	movlt	r3, r2
 80059c0:	6033      	str	r3, [r6, #0]
 80059c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c6:	460c      	mov	r4, r1
 80059c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059cc:	b10a      	cbz	r2, 80059d2 <_printf_common+0x26>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	0699      	lsls	r1, r3, #26
 80059d6:	bf42      	ittt	mi
 80059d8:	6833      	ldrmi	r3, [r6, #0]
 80059da:	3302      	addmi	r3, #2
 80059dc:	6033      	strmi	r3, [r6, #0]
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	f015 0506 	ands.w	r5, r5, #6
 80059e4:	d106      	bne.n	80059f4 <_printf_common+0x48>
 80059e6:	f104 0a19 	add.w	sl, r4, #25
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	6832      	ldr	r2, [r6, #0]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dc2b      	bgt.n	8005a4c <_printf_common+0xa0>
 80059f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3b00      	subs	r3, #0
 80059fc:	bf18      	it	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	0692      	lsls	r2, r2, #26
 8005a02:	d430      	bmi.n	8005a66 <_printf_common+0xba>
 8005a04:	4641      	mov	r1, r8
 8005a06:	4638      	mov	r0, r7
 8005a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a0c:	47c8      	blx	r9
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d023      	beq.n	8005a5a <_printf_common+0xae>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf14      	ite	ne
 8005a1e:	2500      	movne	r5, #0
 8005a20:	6833      	ldreq	r3, [r6, #0]
 8005a22:	f04f 0600 	mov.w	r6, #0
 8005a26:	bf08      	it	eq
 8005a28:	68e5      	ldreq	r5, [r4, #12]
 8005a2a:	f104 041a 	add.w	r4, r4, #26
 8005a2e:	bf08      	it	eq
 8005a30:	1aed      	subeq	r5, r5, r3
 8005a32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a36:	bf08      	it	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	bfc4      	itt	gt
 8005a40:	1a9b      	subgt	r3, r3, r2
 8005a42:	18ed      	addgt	r5, r5, r3
 8005a44:	42b5      	cmp	r5, r6
 8005a46:	d11a      	bne.n	8005a7e <_printf_common+0xd2>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e008      	b.n	8005a5e <_printf_common+0xb2>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4652      	mov	r2, sl
 8005a50:	4641      	mov	r1, r8
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c8      	blx	r9
 8005a56:	3001      	adds	r0, #1
 8005a58:	d103      	bne.n	8005a62 <_printf_common+0xb6>
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	3501      	adds	r5, #1
 8005a64:	e7c1      	b.n	80059ea <_printf_common+0x3e>
 8005a66:	2030      	movs	r0, #48	@ 0x30
 8005a68:	18e1      	adds	r1, r4, r3
 8005a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a74:	4422      	add	r2, r4
 8005a76:	3302      	adds	r3, #2
 8005a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a7c:	e7c2      	b.n	8005a04 <_printf_common+0x58>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4622      	mov	r2, r4
 8005a82:	4641      	mov	r1, r8
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c8      	blx	r9
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d0e6      	beq.n	8005a5a <_printf_common+0xae>
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7d9      	b.n	8005a44 <_printf_common+0x98>

08005a90 <_printf_i>:
 8005a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	7e0f      	ldrb	r7, [r1, #24]
 8005a96:	4691      	mov	r9, r2
 8005a98:	2f78      	cmp	r7, #120	@ 0x78
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	469a      	mov	sl, r3
 8005aa0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa6:	d807      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aa8:	2f62      	cmp	r7, #98	@ 0x62
 8005aaa:	d80a      	bhi.n	8005ac2 <_printf_i+0x32>
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	f000 80d3 	beq.w	8005c58 <_printf_i+0x1c8>
 8005ab2:	2f58      	cmp	r7, #88	@ 0x58
 8005ab4:	f000 80ba 	beq.w	8005c2c <_printf_i+0x19c>
 8005ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ac0:	e03a      	b.n	8005b38 <_printf_i+0xa8>
 8005ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac6:	2b15      	cmp	r3, #21
 8005ac8:	d8f6      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aca:	a101      	add	r1, pc, #4	@ (adr r1, 8005ad0 <_printf_i+0x40>)
 8005acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005ab9 	.word	0x08005ab9
 8005adc:	08005ab9 	.word	0x08005ab9
 8005ae0:	08005ab9 	.word	0x08005ab9
 8005ae4:	08005ab9 	.word	0x08005ab9
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005ab9 	.word	0x08005ab9
 8005af0:	08005ab9 	.word	0x08005ab9
 8005af4:	08005ab9 	.word	0x08005ab9
 8005af8:	08005ab9 	.word	0x08005ab9
 8005afc:	08005c3f 	.word	0x08005c3f
 8005b00:	08005b67 	.word	0x08005b67
 8005b04:	08005bf9 	.word	0x08005bf9
 8005b08:	08005ab9 	.word	0x08005ab9
 8005b0c:	08005ab9 	.word	0x08005ab9
 8005b10:	08005c61 	.word	0x08005c61
 8005b14:	08005ab9 	.word	0x08005ab9
 8005b18:	08005b67 	.word	0x08005b67
 8005b1c:	08005ab9 	.word	0x08005ab9
 8005b20:	08005ab9 	.word	0x08005ab9
 8005b24:	08005c01 	.word	0x08005c01
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	1d1a      	adds	r2, r3, #4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6032      	str	r2, [r6, #0]
 8005b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e09e      	b.n	8005c7a <_printf_i+0x1ea>
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	1d19      	adds	r1, r3, #4
 8005b42:	6031      	str	r1, [r6, #0]
 8005b44:	0606      	lsls	r6, r0, #24
 8005b46:	d501      	bpl.n	8005b4c <_printf_i+0xbc>
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <_printf_i+0xc4>
 8005b4c:	0645      	lsls	r5, r0, #25
 8005b4e:	d5fb      	bpl.n	8005b48 <_printf_i+0xb8>
 8005b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	da03      	bge.n	8005b60 <_printf_i+0xd0>
 8005b58:	232d      	movs	r3, #45	@ 0x2d
 8005b5a:	426d      	negs	r5, r5
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b60:	230a      	movs	r3, #10
 8005b62:	4859      	ldr	r0, [pc, #356]	@ (8005cc8 <_printf_i+0x238>)
 8005b64:	e011      	b.n	8005b8a <_printf_i+0xfa>
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	0608      	lsls	r0, r1, #24
 8005b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b70:	d402      	bmi.n	8005b78 <_printf_i+0xe8>
 8005b72:	0649      	lsls	r1, r1, #25
 8005b74:	bf48      	it	mi
 8005b76:	b2ad      	uxthmi	r5, r5
 8005b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	bf14      	ite	ne
 8005b7e:	230a      	movne	r3, #10
 8005b80:	2308      	moveq	r3, #8
 8005b82:	4851      	ldr	r0, [pc, #324]	@ (8005cc8 <_printf_i+0x238>)
 8005b84:	2100      	movs	r1, #0
 8005b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b8a:	6866      	ldr	r6, [r4, #4]
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	bfa8      	it	ge
 8005b90:	6821      	ldrge	r1, [r4, #0]
 8005b92:	60a6      	str	r6, [r4, #8]
 8005b94:	bfa4      	itt	ge
 8005b96:	f021 0104 	bicge.w	r1, r1, #4
 8005b9a:	6021      	strge	r1, [r4, #0]
 8005b9c:	b90d      	cbnz	r5, 8005ba2 <_printf_i+0x112>
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d04b      	beq.n	8005c3a <_printf_i+0x1aa>
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bac:	5dc7      	ldrb	r7, [r0, r7]
 8005bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bb2:	462f      	mov	r7, r5
 8005bb4:	42bb      	cmp	r3, r7
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	d9f4      	bls.n	8005ba4 <_printf_i+0x114>
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d10b      	bne.n	8005bd6 <_printf_i+0x146>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	07df      	lsls	r7, r3, #31
 8005bc2:	d508      	bpl.n	8005bd6 <_printf_i+0x146>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	6861      	ldr	r1, [r4, #4]
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	bfde      	ittt	le
 8005bcc:	2330      	movle	r3, #48	@ 0x30
 8005bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd6:	1b92      	subs	r2, r2, r6
 8005bd8:	6122      	str	r2, [r4, #16]
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f8cd a000 	str.w	sl, [sp]
 8005be4:	aa03      	add	r2, sp, #12
 8005be6:	f7ff fee1 	bl	80059ac <_printf_common>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d14a      	bne.n	8005c84 <_printf_i+0x1f4>
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	b004      	add	sp, #16
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	2778      	movs	r7, #120	@ 0x78
 8005c02:	4832      	ldr	r0, [pc, #200]	@ (8005ccc <_printf_i+0x23c>)
 8005c04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	6831      	ldr	r1, [r6, #0]
 8005c0c:	061f      	lsls	r7, r3, #24
 8005c0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c12:	d402      	bmi.n	8005c1a <_printf_i+0x18a>
 8005c14:	065f      	lsls	r7, r3, #25
 8005c16:	bf48      	it	mi
 8005c18:	b2ad      	uxthmi	r5, r5
 8005c1a:	6031      	str	r1, [r6, #0]
 8005c1c:	07d9      	lsls	r1, r3, #31
 8005c1e:	bf44      	itt	mi
 8005c20:	f043 0320 	orrmi.w	r3, r3, #32
 8005c24:	6023      	strmi	r3, [r4, #0]
 8005c26:	b11d      	cbz	r5, 8005c30 <_printf_i+0x1a0>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	e7ab      	b.n	8005b84 <_printf_i+0xf4>
 8005c2c:	4826      	ldr	r0, [pc, #152]	@ (8005cc8 <_printf_i+0x238>)
 8005c2e:	e7e9      	b.n	8005c04 <_printf_i+0x174>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	f023 0320 	bic.w	r3, r3, #32
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	e7f6      	b.n	8005c28 <_printf_i+0x198>
 8005c3a:	4616      	mov	r6, r2
 8005c3c:	e7bd      	b.n	8005bba <_printf_i+0x12a>
 8005c3e:	6833      	ldr	r3, [r6, #0]
 8005c40:	6825      	ldr	r5, [r4, #0]
 8005c42:	1d18      	adds	r0, r3, #4
 8005c44:	6961      	ldr	r1, [r4, #20]
 8005c46:	6030      	str	r0, [r6, #0]
 8005c48:	062e      	lsls	r6, r5, #24
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0x1c2>
 8005c4e:	6019      	str	r1, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <_printf_i+0x1c8>
 8005c52:	0668      	lsls	r0, r5, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0x1be>
 8005c56:	8019      	strh	r1, [r3, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4616      	mov	r6, r2
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	e7bc      	b.n	8005bda <_printf_i+0x14a>
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	2100      	movs	r1, #0
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	6032      	str	r2, [r6, #0]
 8005c68:	681e      	ldr	r6, [r3, #0]
 8005c6a:	6862      	ldr	r2, [r4, #4]
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 f903 	bl	8005e78 <memchr>
 8005c72:	b108      	cbz	r0, 8005c78 <_printf_i+0x1e8>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	6060      	str	r0, [r4, #4]
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c82:	e7aa      	b.n	8005bda <_printf_i+0x14a>
 8005c84:	4632      	mov	r2, r6
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	47d0      	blx	sl
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0ad      	beq.n	8005bee <_printf_i+0x15e>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	079b      	lsls	r3, r3, #30
 8005c96:	d413      	bmi.n	8005cc0 <_printf_i+0x230>
 8005c98:	68e0      	ldr	r0, [r4, #12]
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	4298      	cmp	r0, r3
 8005c9e:	bfb8      	it	lt
 8005ca0:	4618      	movlt	r0, r3
 8005ca2:	e7a6      	b.n	8005bf2 <_printf_i+0x162>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4640      	mov	r0, r8
 8005cac:	47d0      	blx	sl
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d09d      	beq.n	8005bee <_printf_i+0x15e>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	68e3      	ldr	r3, [r4, #12]
 8005cb6:	9903      	ldr	r1, [sp, #12]
 8005cb8:	1a5b      	subs	r3, r3, r1
 8005cba:	42ab      	cmp	r3, r5
 8005cbc:	dcf2      	bgt.n	8005ca4 <_printf_i+0x214>
 8005cbe:	e7eb      	b.n	8005c98 <_printf_i+0x208>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	f104 0619 	add.w	r6, r4, #25
 8005cc6:	e7f5      	b.n	8005cb4 <_printf_i+0x224>
 8005cc8:	08006628 	.word	0x08006628
 8005ccc:	08006639 	.word	0x08006639

08005cd0 <__sflush_r>:
 8005cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	0716      	lsls	r6, r2, #28
 8005cd8:	4605      	mov	r5, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	d454      	bmi.n	8005d88 <__sflush_r+0xb8>
 8005cde:	684b      	ldr	r3, [r1, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc02      	bgt.n	8005cea <__sflush_r+0x1a>
 8005ce4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd48      	ble.n	8005d7c <__sflush_r+0xac>
 8005cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	d045      	beq.n	8005d7c <__sflush_r+0xac>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cf6:	682f      	ldr	r7, [r5, #0]
 8005cf8:	6a21      	ldr	r1, [r4, #32]
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	d030      	beq.n	8005d60 <__sflush_r+0x90>
 8005cfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	0759      	lsls	r1, r3, #29
 8005d04:	d505      	bpl.n	8005d12 <__sflush_r+0x42>
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d0c:	b10b      	cbz	r3, 8005d12 <__sflush_r+0x42>
 8005d0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	4628      	mov	r0, r5
 8005d16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d18:	6a21      	ldr	r1, [r4, #32]
 8005d1a:	47b0      	blx	r6
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	d106      	bne.n	8005d30 <__sflush_r+0x60>
 8005d22:	6829      	ldr	r1, [r5, #0]
 8005d24:	291d      	cmp	r1, #29
 8005d26:	d82b      	bhi.n	8005d80 <__sflush_r+0xb0>
 8005d28:	4a28      	ldr	r2, [pc, #160]	@ (8005dcc <__sflush_r+0xfc>)
 8005d2a:	410a      	asrs	r2, r1
 8005d2c:	07d6      	lsls	r6, r2, #31
 8005d2e:	d427      	bmi.n	8005d80 <__sflush_r+0xb0>
 8005d30:	2200      	movs	r2, #0
 8005d32:	6062      	str	r2, [r4, #4]
 8005d34:	6922      	ldr	r2, [r4, #16]
 8005d36:	04d9      	lsls	r1, r3, #19
 8005d38:	6022      	str	r2, [r4, #0]
 8005d3a:	d504      	bpl.n	8005d46 <__sflush_r+0x76>
 8005d3c:	1c42      	adds	r2, r0, #1
 8005d3e:	d101      	bne.n	8005d44 <__sflush_r+0x74>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b903      	cbnz	r3, 8005d46 <__sflush_r+0x76>
 8005d44:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d48:	602f      	str	r7, [r5, #0]
 8005d4a:	b1b9      	cbz	r1, 8005d7c <__sflush_r+0xac>
 8005d4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d50:	4299      	cmp	r1, r3
 8005d52:	d002      	beq.n	8005d5a <__sflush_r+0x8a>
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fc89 	bl	800566c <_free_r>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d5e:	e00d      	b.n	8005d7c <__sflush_r+0xac>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b0      	blx	r6
 8005d66:	4602      	mov	r2, r0
 8005d68:	1c50      	adds	r0, r2, #1
 8005d6a:	d1c9      	bne.n	8005d00 <__sflush_r+0x30>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0c6      	beq.n	8005d00 <__sflush_r+0x30>
 8005d72:	2b1d      	cmp	r3, #29
 8005d74:	d001      	beq.n	8005d7a <__sflush_r+0xaa>
 8005d76:	2b16      	cmp	r3, #22
 8005d78:	d11d      	bne.n	8005db6 <__sflush_r+0xe6>
 8005d7a:	602f      	str	r7, [r5, #0]
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e021      	b.n	8005dc4 <__sflush_r+0xf4>
 8005d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	e01a      	b.n	8005dbe <__sflush_r+0xee>
 8005d88:	690f      	ldr	r7, [r1, #16]
 8005d8a:	2f00      	cmp	r7, #0
 8005d8c:	d0f6      	beq.n	8005d7c <__sflush_r+0xac>
 8005d8e:	0793      	lsls	r3, r2, #30
 8005d90:	bf18      	it	ne
 8005d92:	2300      	movne	r3, #0
 8005d94:	680e      	ldr	r6, [r1, #0]
 8005d96:	bf08      	it	eq
 8005d98:	694b      	ldreq	r3, [r1, #20]
 8005d9a:	1bf6      	subs	r6, r6, r7
 8005d9c:	600f      	str	r7, [r1, #0]
 8005d9e:	608b      	str	r3, [r1, #8]
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	ddeb      	ble.n	8005d7c <__sflush_r+0xac>
 8005da4:	4633      	mov	r3, r6
 8005da6:	463a      	mov	r2, r7
 8005da8:	4628      	mov	r0, r5
 8005daa:	6a21      	ldr	r1, [r4, #32]
 8005dac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005db0:	47e0      	blx	ip
 8005db2:	2800      	cmp	r0, #0
 8005db4:	dc07      	bgt.n	8005dc6 <__sflush_r+0xf6>
 8005db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc6:	4407      	add	r7, r0
 8005dc8:	1a36      	subs	r6, r6, r0
 8005dca:	e7e9      	b.n	8005da0 <__sflush_r+0xd0>
 8005dcc:	dfbffffe 	.word	0xdfbffffe

08005dd0 <_fflush_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	690b      	ldr	r3, [r1, #16]
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	b913      	cbnz	r3, 8005de0 <_fflush_r+0x10>
 8005dda:	2500      	movs	r5, #0
 8005ddc:	4628      	mov	r0, r5
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	b118      	cbz	r0, 8005dea <_fflush_r+0x1a>
 8005de2:	6a03      	ldr	r3, [r0, #32]
 8005de4:	b90b      	cbnz	r3, 8005dea <_fflush_r+0x1a>
 8005de6:	f7ff fafd 	bl	80053e4 <__sinit>
 8005dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f3      	beq.n	8005dda <_fflush_r+0xa>
 8005df2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005df4:	07d0      	lsls	r0, r2, #31
 8005df6:	d404      	bmi.n	8005e02 <_fflush_r+0x32>
 8005df8:	0599      	lsls	r1, r3, #22
 8005dfa:	d402      	bmi.n	8005e02 <_fflush_r+0x32>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dfe:	f7ff fc14 	bl	800562a <__retarget_lock_acquire_recursive>
 8005e02:	4628      	mov	r0, r5
 8005e04:	4621      	mov	r1, r4
 8005e06:	f7ff ff63 	bl	8005cd0 <__sflush_r>
 8005e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	07da      	lsls	r2, r3, #31
 8005e10:	d4e4      	bmi.n	8005ddc <_fflush_r+0xc>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	d4e1      	bmi.n	8005ddc <_fflush_r+0xc>
 8005e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e1a:	f7ff fc07 	bl	800562c <__retarget_lock_release_recursive>
 8005e1e:	e7dd      	b.n	8005ddc <_fflush_r+0xc>

08005e20 <fiprintf>:
 8005e20:	b40e      	push	{r1, r2, r3}
 8005e22:	b503      	push	{r0, r1, lr}
 8005e24:	4601      	mov	r1, r0
 8005e26:	ab03      	add	r3, sp, #12
 8005e28:	4805      	ldr	r0, [pc, #20]	@ (8005e40 <fiprintf+0x20>)
 8005e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2e:	6800      	ldr	r0, [r0, #0]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	f000 f899 	bl	8005f68 <_vfiprintf_r>
 8005e36:	b002      	add	sp, #8
 8005e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e3c:	b003      	add	sp, #12
 8005e3e:	4770      	bx	lr
 8005e40:	200000bc 	.word	0x200000bc

08005e44 <memmove>:
 8005e44:	4288      	cmp	r0, r1
 8005e46:	b510      	push	{r4, lr}
 8005e48:	eb01 0402 	add.w	r4, r1, r2
 8005e4c:	d902      	bls.n	8005e54 <memmove+0x10>
 8005e4e:	4284      	cmp	r4, r0
 8005e50:	4623      	mov	r3, r4
 8005e52:	d807      	bhi.n	8005e64 <memmove+0x20>
 8005e54:	1e43      	subs	r3, r0, #1
 8005e56:	42a1      	cmp	r1, r4
 8005e58:	d008      	beq.n	8005e6c <memmove+0x28>
 8005e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e62:	e7f8      	b.n	8005e56 <memmove+0x12>
 8005e64:	4601      	mov	r1, r0
 8005e66:	4402      	add	r2, r0
 8005e68:	428a      	cmp	r2, r1
 8005e6a:	d100      	bne.n	8005e6e <memmove+0x2a>
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e76:	e7f7      	b.n	8005e68 <memmove+0x24>

08005e78 <memchr>:
 8005e78:	4603      	mov	r3, r0
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	b2c9      	uxtb	r1, r1
 8005e7e:	4402      	add	r2, r0
 8005e80:	4293      	cmp	r3, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	d101      	bne.n	8005e8a <memchr+0x12>
 8005e86:	2000      	movs	r0, #0
 8005e88:	e003      	b.n	8005e92 <memchr+0x1a>
 8005e8a:	7804      	ldrb	r4, [r0, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	428c      	cmp	r4, r1
 8005e90:	d1f6      	bne.n	8005e80 <memchr+0x8>
 8005e92:	bd10      	pop	{r4, pc}

08005e94 <memcpy>:
 8005e94:	440a      	add	r2, r1
 8005e96:	4291      	cmp	r1, r2
 8005e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e9c:	d100      	bne.n	8005ea0 <memcpy+0xc>
 8005e9e:	4770      	bx	lr
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eac:	d1f9      	bne.n	8005ea2 <memcpy+0xe>
 8005eae:	bd10      	pop	{r4, pc}

08005eb0 <abort>:
 8005eb0:	2006      	movs	r0, #6
 8005eb2:	b508      	push	{r3, lr}
 8005eb4:	f000 fa2c 	bl	8006310 <raise>
 8005eb8:	2001      	movs	r0, #1
 8005eba:	f7fc ff7d 	bl	8002db8 <_exit>

08005ebe <_realloc_r>:
 8005ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b921      	cbnz	r1, 8005ed4 <_realloc_r+0x16>
 8005eca:	4611      	mov	r1, r2
 8005ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	f7ff b932 	b.w	8005138 <_malloc_r>
 8005ed4:	b92a      	cbnz	r2, 8005ee2 <_realloc_r+0x24>
 8005ed6:	f7ff fbc9 	bl	800566c <_free_r>
 8005eda:	2400      	movs	r4, #0
 8005edc:	4620      	mov	r0, r4
 8005ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee2:	f000 fa31 	bl	8006348 <_malloc_usable_size_r>
 8005ee6:	4285      	cmp	r5, r0
 8005ee8:	4606      	mov	r6, r0
 8005eea:	d802      	bhi.n	8005ef2 <_realloc_r+0x34>
 8005eec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ef0:	d8f4      	bhi.n	8005edc <_realloc_r+0x1e>
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	f7ff f91f 	bl	8005138 <_malloc_r>
 8005efa:	4607      	mov	r7, r0
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d0ec      	beq.n	8005eda <_realloc_r+0x1c>
 8005f00:	42b5      	cmp	r5, r6
 8005f02:	462a      	mov	r2, r5
 8005f04:	4621      	mov	r1, r4
 8005f06:	bf28      	it	cs
 8005f08:	4632      	movcs	r2, r6
 8005f0a:	f7ff ffc3 	bl	8005e94 <memcpy>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4640      	mov	r0, r8
 8005f12:	f7ff fbab 	bl	800566c <_free_r>
 8005f16:	463c      	mov	r4, r7
 8005f18:	e7e0      	b.n	8005edc <_realloc_r+0x1e>

08005f1a <__sfputc_r>:
 8005f1a:	6893      	ldr	r3, [r2, #8]
 8005f1c:	b410      	push	{r4}
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	6093      	str	r3, [r2, #8]
 8005f24:	da07      	bge.n	8005f36 <__sfputc_r+0x1c>
 8005f26:	6994      	ldr	r4, [r2, #24]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	db01      	blt.n	8005f30 <__sfputc_r+0x16>
 8005f2c:	290a      	cmp	r1, #10
 8005f2e:	d102      	bne.n	8005f36 <__sfputc_r+0x1c>
 8005f30:	bc10      	pop	{r4}
 8005f32:	f000 b931 	b.w	8006198 <__swbuf_r>
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	1c58      	adds	r0, r3, #1
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	7019      	strb	r1, [r3, #0]
 8005f3e:	4608      	mov	r0, r1
 8005f40:	bc10      	pop	{r4}
 8005f42:	4770      	bx	lr

08005f44 <__sfputs_r>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	18d5      	adds	r5, r2, r3
 8005f4e:	42ac      	cmp	r4, r5
 8005f50:	d101      	bne.n	8005f56 <__sfputs_r+0x12>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e007      	b.n	8005f66 <__sfputs_r+0x22>
 8005f56:	463a      	mov	r2, r7
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5e:	f7ff ffdc 	bl	8005f1a <__sfputc_r>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d1f3      	bne.n	8005f4e <__sfputs_r+0xa>
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f68 <_vfiprintf_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	4614      	mov	r4, r2
 8005f70:	4698      	mov	r8, r3
 8005f72:	4606      	mov	r6, r0
 8005f74:	b09d      	sub	sp, #116	@ 0x74
 8005f76:	b118      	cbz	r0, 8005f80 <_vfiprintf_r+0x18>
 8005f78:	6a03      	ldr	r3, [r0, #32]
 8005f7a:	b90b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x18>
 8005f7c:	f7ff fa32 	bl	80053e4 <__sinit>
 8005f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	d405      	bmi.n	8005f92 <_vfiprintf_r+0x2a>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	059a      	lsls	r2, r3, #22
 8005f8a:	d402      	bmi.n	8005f92 <_vfiprintf_r+0x2a>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8e:	f7ff fb4c 	bl	800562a <__retarget_lock_acquire_recursive>
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	071b      	lsls	r3, r3, #28
 8005f96:	d501      	bpl.n	8005f9c <_vfiprintf_r+0x34>
 8005f98:	692b      	ldr	r3, [r5, #16]
 8005f9a:	b99b      	cbnz	r3, 8005fc4 <_vfiprintf_r+0x5c>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f938 	bl	8006214 <__swsetup_r>
 8005fa4:	b170      	cbz	r0, 8005fc4 <_vfiprintf_r+0x5c>
 8005fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fa8:	07dc      	lsls	r4, r3, #31
 8005faa:	d504      	bpl.n	8005fb6 <_vfiprintf_r+0x4e>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b01d      	add	sp, #116	@ 0x74
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	89ab      	ldrh	r3, [r5, #12]
 8005fb8:	0598      	lsls	r0, r3, #22
 8005fba:	d4f7      	bmi.n	8005fac <_vfiprintf_r+0x44>
 8005fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fbe:	f7ff fb35 	bl	800562c <__retarget_lock_release_recursive>
 8005fc2:	e7f3      	b.n	8005fac <_vfiprintf_r+0x44>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fce:	2330      	movs	r3, #48	@ 0x30
 8005fd0:	f04f 0901 	mov.w	r9, #1
 8005fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006184 <_vfiprintf_r+0x21c>
 8005fdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	469a      	mov	sl, r3
 8005fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe8:	b10a      	cbz	r2, 8005fee <_vfiprintf_r+0x86>
 8005fea:	2a25      	cmp	r2, #37	@ 0x25
 8005fec:	d1f9      	bne.n	8005fe2 <_vfiprintf_r+0x7a>
 8005fee:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff2:	d00b      	beq.n	800600c <_vfiprintf_r+0xa4>
 8005ff4:	465b      	mov	r3, fp
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ffa2 	bl	8005f44 <__sfputs_r>
 8006000:	3001      	adds	r0, #1
 8006002:	f000 80a7 	beq.w	8006154 <_vfiprintf_r+0x1ec>
 8006006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006008:	445a      	add	r2, fp
 800600a:	9209      	str	r2, [sp, #36]	@ 0x24
 800600c:	f89a 3000 	ldrb.w	r3, [sl]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 809f 	beq.w	8006154 <_vfiprintf_r+0x1ec>
 8006016:	2300      	movs	r3, #0
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006020:	f10a 0a01 	add.w	sl, sl, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800602c:	931a      	str	r3, [sp, #104]	@ 0x68
 800602e:	4654      	mov	r4, sl
 8006030:	2205      	movs	r2, #5
 8006032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006036:	4853      	ldr	r0, [pc, #332]	@ (8006184 <_vfiprintf_r+0x21c>)
 8006038:	f7ff ff1e 	bl	8005e78 <memchr>
 800603c:	9a04      	ldr	r2, [sp, #16]
 800603e:	b9d8      	cbnz	r0, 8006078 <_vfiprintf_r+0x110>
 8006040:	06d1      	lsls	r1, r2, #27
 8006042:	bf44      	itt	mi
 8006044:	2320      	movmi	r3, #32
 8006046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800604a:	0713      	lsls	r3, r2, #28
 800604c:	bf44      	itt	mi
 800604e:	232b      	movmi	r3, #43	@ 0x2b
 8006050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006054:	f89a 3000 	ldrb.w	r3, [sl]
 8006058:	2b2a      	cmp	r3, #42	@ 0x2a
 800605a:	d015      	beq.n	8006088 <_vfiprintf_r+0x120>
 800605c:	4654      	mov	r4, sl
 800605e:	2000      	movs	r0, #0
 8006060:	f04f 0c0a 	mov.w	ip, #10
 8006064:	9a07      	ldr	r2, [sp, #28]
 8006066:	4621      	mov	r1, r4
 8006068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606c:	3b30      	subs	r3, #48	@ 0x30
 800606e:	2b09      	cmp	r3, #9
 8006070:	d94b      	bls.n	800610a <_vfiprintf_r+0x1a2>
 8006072:	b1b0      	cbz	r0, 80060a2 <_vfiprintf_r+0x13a>
 8006074:	9207      	str	r2, [sp, #28]
 8006076:	e014      	b.n	80060a2 <_vfiprintf_r+0x13a>
 8006078:	eba0 0308 	sub.w	r3, r0, r8
 800607c:	fa09 f303 	lsl.w	r3, r9, r3
 8006080:	4313      	orrs	r3, r2
 8006082:	46a2      	mov	sl, r4
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	e7d2      	b.n	800602e <_vfiprintf_r+0xc6>
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	1d19      	adds	r1, r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	9103      	str	r1, [sp, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	bfbb      	ittet	lt
 8006094:	425b      	neglt	r3, r3
 8006096:	f042 0202 	orrlt.w	r2, r2, #2
 800609a:	9307      	strge	r3, [sp, #28]
 800609c:	9307      	strlt	r3, [sp, #28]
 800609e:	bfb8      	it	lt
 80060a0:	9204      	strlt	r2, [sp, #16]
 80060a2:	7823      	ldrb	r3, [r4, #0]
 80060a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80060a6:	d10a      	bne.n	80060be <_vfiprintf_r+0x156>
 80060a8:	7863      	ldrb	r3, [r4, #1]
 80060aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ac:	d132      	bne.n	8006114 <_vfiprintf_r+0x1ac>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	3402      	adds	r4, #2
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9203      	str	r2, [sp, #12]
 80060b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060bc:	9305      	str	r3, [sp, #20]
 80060be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006188 <_vfiprintf_r+0x220>
 80060c2:	2203      	movs	r2, #3
 80060c4:	4650      	mov	r0, sl
 80060c6:	7821      	ldrb	r1, [r4, #0]
 80060c8:	f7ff fed6 	bl	8005e78 <memchr>
 80060cc:	b138      	cbz	r0, 80060de <_vfiprintf_r+0x176>
 80060ce:	2240      	movs	r2, #64	@ 0x40
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	eba0 000a 	sub.w	r0, r0, sl
 80060d6:	4082      	lsls	r2, r0
 80060d8:	4313      	orrs	r3, r2
 80060da:	3401      	adds	r4, #1
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e2:	2206      	movs	r2, #6
 80060e4:	4829      	ldr	r0, [pc, #164]	@ (800618c <_vfiprintf_r+0x224>)
 80060e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060ea:	f7ff fec5 	bl	8005e78 <memchr>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d03f      	beq.n	8006172 <_vfiprintf_r+0x20a>
 80060f2:	4b27      	ldr	r3, [pc, #156]	@ (8006190 <_vfiprintf_r+0x228>)
 80060f4:	bb1b      	cbnz	r3, 800613e <_vfiprintf_r+0x1d6>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	3307      	adds	r3, #7
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	3308      	adds	r3, #8
 8006100:	9303      	str	r3, [sp, #12]
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	443b      	add	r3, r7
 8006106:	9309      	str	r3, [sp, #36]	@ 0x24
 8006108:	e76a      	b.n	8005fe0 <_vfiprintf_r+0x78>
 800610a:	460c      	mov	r4, r1
 800610c:	2001      	movs	r0, #1
 800610e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006112:	e7a8      	b.n	8006066 <_vfiprintf_r+0xfe>
 8006114:	2300      	movs	r3, #0
 8006116:	f04f 0c0a 	mov.w	ip, #10
 800611a:	4619      	mov	r1, r3
 800611c:	3401      	adds	r4, #1
 800611e:	9305      	str	r3, [sp, #20]
 8006120:	4620      	mov	r0, r4
 8006122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006126:	3a30      	subs	r2, #48	@ 0x30
 8006128:	2a09      	cmp	r2, #9
 800612a:	d903      	bls.n	8006134 <_vfiprintf_r+0x1cc>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0c6      	beq.n	80060be <_vfiprintf_r+0x156>
 8006130:	9105      	str	r1, [sp, #20]
 8006132:	e7c4      	b.n	80060be <_vfiprintf_r+0x156>
 8006134:	4604      	mov	r4, r0
 8006136:	2301      	movs	r3, #1
 8006138:	fb0c 2101 	mla	r1, ip, r1, r2
 800613c:	e7f0      	b.n	8006120 <_vfiprintf_r+0x1b8>
 800613e:	ab03      	add	r3, sp, #12
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	462a      	mov	r2, r5
 8006144:	4630      	mov	r0, r6
 8006146:	4b13      	ldr	r3, [pc, #76]	@ (8006194 <_vfiprintf_r+0x22c>)
 8006148:	a904      	add	r1, sp, #16
 800614a:	f3af 8000 	nop.w
 800614e:	4607      	mov	r7, r0
 8006150:	1c78      	adds	r0, r7, #1
 8006152:	d1d6      	bne.n	8006102 <_vfiprintf_r+0x19a>
 8006154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	d405      	bmi.n	8006166 <_vfiprintf_r+0x1fe>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	059a      	lsls	r2, r3, #22
 800615e:	d402      	bmi.n	8006166 <_vfiprintf_r+0x1fe>
 8006160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006162:	f7ff fa63 	bl	800562c <__retarget_lock_release_recursive>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	065b      	lsls	r3, r3, #25
 800616a:	f53f af1f 	bmi.w	8005fac <_vfiprintf_r+0x44>
 800616e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006170:	e71e      	b.n	8005fb0 <_vfiprintf_r+0x48>
 8006172:	ab03      	add	r3, sp, #12
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	462a      	mov	r2, r5
 8006178:	4630      	mov	r0, r6
 800617a:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <_vfiprintf_r+0x22c>)
 800617c:	a904      	add	r1, sp, #16
 800617e:	f7ff fc87 	bl	8005a90 <_printf_i>
 8006182:	e7e4      	b.n	800614e <_vfiprintf_r+0x1e6>
 8006184:	08006617 	.word	0x08006617
 8006188:	0800661d 	.word	0x0800661d
 800618c:	08006621 	.word	0x08006621
 8006190:	00000000 	.word	0x00000000
 8006194:	08005f45 	.word	0x08005f45

08006198 <__swbuf_r>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	460e      	mov	r6, r1
 800619c:	4614      	mov	r4, r2
 800619e:	4605      	mov	r5, r0
 80061a0:	b118      	cbz	r0, 80061aa <__swbuf_r+0x12>
 80061a2:	6a03      	ldr	r3, [r0, #32]
 80061a4:	b90b      	cbnz	r3, 80061aa <__swbuf_r+0x12>
 80061a6:	f7ff f91d 	bl	80053e4 <__sinit>
 80061aa:	69a3      	ldr	r3, [r4, #24]
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	071a      	lsls	r2, r3, #28
 80061b2:	d501      	bpl.n	80061b8 <__swbuf_r+0x20>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	b943      	cbnz	r3, 80061ca <__swbuf_r+0x32>
 80061b8:	4621      	mov	r1, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 f82a 	bl	8006214 <__swsetup_r>
 80061c0:	b118      	cbz	r0, 80061ca <__swbuf_r+0x32>
 80061c2:	f04f 37ff 	mov.w	r7, #4294967295
 80061c6:	4638      	mov	r0, r7
 80061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	b2f6      	uxtb	r6, r6
 80061d0:	1a98      	subs	r0, r3, r2
 80061d2:	6963      	ldr	r3, [r4, #20]
 80061d4:	4637      	mov	r7, r6
 80061d6:	4283      	cmp	r3, r0
 80061d8:	dc05      	bgt.n	80061e6 <__swbuf_r+0x4e>
 80061da:	4621      	mov	r1, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f7ff fdf7 	bl	8005dd0 <_fflush_r>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1ed      	bne.n	80061c2 <__swbuf_r+0x2a>
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	701e      	strb	r6, [r3, #0]
 80061f4:	6962      	ldr	r2, [r4, #20]
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d004      	beq.n	8006206 <__swbuf_r+0x6e>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	07db      	lsls	r3, r3, #31
 8006200:	d5e1      	bpl.n	80061c6 <__swbuf_r+0x2e>
 8006202:	2e0a      	cmp	r6, #10
 8006204:	d1df      	bne.n	80061c6 <__swbuf_r+0x2e>
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f7ff fde1 	bl	8005dd0 <_fflush_r>
 800620e:	2800      	cmp	r0, #0
 8006210:	d0d9      	beq.n	80061c6 <__swbuf_r+0x2e>
 8006212:	e7d6      	b.n	80061c2 <__swbuf_r+0x2a>

08006214 <__swsetup_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <__swsetup_r+0xa8>)
 8006218:	4605      	mov	r5, r0
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	460c      	mov	r4, r1
 800621e:	b118      	cbz	r0, 8006228 <__swsetup_r+0x14>
 8006220:	6a03      	ldr	r3, [r0, #32]
 8006222:	b90b      	cbnz	r3, 8006228 <__swsetup_r+0x14>
 8006224:	f7ff f8de 	bl	80053e4 <__sinit>
 8006228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622c:	0719      	lsls	r1, r3, #28
 800622e:	d422      	bmi.n	8006276 <__swsetup_r+0x62>
 8006230:	06da      	lsls	r2, r3, #27
 8006232:	d407      	bmi.n	8006244 <__swsetup_r+0x30>
 8006234:	2209      	movs	r2, #9
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	e033      	b.n	80062ac <__swsetup_r+0x98>
 8006244:	0758      	lsls	r0, r3, #29
 8006246:	d512      	bpl.n	800626e <__swsetup_r+0x5a>
 8006248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800624a:	b141      	cbz	r1, 800625e <__swsetup_r+0x4a>
 800624c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006250:	4299      	cmp	r1, r3
 8006252:	d002      	beq.n	800625a <__swsetup_r+0x46>
 8006254:	4628      	mov	r0, r5
 8006256:	f7ff fa09 	bl	800566c <_free_r>
 800625a:	2300      	movs	r3, #0
 800625c:	6363      	str	r3, [r4, #52]	@ 0x34
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	2300      	movs	r3, #0
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	b94b      	cbnz	r3, 800628e <__swsetup_r+0x7a>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d003      	beq.n	800628e <__swsetup_r+0x7a>
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f88a 	bl	80063a2 <__smakebuf_r>
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	f013 0201 	ands.w	r2, r3, #1
 8006296:	d00a      	beq.n	80062ae <__swsetup_r+0x9a>
 8006298:	2200      	movs	r2, #0
 800629a:	60a2      	str	r2, [r4, #8]
 800629c:	6962      	ldr	r2, [r4, #20]
 800629e:	4252      	negs	r2, r2
 80062a0:	61a2      	str	r2, [r4, #24]
 80062a2:	6922      	ldr	r2, [r4, #16]
 80062a4:	b942      	cbnz	r2, 80062b8 <__swsetup_r+0xa4>
 80062a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062aa:	d1c5      	bne.n	8006238 <__swsetup_r+0x24>
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	0799      	lsls	r1, r3, #30
 80062b0:	bf58      	it	pl
 80062b2:	6962      	ldrpl	r2, [r4, #20]
 80062b4:	60a2      	str	r2, [r4, #8]
 80062b6:	e7f4      	b.n	80062a2 <__swsetup_r+0x8e>
 80062b8:	2000      	movs	r0, #0
 80062ba:	e7f7      	b.n	80062ac <__swsetup_r+0x98>
 80062bc:	200000bc 	.word	0x200000bc

080062c0 <_raise_r>:
 80062c0:	291f      	cmp	r1, #31
 80062c2:	b538      	push	{r3, r4, r5, lr}
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	d904      	bls.n	80062d4 <_raise_r+0x14>
 80062ca:	2316      	movs	r3, #22
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062d6:	b112      	cbz	r2, 80062de <_raise_r+0x1e>
 80062d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062dc:	b94b      	cbnz	r3, 80062f2 <_raise_r+0x32>
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f830 	bl	8006344 <_getpid_r>
 80062e4:	4622      	mov	r2, r4
 80062e6:	4601      	mov	r1, r0
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ee:	f000 b817 	b.w	8006320 <_kill_r>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d00a      	beq.n	800630c <_raise_r+0x4c>
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	d103      	bne.n	8006302 <_raise_r+0x42>
 80062fa:	2316      	movs	r3, #22
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	2001      	movs	r0, #1
 8006300:	e7e7      	b.n	80062d2 <_raise_r+0x12>
 8006302:	2100      	movs	r1, #0
 8006304:	4620      	mov	r0, r4
 8006306:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800630a:	4798      	blx	r3
 800630c:	2000      	movs	r0, #0
 800630e:	e7e0      	b.n	80062d2 <_raise_r+0x12>

08006310 <raise>:
 8006310:	4b02      	ldr	r3, [pc, #8]	@ (800631c <raise+0xc>)
 8006312:	4601      	mov	r1, r0
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f7ff bfd3 	b.w	80062c0 <_raise_r>
 800631a:	bf00      	nop
 800631c:	200000bc 	.word	0x200000bc

08006320 <_kill_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	2300      	movs	r3, #0
 8006324:	4d06      	ldr	r5, [pc, #24]	@ (8006340 <_kill_r+0x20>)
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	f7fc fd33 	bl	8002d98 <_kill>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d102      	bne.n	800633c <_kill_r+0x1c>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b103      	cbz	r3, 800633c <_kill_r+0x1c>
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	bd38      	pop	{r3, r4, r5, pc}
 800633e:	bf00      	nop
 8006340:	200004f0 	.word	0x200004f0

08006344 <_getpid_r>:
 8006344:	f7fc bd21 	b.w	8002d8a <_getpid>

08006348 <_malloc_usable_size_r>:
 8006348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634c:	1f18      	subs	r0, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	bfbc      	itt	lt
 8006352:	580b      	ldrlt	r3, [r1, r0]
 8006354:	18c0      	addlt	r0, r0, r3
 8006356:	4770      	bx	lr

08006358 <__swhatbuf_r>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	460c      	mov	r4, r1
 800635c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006360:	4615      	mov	r5, r2
 8006362:	2900      	cmp	r1, #0
 8006364:	461e      	mov	r6, r3
 8006366:	b096      	sub	sp, #88	@ 0x58
 8006368:	da0c      	bge.n	8006384 <__swhatbuf_r+0x2c>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	2100      	movs	r1, #0
 800636e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006372:	bf14      	ite	ne
 8006374:	2340      	movne	r3, #64	@ 0x40
 8006376:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800637a:	2000      	movs	r0, #0
 800637c:	6031      	str	r1, [r6, #0]
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	b016      	add	sp, #88	@ 0x58
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	466a      	mov	r2, sp
 8006386:	f000 f849 	bl	800641c <_fstat_r>
 800638a:	2800      	cmp	r0, #0
 800638c:	dbed      	blt.n	800636a <__swhatbuf_r+0x12>
 800638e:	9901      	ldr	r1, [sp, #4]
 8006390:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006394:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006398:	4259      	negs	r1, r3
 800639a:	4159      	adcs	r1, r3
 800639c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063a0:	e7eb      	b.n	800637a <__swhatbuf_r+0x22>

080063a2 <__smakebuf_r>:
 80063a2:	898b      	ldrh	r3, [r1, #12]
 80063a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a6:	079d      	lsls	r5, r3, #30
 80063a8:	4606      	mov	r6, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	d507      	bpl.n	80063be <__smakebuf_r+0x1c>
 80063ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	6123      	str	r3, [r4, #16]
 80063b6:	2301      	movs	r3, #1
 80063b8:	6163      	str	r3, [r4, #20]
 80063ba:	b003      	add	sp, #12
 80063bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063be:	466a      	mov	r2, sp
 80063c0:	ab01      	add	r3, sp, #4
 80063c2:	f7ff ffc9 	bl	8006358 <__swhatbuf_r>
 80063c6:	9f00      	ldr	r7, [sp, #0]
 80063c8:	4605      	mov	r5, r0
 80063ca:	4639      	mov	r1, r7
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7fe feb3 	bl	8005138 <_malloc_r>
 80063d2:	b948      	cbnz	r0, 80063e8 <__smakebuf_r+0x46>
 80063d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d8:	059a      	lsls	r2, r3, #22
 80063da:	d4ee      	bmi.n	80063ba <__smakebuf_r+0x18>
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	e7e2      	b.n	80063ae <__smakebuf_r+0xc>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	9b01      	ldr	r3, [sp, #4]
 80063f6:	6020      	str	r0, [r4, #0]
 80063f8:	b15b      	cbz	r3, 8006412 <__smakebuf_r+0x70>
 80063fa:	4630      	mov	r0, r6
 80063fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006400:	f000 f81e 	bl	8006440 <_isatty_r>
 8006404:	b128      	cbz	r0, 8006412 <__smakebuf_r+0x70>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	431d      	orrs	r5, r3
 8006416:	81a5      	strh	r5, [r4, #12]
 8006418:	e7cf      	b.n	80063ba <__smakebuf_r+0x18>
	...

0800641c <_fstat_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	2300      	movs	r3, #0
 8006420:	4d06      	ldr	r5, [pc, #24]	@ (800643c <_fstat_r+0x20>)
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f7fc fd14 	bl	8002e56 <_fstat>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d102      	bne.n	8006438 <_fstat_r+0x1c>
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	b103      	cbz	r3, 8006438 <_fstat_r+0x1c>
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	bf00      	nop
 800643c:	200004f0 	.word	0x200004f0

08006440 <_isatty_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	2300      	movs	r3, #0
 8006444:	4d05      	ldr	r5, [pc, #20]	@ (800645c <_isatty_r+0x1c>)
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fc fd12 	bl	8002e74 <_isatty>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_isatty_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_isatty_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200004f0 	.word	0x200004f0

08006460 <_init>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

0800646c <_fini>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr
