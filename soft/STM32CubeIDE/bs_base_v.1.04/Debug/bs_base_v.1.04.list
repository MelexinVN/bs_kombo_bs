
bs_base_v.1.04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080063c0  080063c0  000073c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006594  08006594  0000810c  2**0
                  CONTENTS
  4 .ARM          00000008  08006594  08006594  00007594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800659c  0800659c  0000810c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a0  080065a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  080065a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000010c  080066b0  0000810c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  080066b0  000084fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa31  00000000  00000000  00008135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b99  00000000  00000000  00017b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0001b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  0001ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da95  00000000  00000000  0001d91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183fb  00000000  00000000  0003b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934bd  00000000  00000000  000537ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  000e6cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ec64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	080063a8 	.word	0x080063a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	080063a8 	.word	0x080063a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800016a:	601a      	str	r2, [r3, #0]
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000176:	b480      	push	{r7}
 8000178:	b083      	sub	sp, #12
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000186:	2b80      	cmp	r3, #128	@ 0x80
 8000188:	bf0c      	ite	eq
 800018a:	2301      	moveq	r3, #1
 800018c:	2300      	movne	r3, #0
 800018e:	b2db      	uxtb	r3, r3
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800019a:	b480      	push	{r7}
 800019c:	b083      	sub	sp, #12
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	460b      	mov	r3, r1
 80001a4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80001a6:	78fa      	ldrb	r2, [r7, #3]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	605a      	str	r2, [r3, #4]
}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
	...

080001b8 <usart3_transmit>:
//массив для отправки модулю
uint8_t mp3[ARR_SIZE];

//Процедура отправки одного байта
void usart3_transmit(uint8_t data) 
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
	while (!LL_USART_IsActiveFlag_TXE(USART3)) {}		//ждем отправки предыдущего байта
 80001c2:	bf00      	nop
 80001c4:	4807      	ldr	r0, [pc, #28]	@ (80001e4 <usart3_transmit+0x2c>)
 80001c6:	f7ff ffd6 	bl	8000176 <LL_USART_IsActiveFlag_TXE>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0f9      	beq.n	80001c4 <usart3_transmit+0xc>
  LL_USART_TransmitData8(USART3,data);						//отправляем очередной байт в порт
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4619      	mov	r1, r3
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <usart3_transmit+0x2c>)
 80001d6:	f7ff ffe0 	bl	800019a <LL_USART_TransmitData8>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40004800 	.word	0x40004800

080001e8 <usart3_print>:

//Процедура отправки массива
void usart3_print(uint8_t *str)
{	
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ARR_SIZE; i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e009      	b.n	800020a <usart3_print+0x22>
	{
		usart3_transmit(str[i]); //отправляем очередной байт
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffda 	bl	80001b8 <usart3_transmit>
	for (int i = 0; i < ARR_SIZE; i++)
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2b09      	cmp	r3, #9
 800020e:	ddf2      	ble.n	80001f6 <usart3_print+0xe>
	}
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <mp3_init>:

//Процедура инициализации звукового модуля
void mp3_init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	uint16_t crc = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
	uint16_t j = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	803b      	strh	r3, [r7, #0]
	
	//заполняем массив
	mp3[j++] = DF_START;
 800022a:	883b      	ldrh	r3, [r7, #0]
 800022c:	1c5a      	adds	r2, r3, #1
 800022e:	803a      	strh	r2, [r7, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b38      	ldr	r3, [pc, #224]	@ (8000314 <mp3_init+0xf8>)
 8000234:	217e      	movs	r1, #126	@ 0x7e
 8000236:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 8000238:	883b      	ldrh	r3, [r7, #0]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	803a      	strh	r2, [r7, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	4b34      	ldr	r3, [pc, #208]	@ (8000314 <mp3_init+0xf8>)
 8000242:	21ff      	movs	r1, #255	@ 0xff
 8000244:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 8000246:	883b      	ldrh	r3, [r7, #0]
 8000248:	1c5a      	adds	r2, r3, #1
 800024a:	803a      	strh	r2, [r7, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	4b31      	ldr	r3, [pc, #196]	@ (8000314 <mp3_init+0xf8>)
 8000250:	2106      	movs	r1, #6
 8000252:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_INIT;
 8000254:	883b      	ldrh	r3, [r7, #0]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	803a      	strh	r2, [r7, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <mp3_init+0xf8>)
 800025e:	213f      	movs	r1, #63	@ 0x3f
 8000260:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000262:	883b      	ldrh	r3, [r7, #0]
 8000264:	1c5a      	adds	r2, r3, #1
 8000266:	803a      	strh	r2, [r7, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <mp3_init+0xf8>)
 800026c:	2100      	movs	r1, #0
 800026e:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	803a      	strh	r2, [r7, #0]
 8000276:	461a      	mov	r2, r3
 8000278:	4b26      	ldr	r3, [pc, #152]	@ (8000314 <mp3_init+0xf8>)
 800027a:	2100      	movs	r1, #0
 800027c:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x02;
 800027e:	883b      	ldrh	r3, [r7, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	803a      	strh	r2, [r7, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b23      	ldr	r3, [pc, #140]	@ (8000314 <mp3_init+0xf8>)
 8000288:	2102      	movs	r1, #2
 800028a:	5499      	strb	r1, [r3, r2]
	
	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 800028c:	2301      	movs	r3, #1
 800028e:	717b      	strb	r3, [r7, #5]
 8000290:	e009      	b.n	80002a6 <mp3_init+0x8a>
	{
		crc += mp3[i];
 8000292:	797b      	ldrb	r3, [r7, #5]
 8000294:	4a1f      	ldr	r2, [pc, #124]	@ (8000314 <mp3_init+0xf8>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	461a      	mov	r2, r3
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4413      	add	r3, r2
 800029e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 1; i < 7; i++)
 80002a0:	797b      	ldrb	r3, [r7, #5]
 80002a2:	3301      	adds	r3, #1
 80002a4:	717b      	strb	r3, [r7, #5]
 80002a6:	797b      	ldrb	r3, [r7, #5]
 80002a8:	2b06      	cmp	r3, #6
 80002aa:	d9f2      	bls.n	8000292 <mp3_init+0x76>
	}
	crc = UINT16_MAX - crc + 1;
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	425b      	negs	r3, r3
 80002b0:	80fb      	strh	r3, [r7, #6]

	mp3[j++] = (uint8_t)(crc >> 8);
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b299      	uxth	r1, r3
 80002b8:	883b      	ldrh	r3, [r7, #0]
 80002ba:	1c5a      	adds	r2, r3, #1
 80002bc:	803a      	strh	r2, [r7, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	b2c9      	uxtb	r1, r1
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <mp3_init+0xf8>)
 80002c4:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80002c6:	883b      	ldrh	r3, [r7, #0]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	803a      	strh	r2, [r7, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	b2d9      	uxtb	r1, r3
 80002d2:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <mp3_init+0xf8>)
 80002d4:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80002d6:	883b      	ldrh	r3, [r7, #0]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	803a      	strh	r2, [r7, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <mp3_init+0xf8>)
 80002e0:	21ef      	movs	r1, #239	@ 0xef
 80002e2:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80002e4:	480b      	ldr	r0, [pc, #44]	@ (8000314 <mp3_init+0xf8>)
 80002e6:	f7ff ff7f 	bl	80001e8 <usart3_print>
	
	//пауза в 1 секунду
	uint16_t count = 1000;
 80002ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002ee:	807b      	strh	r3, [r7, #2]
	while(count--)
 80002f0:	e005      	b.n	80002fe <mp3_init+0xe2>
	{
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80002f2:	4809      	ldr	r0, [pc, #36]	@ (8000318 <mp3_init+0xfc>)
 80002f4:	f7ff ff32 	bl	800015c <LL_IWDG_ReloadCounter>
		#endif
		LL_mDelay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f004 fe65 	bl	8004fc8 <LL_mDelay>
	while(count--)
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	1e5a      	subs	r2, r3, #1
 8000302:	807a      	strh	r2, [r7, #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f4      	bne.n	80002f2 <mp3_init+0xd6>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000128 	.word	0x20000128
 8000318:	40003000 	.word	0x40003000

0800031c <mp3_play>:

//Процедура воспроизведения файла под номером
void mp3_play(uint8_t mp3_num)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	uint16_t crc = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	81fb      	strh	r3, [r7, #14]
	uint16_t j = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	817b      	strh	r3, [r7, #10]

	//заполняем массив
	mp3[j++] = DF_START;
 800032e:	897b      	ldrh	r3, [r7, #10]
 8000330:	1c5a      	adds	r2, r3, #1
 8000332:	817a      	strh	r2, [r7, #10]
 8000334:	461a      	mov	r2, r3
 8000336:	4b31      	ldr	r3, [pc, #196]	@ (80003fc <mp3_play+0xe0>)
 8000338:	217e      	movs	r1, #126	@ 0x7e
 800033a:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 800033c:	897b      	ldrh	r3, [r7, #10]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	817a      	strh	r2, [r7, #10]
 8000342:	461a      	mov	r2, r3
 8000344:	4b2d      	ldr	r3, [pc, #180]	@ (80003fc <mp3_play+0xe0>)
 8000346:	21ff      	movs	r1, #255	@ 0xff
 8000348:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 800034a:	897b      	ldrh	r3, [r7, #10]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	817a      	strh	r2, [r7, #10]
 8000350:	461a      	mov	r2, r3
 8000352:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <mp3_play+0xe0>)
 8000354:	2106      	movs	r1, #6
 8000356:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_NUM;
 8000358:	897b      	ldrh	r3, [r7, #10]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	817a      	strh	r2, [r7, #10]
 800035e:	461a      	mov	r2, r3
 8000360:	4b26      	ldr	r3, [pc, #152]	@ (80003fc <mp3_play+0xe0>)
 8000362:	2103      	movs	r1, #3
 8000364:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	817a      	strh	r2, [r7, #10]
 800036c:	461a      	mov	r2, r3
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <mp3_play+0xe0>)
 8000370:	2100      	movs	r1, #0
 8000372:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)(mp3_num >> 8);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	1219      	asrs	r1, r3, #8
 8000378:	897b      	ldrh	r3, [r7, #10]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	817a      	strh	r2, [r7, #10]
 800037e:	461a      	mov	r2, r3
 8000380:	b2c9      	uxtb	r1, r1
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <mp3_play+0xe0>)
 8000384:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)mp3_num;
 8000386:	897b      	ldrh	r3, [r7, #10]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	817a      	strh	r2, [r7, #10]
 800038c:	4619      	mov	r1, r3
 800038e:	4a1b      	ldr	r2, [pc, #108]	@ (80003fc <mp3_play+0xe0>)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	5453      	strb	r3, [r2, r1]

	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 8000394:	2301      	movs	r3, #1
 8000396:	737b      	strb	r3, [r7, #13]
 8000398:	e009      	b.n	80003ae <mp3_play+0x92>
	{
		crc += mp3[i];
 800039a:	7b7b      	ldrb	r3, [r7, #13]
 800039c:	4a17      	ldr	r2, [pc, #92]	@ (80003fc <mp3_play+0xe0>)
 800039e:	5cd3      	ldrb	r3, [r2, r3]
 80003a0:	461a      	mov	r2, r3
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	4413      	add	r3, r2
 80003a6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 1; i < 7; i++)
 80003a8:	7b7b      	ldrb	r3, [r7, #13]
 80003aa:	3301      	adds	r3, #1
 80003ac:	737b      	strb	r3, [r7, #13]
 80003ae:	7b7b      	ldrb	r3, [r7, #13]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9f2      	bls.n	800039a <mp3_play+0x7e>
	}
	crc = UINT16_MAX - crc + 1;
 80003b4:	89fb      	ldrh	r3, [r7, #14]
 80003b6:	425b      	negs	r3, r3
 80003b8:	81fb      	strh	r3, [r7, #14]

	mp3[j++] = (uint8_t)(crc >> 8);
 80003ba:	89fb      	ldrh	r3, [r7, #14]
 80003bc:	0a1b      	lsrs	r3, r3, #8
 80003be:	b299      	uxth	r1, r3
 80003c0:	897b      	ldrh	r3, [r7, #10]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	817a      	strh	r2, [r7, #10]
 80003c6:	461a      	mov	r2, r3
 80003c8:	b2c9      	uxtb	r1, r1
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <mp3_play+0xe0>)
 80003cc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80003ce:	897b      	ldrh	r3, [r7, #10]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	817a      	strh	r2, [r7, #10]
 80003d4:	461a      	mov	r2, r3
 80003d6:	89fb      	ldrh	r3, [r7, #14]
 80003d8:	b2d9      	uxtb	r1, r3
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <mp3_play+0xe0>)
 80003dc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80003de:	897b      	ldrh	r3, [r7, #10]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	817a      	strh	r2, [r7, #10]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <mp3_play+0xe0>)
 80003e8:	21ef      	movs	r1, #239	@ 0xef
 80003ea:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80003ec:	4803      	ldr	r0, [pc, #12]	@ (80003fc <mp3_play+0xe0>)
 80003ee:	f7ff fefb 	bl	80001e8 <usart3_print>
}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000128 	.word	0x20000128

08000400 <mp3_volume>:

//Процедура установки громкости звука
void mp3_volume(uint8_t vol)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	uint16_t crc = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	81fb      	strh	r3, [r7, #14]
	uint16_t j = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	813b      	strh	r3, [r7, #8]
		
	//заполняем массив
	mp3[j++] = DF_START;
 8000412:	893b      	ldrh	r3, [r7, #8]
 8000414:	1c5a      	adds	r2, r3, #1
 8000416:	813a      	strh	r2, [r7, #8]
 8000418:	461a      	mov	r2, r3
 800041a:	4b37      	ldr	r3, [pc, #220]	@ (80004f8 <mp3_volume+0xf8>)
 800041c:	217e      	movs	r1, #126	@ 0x7e
 800041e:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_VER;
 8000420:	893b      	ldrh	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	813a      	strh	r2, [r7, #8]
 8000426:	461a      	mov	r2, r3
 8000428:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <mp3_volume+0xf8>)
 800042a:	21ff      	movs	r1, #255	@ 0xff
 800042c:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_LEN;
 800042e:	893b      	ldrh	r3, [r7, #8]
 8000430:	1c5a      	adds	r2, r3, #1
 8000432:	813a      	strh	r2, [r7, #8]
 8000434:	461a      	mov	r2, r3
 8000436:	4b30      	ldr	r3, [pc, #192]	@ (80004f8 <mp3_volume+0xf8>)
 8000438:	2106      	movs	r1, #6
 800043a:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_CMD_VOL;
 800043c:	893b      	ldrh	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	813a      	strh	r2, [r7, #8]
 8000442:	461a      	mov	r2, r3
 8000444:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <mp3_volume+0xf8>)
 8000446:	2106      	movs	r1, #6
 8000448:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 800044a:	893b      	ldrh	r3, [r7, #8]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	813a      	strh	r2, [r7, #8]
 8000450:	461a      	mov	r2, r3
 8000452:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <mp3_volume+0xf8>)
 8000454:	2100      	movs	r1, #0
 8000456:	5499      	strb	r1, [r3, r2]
	mp3[j++] = 0x00;
 8000458:	893b      	ldrh	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	813a      	strh	r2, [r7, #8]
 800045e:	461a      	mov	r2, r3
 8000460:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <mp3_volume+0xf8>)
 8000462:	2100      	movs	r1, #0
 8000464:	5499      	strb	r1, [r3, r2]
	mp3[j++] = vol;
 8000466:	893b      	ldrh	r3, [r7, #8]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	813a      	strh	r2, [r7, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	4a22      	ldr	r2, [pc, #136]	@ (80004f8 <mp3_volume+0xf8>)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	5453      	strb	r3, [r2, r1]

	//рассчитываем контрольную сумму
	for (uint8_t i = 1; i < 7; i++)
 8000474:	2301      	movs	r3, #1
 8000476:	737b      	strb	r3, [r7, #13]
 8000478:	e009      	b.n	800048e <mp3_volume+0x8e>
	{
		crc += mp3[i];
 800047a:	7b7b      	ldrb	r3, [r7, #13]
 800047c:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <mp3_volume+0xf8>)
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	461a      	mov	r2, r3
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	4413      	add	r3, r2
 8000486:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 1; i < 7; i++)
 8000488:	7b7b      	ldrb	r3, [r7, #13]
 800048a:	3301      	adds	r3, #1
 800048c:	737b      	strb	r3, [r7, #13]
 800048e:	7b7b      	ldrb	r3, [r7, #13]
 8000490:	2b06      	cmp	r3, #6
 8000492:	d9f2      	bls.n	800047a <mp3_volume+0x7a>
	}
	crc = UINT16_MAX - crc + 1;
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	425b      	negs	r3, r3
 8000498:	81fb      	strh	r3, [r7, #14]

	mp3[j++] = (uint8_t)(crc >> 8);
 800049a:	89fb      	ldrh	r3, [r7, #14]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	b299      	uxth	r1, r3
 80004a0:	893b      	ldrh	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	813a      	strh	r2, [r7, #8]
 80004a6:	461a      	mov	r2, r3
 80004a8:	b2c9      	uxtb	r1, r1
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <mp3_volume+0xf8>)
 80004ac:	5499      	strb	r1, [r3, r2]
	mp3[j++] = (uint8_t)crc;
 80004ae:	893b      	ldrh	r3, [r7, #8]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	813a      	strh	r2, [r7, #8]
 80004b4:	461a      	mov	r2, r3
 80004b6:	89fb      	ldrh	r3, [r7, #14]
 80004b8:	b2d9      	uxtb	r1, r3
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <mp3_volume+0xf8>)
 80004bc:	5499      	strb	r1, [r3, r2]
	mp3[j++] = DF_ENF;
 80004be:	893b      	ldrh	r3, [r7, #8]
 80004c0:	1c5a      	adds	r2, r3, #1
 80004c2:	813a      	strh	r2, [r7, #8]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <mp3_volume+0xf8>)
 80004c8:	21ef      	movs	r1, #239	@ 0xef
 80004ca:	5499      	strb	r1, [r3, r2]
	
	//отправляем данные в порт
	usart3_print(mp3);
 80004cc:	480a      	ldr	r0, [pc, #40]	@ (80004f8 <mp3_volume+0xf8>)
 80004ce:	f7ff fe8b 	bl	80001e8 <usart3_print>
	//пауза в 100 мс
	uint16_t count = 100;
 80004d2:	2364      	movs	r3, #100	@ 0x64
 80004d4:	817b      	strh	r3, [r7, #10]
	while(count--)
 80004d6:	e005      	b.n	80004e4 <mp3_volume+0xe4>
	{
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80004d8:	4808      	ldr	r0, [pc, #32]	@ (80004fc <mp3_volume+0xfc>)
 80004da:	f7ff fe3f 	bl	800015c <LL_IWDG_ReloadCounter>
		#endif
		LL_mDelay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f004 fd72 	bl	8004fc8 <LL_mDelay>
	while(count--)
 80004e4:	897b      	ldrh	r3, [r7, #10]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	817a      	strh	r2, [r7, #10]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1f4      	bne.n	80004d8 <mp3_volume+0xd8>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000128 	.word	0x20000128
 80004fc:	40003000 	.word	0x40003000

08000500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <__NVIC_GetPriorityGrouping+0x18>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	f003 0307 	and.w	r3, r3, #7
}
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	2b00      	cmp	r3, #0
 800052c:	db0b      	blt.n	8000546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f003 021f 	and.w	r2, r3, #31
 8000534:	4906      	ldr	r1, [pc, #24]	@ (8000550 <__NVIC_EnableIRQ+0x34>)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	095b      	lsrs	r3, r3, #5
 800053c:	2001      	movs	r0, #1
 800053e:	fa00 f202 	lsl.w	r2, r0, r2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	@ 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000616:	699a      	ldr	r2, [r3, #24]
 8000618:	4907      	ldr	r1, [pc, #28]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4013      	ands	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800063c:	b490      	push	{r4, r7}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	461a      	mov	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	4413      	add	r3, r2
 8000652:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000654:	6822      	ldr	r2, [r4, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	fa93 f3a3 	rbit	r3, r3
 8000660:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	fab3 f383 	clz	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	210f      	movs	r1, #15
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	401a      	ands	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	fa93 f3a3 	rbit	r3, r3
 8000680:	61bb      	str	r3, [r7, #24]
  return result;
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	6023      	str	r3, [r4, #0]
}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bc90      	pop	{r4, r7}
 800069e:	4770      	bx	lr

080006a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	43db      	mvns	r3, r3
 80006b6:	401a      	ands	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	fa93 f3a3 	rbit	r3, r3
 80006c4:	613b      	str	r3, [r7, #16]
  return result;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	408b      	lsls	r3, r1
 80006d4:	431a      	orrs	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60da      	str	r2, [r3, #12]
}
 80006da:	bf00      	nop
 80006dc:	371c      	adds	r7, #28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	615a      	str	r2, [r3, #20]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
	...

08000704 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800070e:	4a13      	ldr	r2, [pc, #76]	@ (800075c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	3302      	adds	r3, #2
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	0c1b      	lsrs	r3, r3, #16
 800071e:	43db      	mvns	r3, r3
 8000720:	ea02 0103 	and.w	r1, r2, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	0c1b      	lsrs	r3, r3, #16
 8000728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	fa93 f3a3 	rbit	r3, r3
 8000730:	60bb      	str	r3, [r7, #8]
  return result;
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	fab3 f383 	clz	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	fa03 f202 	lsl.w	r2, r3, r2
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	430a      	orrs	r2, r1
 800074a:	3302      	adds	r3, #2
 800074c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40010000 	.word	0x40010000

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800077e:	2010      	movs	r0, #16
 8000780:	f7ff ff44 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000784:	2020      	movs	r0, #32
 8000786:	f7ff ff41 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800078a:	2004      	movs	r0, #4
 800078c:	f7ff ff3e 	bl	800060c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000790:	2008      	movs	r0, #8
 8000792:	f7ff ff3b 	bl	800060c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000796:	4989      	ldr	r1, [pc, #548]	@ (80009bc <MX_GPIO_Init+0x25c>)
 8000798:	4889      	ldr	r0, [pc, #548]	@ (80009c0 <MX_GPIO_Init+0x260>)
 800079a:	f7ff ffa3 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, CE_Pin|CSN_Pin|LL_GPIO_PIN_8);
 800079e:	4989      	ldr	r1, [pc, #548]	@ (80009c4 <MX_GPIO_Init+0x264>)
 80007a0:	4889      	ldr	r0, [pc, #548]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80007a2:	f7ff ff9f 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_14);
 80007a6:	4989      	ldr	r1, [pc, #548]	@ (80009cc <MX_GPIO_Init+0x26c>)
 80007a8:	4889      	ldr	r0, [pc, #548]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80007aa:	f7ff ff9b 	bl	80006e4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80007ae:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <MX_GPIO_Init+0x25c>)
 80007b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	487f      	ldr	r0, [pc, #508]	@ (80009c0 <MX_GPIO_Init+0x260>)
 80007c4:	f004 f88f 	bl	80048e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|LL_GPIO_PIN_8;
 80007c8:	4b7e      	ldr	r3, [pc, #504]	@ (80009c4 <MX_GPIO_Init+0x264>)
 80007ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	487a      	ldr	r0, [pc, #488]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80007de:	f004 f882 	bl	80048e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_14;
 80007e2:	4b7a      	ldr	r3, [pc, #488]	@ (80009cc <MX_GPIO_Init+0x26c>)
 80007e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4876      	ldr	r0, [pc, #472]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80007f8:	f004 f875 	bl	80048e6 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE2);
 80007fc:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff7f 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE15);
 8000806:	4973      	ldr	r1, [pc, #460]	@ (80009d4 <MX_GPIO_Init+0x274>)
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff7b 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE3);
 800080e:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff76 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE4);
 8000818:	496f      	ldr	r1, [pc, #444]	@ (80009d8 <MX_GPIO_Init+0x278>)
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff72 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 8000820:	496e      	ldr	r1, [pc, #440]	@ (80009dc <MX_GPIO_Init+0x27c>)
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff6e 	bl	8000704 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000828:	2304      	movs	r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800082c:	2301      	movs	r3, #1
 800082e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000830:	2300      	movs	r3, #0
 8000832:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000834:	2302      	movs	r3, #2
 8000836:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	4618      	mov	r0, r3
 800083e:	f003 ff1b 	bl	8004678 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000846:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000848:	2301      	movs	r3, #1
 800084a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800084c:	2300      	movs	r3, #0
 800084e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000850:	2302      	movs	r3, #2
 8000852:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4618      	mov	r0, r3
 800085a:	f003 ff0d 	bl	8004678 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800085e:	2308      	movs	r3, #8
 8000860:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000862:	2301      	movs	r3, #1
 8000864:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000866:	2300      	movs	r3, #0
 8000868:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800086a:	2302      	movs	r3, #2
 800086c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f003 ff00 	bl	8004678 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000878:	2310      	movs	r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800087c:	2301      	movs	r3, #1
 800087e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000880:	2300      	movs	r3, #0
 8000882:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000884:	2302      	movs	r3, #2
 8000886:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fef3 	bl	8004678 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000892:	2320      	movs	r3, #32
 8000894:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000896:	2301      	movs	r3, #1
 8000898:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800089a:	2300      	movs	r3, #0
 800089c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800089e:	2302      	movs	r3, #2
 80008a0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fee6 	bl	8004678 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(IRQ_GPIO_Port, IRQ_Pin, LL_GPIO_MODE_FLOATING);
 80008ac:	2204      	movs	r2, #4
 80008ae:	f240 4104 	movw	r1, #1028	@ 0x404
 80008b2:	4845      	ldr	r0, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008b4:	f7ff fec2 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TIME_GPIO_Port, TIME_Pin, LL_GPIO_MODE_INPUT);
 80008b8:	2208      	movs	r2, #8
 80008ba:	4949      	ldr	r1, [pc, #292]	@ (80009e0 <MX_GPIO_Init+0x280>)
 80008bc:	4842      	ldr	r0, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008be:	f7ff febd 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(NEXT_GPIO_Port, NEXT_Pin, LL_GPIO_MODE_INPUT);
 80008c2:	2208      	movs	r2, #8
 80008c4:	f640 0108 	movw	r1, #2056	@ 0x808
 80008c8:	4841      	ldr	r0, [pc, #260]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008ca:	f7ff feb7 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RST_GPIO_Port, RST_Pin, LL_GPIO_MODE_INPUT);
 80008ce:	2208      	movs	r2, #8
 80008d0:	f241 0110 	movw	r1, #4112	@ 0x1010
 80008d4:	483e      	ldr	r0, [pc, #248]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008d6:	f7ff feb1 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SET_GPIO_Port, SET_Pin, LL_GPIO_MODE_INPUT);
 80008da:	2208      	movs	r2, #8
 80008dc:	f242 0120 	movw	r1, #8224	@ 0x2020
 80008e0:	483b      	ldr	r0, [pc, #236]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008e2:	f7ff feab 	bl	800063c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinPull(TIME_GPIO_Port, TIME_Pin, LL_GPIO_PULL_UP);
 80008e6:	2201      	movs	r2, #1
 80008e8:	493d      	ldr	r1, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x280>)
 80008ea:	4837      	ldr	r0, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0x268>)
 80008ec:	f7ff fed8 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(NEXT_GPIO_Port, NEXT_Pin, LL_GPIO_PULL_UP);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f640 0108 	movw	r1, #2056	@ 0x808
 80008f6:	4836      	ldr	r0, [pc, #216]	@ (80009d0 <MX_GPIO_Init+0x270>)
 80008f8:	f7ff fed2 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RST_GPIO_Port, RST_Pin, LL_GPIO_PULL_UP);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000902:	4833      	ldr	r0, [pc, #204]	@ (80009d0 <MX_GPIO_Init+0x270>)
 8000904:	f7ff fecc 	bl	80006a0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SET_GPIO_Port, SET_Pin, LL_GPIO_PULL_UP);
 8000908:	2201      	movs	r2, #1
 800090a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800090e:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x270>)
 8000910:	f7ff fec6 	bl	80006a0 <LL_GPIO_SetPinPull>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000914:	f7ff fdf4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000918:	4603      	mov	r3, r0
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe42 	bl	80005a8 <NVIC_EncodePriority>
 8000924:	4603      	mov	r3, r0
 8000926:	4619      	mov	r1, r3
 8000928:	2008      	movs	r0, #8
 800092a:	f7ff fe13 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff fdf4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000934:	f7ff fde4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000938:	4603      	mov	r3, r0
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe32 	bl	80005a8 <NVIC_EncodePriority>
 8000944:	4603      	mov	r3, r0
 8000946:	4619      	mov	r1, r3
 8000948:	2009      	movs	r0, #9
 800094a:	f7ff fe03 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800094e:	2009      	movs	r0, #9
 8000950:	f7ff fde4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000954:	f7ff fdd4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000958:	4603      	mov	r3, r0
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe22 	bl	80005a8 <NVIC_EncodePriority>
 8000964:	4603      	mov	r3, r0
 8000966:	4619      	mov	r1, r3
 8000968:	200a      	movs	r0, #10
 800096a:	f7ff fdf3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 800096e:	200a      	movs	r0, #10
 8000970:	f7ff fdd4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000974:	f7ff fdc4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000978:	4603      	mov	r3, r0
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe12 	bl	80005a8 <NVIC_EncodePriority>
 8000984:	4603      	mov	r3, r0
 8000986:	4619      	mov	r1, r3
 8000988:	2017      	movs	r0, #23
 800098a:	f7ff fde3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800098e:	2017      	movs	r0, #23
 8000990:	f7ff fdc4 	bl	800051c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000994:	f7ff fdb4 	bl	8000500 <__NVIC_GetPriorityGrouping>
 8000998:	4603      	mov	r3, r0
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe02 	bl	80005a8 <NVIC_EncodePriority>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4619      	mov	r1, r3
 80009a8:	2028      	movs	r0, #40	@ 0x28
 80009aa:	f7ff fdd3 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	@ 0x28
 80009b0:	f7ff fdb4 	bl	800051c <__NVIC_EnableIRQ>

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	04200020 	.word	0x04200020
 80009c0:	40011000 	.word	0x40011000
 80009c4:	04011819 	.word	0x04011819
 80009c8:	40010800 	.word	0x40010800
 80009cc:	04500050 	.word	0x04500050
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	f0000003 	.word	0xf0000003
 80009d8:	000f0001 	.word	0x000f0001
 80009dc:	00f00001 	.word	0x00f00001
 80009e0:	04800080 	.word	0x04800080

080009e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f003 f85b 	bl	8003adc <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f001 fe96 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000134 	.word	0x20000134
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <HAL_I2C_MspInit+0x70>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d123      	bne.n	8000aa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a78:	23c0      	movs	r3, #192	@ 0xc0
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <HAL_I2C_MspInit+0x78>)
 8000a8c:	f002 fea2 	bl	80037d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9a:	61d3      	str	r3, [r2, #28]
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_I2C_MspInit+0x74>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <LL_GPIO_SetOutputPin>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	611a      	str	r2, [r3, #16]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <LL_GPIO_ResetOutputPin>:
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	615a      	str	r2, [r3, #20]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <interrupt_off>:
char sreg_temp;				//переменная значения регистра статуса
#endif

//Процедура отключения прерываний
void interrupt_off(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
	#endif
	
	#ifdef STM32_LL
	__disable_irq();				//запрещение всех прерываний
	#endif
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <interrupt_on>:

//Процедура включения прерываний
void interrupt_on(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000b0c:	b662      	cpsie	i
}
 8000b0e:	bf00      	nop
	#endif
	
	#ifdef STM32_LL
	__enable_irq();						//разрешение всех прерываний
	#endif
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <uni_delay_us>:

//Функция микросекундной задержки для разных микроконтроллеров
void uni_delay_us(uint32_t us)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	#ifdef ATMEGA88
	while(us--)	_delay_us(1u);				
	#endif
	
	#ifdef STM32_LL
	delay_us(us);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f001 f905 	bl	8001d30 <delay_us>
	#endif
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <nrf24_read_reg>:

//Функция чтения регистра модуля
uint8_t nrf24_read_reg(uint8_t addr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	uint8_t dt = 0, cmd;				//переменные данных и команды
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
	CSN_ON();										//прижимаем ногу CS к земле
 8000b3e:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000b42:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <nrf24_read_reg+0x50>)
 8000b44:	f7ff ffc9 	bl	8000ada <LL_GPIO_ResetOutputPin>
	dt = spi_change_byte(addr);	//отправка адреса регистра, прием
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fada 	bl	8001104 <spi_change_byte>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
	
	//если адрес равен адресу регистра статуса то и возварщаем его состояние	
	if (addr != STATUS)					//а если не равен
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d007      	beq.n	8000b6a <nrf24_read_reg+0x3a>
	{
		cmd = 0xFF;								//команда NOP для получения данных
 8000b5a:	23ff      	movs	r3, #255	@ 0xff
 8000b5c:	73bb      	strb	r3, [r7, #14]
		dt = spi_change_byte(cmd);//
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 facf 	bl	8001104 <spi_change_byte>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
	}
	CSN_OFF();									//поднимаем ногу CS
 8000b6a:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <nrf24_read_reg+0x50>)
 8000b70:	f7ff ffa4 	bl	8000abc <LL_GPIO_SetOutputPin>
	return dt;									//возвращаемое значение
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010800 	.word	0x40010800

08000b84 <nrf24_write_reg>:

//Процедура записи регистра в модуль
void nrf24_write_reg(uint8_t addr, uint8_t dt)		
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;					//включаем бит записи в адрес	
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	71fb      	strb	r3, [r7, #7]
	CSN_ON();										//прижимаем ногу CS к земле
 8000b9c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <nrf24_write_reg+0x44>)
 8000ba2:	f7ff ff9a 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fa8b 	bl	80010c4 <spi_send_byte>
	spi_send_byte(dt);					//отправляем значение
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa87 	bl	80010c4 <spi_send_byte>
	CSN_OFF();									//поднимаем ногу CS
 8000bb6:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000bba:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <nrf24_write_reg+0x44>)
 8000bbc:	f7ff ff7e 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800

08000bcc <nrf24_toggle_features>:

//Процедура активации дополнительных команд
void nrf24_toggle_features(void)							
{	
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	uint8_t dt = ACTIVATE;	//переменная с командой активации
 8000bd2:	2350      	movs	r3, #80	@ 0x50
 8000bd4:	71fb      	strb	r3, [r7, #7]
	CSN_ON();								//прижимаем ногу CS к земле
 8000bd6:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000bda:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <nrf24_toggle_features+0x40>)
 8000bdc:	f7ff ff7d 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);			//отправляем команду
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa6e 	bl	80010c4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff ff95 	bl	8000b18 <uni_delay_us>
	
	dt = 0x73;							//следующая команда
 8000bee:	2373      	movs	r3, #115	@ 0x73
 8000bf0:	71fb      	strb	r3, [r7, #7]
	spi_send_byte(dt);			//отправляем команду
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa65 	bl	80010c4 <spi_send_byte>
	CSN_OFF();							//поднимаем ногу CS
 8000bfa:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000bfe:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <nrf24_toggle_features+0x40>)
 8000c00:	f7ff ff5c 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010800 	.word	0x40010800

08000c10 <nrf24_read_buf>:

//Процедура чтения буфера
void nrf24_read_buf(uint8_t addr,uint8_t *p_buf,uint8_t bytes)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
	CSN_ON();										//прижимаем ногу CS к земле
 8000c20:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c24:	4811      	ldr	r0, [pc, #68]	@ (8000c6c <nrf24_read_buf+0x5c>)
 8000c26:	f7ff ff58 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fa49 	bl	80010c4 <spi_send_byte>
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e00b      	b.n	8000c50 <nrf24_read_buf+0x40>
	{
		p_buf[i] = spi_change_byte(addr);//получаем очередной байт
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	18d4      	adds	r4, r2, r3
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa5f 	bl	8001104 <spi_change_byte>
 8000c46:	4603      	mov	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < bytes; i++) 
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3ef      	bcc.n	8000c38 <nrf24_read_buf+0x28>
	}
	CSN_OFF();									//поднимаем ногу CS
 8000c58:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <nrf24_read_buf+0x5c>)
 8000c5e:	f7ff ff2d 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010800 	.word	0x40010800

08000c70 <nrf24_write_buf>:

//Процедура записи буфера
void nrf24_write_buf(uint8_t addr,uint8_t *p_buf,uint8_t bytes)	
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;					//включаем бит записи в адрес
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f043 0320 	orr.w	r3, r3, #32
 8000c86:	71fb      	strb	r3, [r7, #7]
	CSN_ON();										//прижимаем ногу CS к земле
 8000c88:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000c8c:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <nrf24_write_buf+0x64>)
 8000c8e:	f7ff ff24 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);				//отправляем адрес
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fa15 	bl	80010c4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff3c 	bl	8000b18 <uni_delay_us>
	
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e009      	b.n	8000cba <nrf24_write_buf+0x4a>
	{
		spi_send_byte(p_buf[i]);		//отправляем очередной байт
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fa08 	bl	80010c4 <spi_send_byte>
	for (uint8_t i = 0; i < bytes; i++) 
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3f1      	bcc.n	8000ca6 <nrf24_write_buf+0x36>
	}
	CSN_OFF();										//поднимаем ногу CS
 8000cc2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000cc6:	4803      	ldr	r0, [pc, #12]	@ (8000cd4 <nrf24_write_buf+0x64>)
 8000cc8:	f7ff fef8 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <nrf24_flush_rx>:

//Процедура очистки буфера приема
void nrf24_flush_rx(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	uint8_t dt = FLUSH_RX;				//переменная с командой очистки
 8000cde:	23e2      	movs	r3, #226	@ 0xe2
 8000ce0:	71fb      	strb	r3, [r7, #7]
	CSN_ON();											//прижимаем ногу CS к земле
 8000ce2:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000ce6:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <nrf24_flush_rx+0x34>)
 8000ce8:	f7ff fef7 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);						//отправка команды
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f9e8 	bl	80010c4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff0f 	bl	8000b18 <uni_delay_us>
	
	CSN_OFF();										//поднимаем ногу CS
 8000cfa:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000cfe:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <nrf24_flush_rx+0x34>)
 8000d00:	f7ff fedc 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010800 	.word	0x40010800

08000d10 <nrf24_flush_tx>:

//Процедура очистки буфера передачи
void nrf24_flush_tx(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	uint8_t dt = FLUSH_TX;				//переменная с командой очистки
 8000d16:	23e1      	movs	r3, #225	@ 0xe1
 8000d18:	71fb      	strb	r3, [r7, #7]
	CSN_ON();											//прижимаем ногу CS к земле
 8000d1a:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <nrf24_flush_tx+0x34>)
 8000d20:	f7ff fedb 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(dt);						//отправка команды
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f9cc 	bl	80010c4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fef3 	bl	8000b18 <uni_delay_us>
	
	CSN_OFF();										//поднимаем ногу CS
 8000d32:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000d36:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <nrf24_flush_tx+0x34>)
 8000d38:	f7ff fec0 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010800 	.word	0x40010800

08000d48 <nrf24_rx_mode>:

//Процедура включение режима приемника
void nrf24_rx_mode(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t regval = 0x00;						//переменная для значения регистра
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
	regval = nrf24_read_reg(CONFIG);	//сохраняем значение регистра конфигурации
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff feec 	bl	8000b30 <nrf24_read_reg>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);	
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f043 0303 	orr.w	r3, r3, #3
 8000d62:	71fb      	strb	r3, [r7, #7]
	nrf24_write_reg(CONFIG,regval);		//возвращаем значение регистра статуса
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4619      	mov	r1, r3
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff0b 	bl	8000b84 <nrf24_write_reg>
	//записываем  адрес передатчика
	nrf24_write_buf(TX_ADDR, tx_addr_1, TX_ADR_WIDTH);	
 8000d6e:	2203      	movs	r2, #3
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <nrf24_rx_mode+0x5c>)
 8000d72:	2010      	movs	r0, #16
 8000d74:	f7ff ff7c 	bl	8000c70 <nrf24_write_buf>
	//записываем адрес приемника
	nrf24_write_buf(RX_ADDR_P0, tx_addr_1, TX_ADR_WIDTH);	
 8000d78:	2203      	movs	r2, #3
 8000d7a:	490a      	ldr	r1, [pc, #40]	@ (8000da4 <nrf24_rx_mode+0x5c>)
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f7ff ff77 	bl	8000c70 <nrf24_write_buf>
	CE_SET();							//поднимаем ногу CE
 8000d82:	f640 0108 	movw	r1, #2056	@ 0x808
 8000d86:	4808      	ldr	r0, [pc, #32]	@ (8000da8 <nrf24_rx_mode+0x60>)
 8000d88:	f7ff fe98 	bl	8000abc <LL_GPIO_SetOutputPin>
	
	uni_delay_us(150);				//залержка
 8000d8c:	2096      	movs	r0, #150	@ 0x96
 8000d8e:	f7ff fec3 	bl	8000b18 <uni_delay_us>
	
	//очистка буферов
	nrf24_flush_rx();
 8000d92:	f7ff ffa1 	bl	8000cd8 <nrf24_flush_rx>
	nrf24_flush_tx();
 8000d96:	f7ff ffbb 	bl	8000d10 <nrf24_flush_tx>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004
 8000da8:	40010800 	.word	0x40010800

08000dac <nrf24_tx_mode>:

//Процедура включения режима передатчика
void nrf24_tx_mode(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	//записываем адрес передатчика
	nrf24_write_buf(TX_ADDR, tx_addr_0, TX_ADR_WIDTH);		
 8000db0:	2203      	movs	r2, #3
 8000db2:	490a      	ldr	r1, [pc, #40]	@ (8000ddc <nrf24_tx_mode+0x30>)
 8000db4:	2010      	movs	r0, #16
 8000db6:	f7ff ff5b 	bl	8000c70 <nrf24_write_buf>
	//записываем адрес приемника
	nrf24_write_buf(RX_ADDR_P0, tx_addr_0, TX_ADR_WIDTH);	
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <nrf24_tx_mode+0x30>)
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f7ff ff56 	bl	8000c70 <nrf24_write_buf>
	CE_RESET();							//опускаем ногу CE
 8000dc4:	f640 0108 	movw	r1, #2056	@ 0x808
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <nrf24_tx_mode+0x34>)
 8000dca:	f7ff fe86 	bl	8000ada <LL_GPIO_ResetOutputPin>
	//очищаем оба буфера
	nrf24_flush_rx();
 8000dce:	f7ff ff83 	bl	8000cd8 <nrf24_flush_rx>
	nrf24_flush_tx();
 8000dd2:	f7ff ff9d 	bl	8000d10 <nrf24_flush_tx>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	40010800 	.word	0x40010800

08000de4 <nrf24_transmit>:

//Процедура передачи данных в модуль
void nrf24_transmit(uint8_t addr,uint8_t *p_buf,uint8_t bytes)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
	CE_RESET();						//опускаем ногу CE
 8000df4:	f640 0108 	movw	r1, #2056	@ 0x808
 8000df8:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <nrf24_transmit+0x70>)
 8000dfa:	f7ff fe6e 	bl	8000ada <LL_GPIO_ResetOutputPin>
	CSN_ON();							//прижимаем ногу CS к земле
 8000dfe:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000e02:	4814      	ldr	r0, [pc, #80]	@ (8000e54 <nrf24_transmit+0x70>)
 8000e04:	f7ff fe69 	bl	8000ada <LL_GPIO_ResetOutputPin>
	spi_send_byte(addr);	//отправляем адрес
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f95a 	bl	80010c4 <spi_send_byte>
	
	uni_delay_us(1);				//залержка
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fe81 	bl	8000b18 <uni_delay_us>
	
	//цикл на нужное количество байт
	for (uint8_t i = 0; i < bytes; i++) 
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e009      	b.n	8000e30 <nrf24_transmit+0x4c>
	{
		spi_send_byte(p_buf[i]);	//отправляем очередной байт
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f94d 	bl	80010c4 <spi_send_byte>
	for (uint8_t i = 0; i < bytes; i++) 
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d3f1      	bcc.n	8000e1c <nrf24_transmit+0x38>
	}
	CSN_OFF();						//поднимаем ногу CS
 8000e38:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <nrf24_transmit+0x70>)
 8000e3e:	f7ff fe3d 	bl	8000abc <LL_GPIO_SetOutputPin>
	CE_SET();							//Поднимаем ногу CE
 8000e42:	f640 0108 	movw	r1, #2056	@ 0x808
 8000e46:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <nrf24_transmit+0x70>)
 8000e48:	f7ff fe38 	bl	8000abc <LL_GPIO_SetOutputPin>
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010800 	.word	0x40010800

08000e58 <nrf24_send>:

//Процедура отправки данных в эфир
void nrf24_send(uint8_t *p_buf)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	interrupt_off();
 8000e60:	f7ff fe4a 	bl	8000af8 <interrupt_off>
	
	uint8_t regval = 0x00;						//переменная для отправки в конфигурационный регистр
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
	nrf24_tx_mode();									//включаем режим передачи
 8000e68:	f7ff ffa0 	bl	8000dac <nrf24_tx_mode>
	regval = nrf24_read_reg(CONFIG);	//сохраняем значения конфигурационного региста
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe5f 	bl	8000b30 <nrf24_read_reg>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	73fb      	strb	r3, [r7, #15]
	regval &= ~(1<<PRIM_RX);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
	nrf24_write_reg(CONFIG, regval);	//записываем новое значение конфигурационного регистра
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fe7a 	bl	8000b84 <nrf24_write_reg>
	
	uni_delay_us(150);				//залержка
 8000e90:	2096      	movs	r0, #150	@ 0x96
 8000e92:	f7ff fe41 	bl	8000b18 <uni_delay_us>
	
	nrf24_transmit(WR_TX_PLOAD, p_buf, TX_PLOAD_WIDTH);//отправка данных
 8000e96:	220b      	movs	r2, #11
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	20a0      	movs	r0, #160	@ 0xa0
 8000e9c:	f7ff ffa2 	bl	8000de4 <nrf24_transmit>
	CE_SET();									//поднимаем ногу CE
 8000ea0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000ea4:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <nrf24_send+0x70>)
 8000ea6:	f7ff fe09 	bl	8000abc <LL_GPIO_SetOutputPin>
	
	uni_delay_us(15);				//залержка
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f7ff fe34 	bl	8000b18 <uni_delay_us>
	
	CE_RESET();								//опускаем ногу CE
 8000eb0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <nrf24_send+0x70>)
 8000eb6:	f7ff fe10 	bl	8000ada <LL_GPIO_ResetOutputPin>
	
	interrupt_on();
 8000eba:	f7ff fe25 	bl	8000b08 <interrupt_on>
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010800 	.word	0x40010800

08000ecc <nrf24_pins_init>:

//Процедура инициализации пинов, подключенных к радиомодулю
void nrf24_pins_init(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	CSN_PORT |= 1<<CSN_PIN;				//высокий уровень на CSN
	
	IRQ_DDR |= 0<<IRQ_DD;				//IRQ на вход
	IRQ_PORT |= 0<<IRQ_PIN;				//отключаем внутренний пуллап
	#endif
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <nrf24_init>:

//Процедура инициализации модуля
void nrf24_init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	nrf24_pins_init();				//инициализируем пины
 8000edc:	f7ff fff6 	bl	8000ecc <nrf24_pins_init>
	CE_RESET();								//опускаем к земле вывод CE
 8000ee0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000ee4:	4823      	ldr	r0, [pc, #140]	@ (8000f74 <nrf24_init+0x9c>)
 8000ee6:	f7ff fdf8 	bl	8000ada <LL_GPIO_ResetOutputPin>
	
	uni_delay_us(5000);				//залержка
 8000eea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eee:	f7ff fe13 	bl	8000b18 <uni_delay_us>
	
	//записываем конфигурационный байт, 
	//устанавливаем бит PWR_UP bit, включаем CRC(1 байт) &Prim_RX:0
	nrf24_write_reg(CONFIG, 0x0a);		
 8000ef2:	210a      	movs	r1, #10
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fe45 	bl	8000b84 <nrf24_write_reg>
	
	uni_delay_us(5000);				//залержка
 8000efa:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000efe:	f7ff fe0b 	bl	8000b18 <uni_delay_us>
	
	nrf24_write_reg(EN_AA, 0x00);					//отключаем автоподтверждение
 8000f02:	2100      	movs	r1, #0
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fe3d 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(EN_RXADDR, 0x01);			//разрешаем Pipe0
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff fe39 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(SETUP_AW, 0x01);			//устанавливаем размер адреса 3 байта
 8000f12:	2101      	movs	r1, #1
 8000f14:	2003      	movs	r0, #3
 8000f16:	f7ff fe35 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(SETUP_RETR, 0x00);		//устанавливаем период авто ретрансляции 1500мкс, 15 попыток
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f7ff fe31 	bl	8000b84 <nrf24_write_reg>
	nrf24_toggle_features();							//активируем дополнительные команды
 8000f22:	f7ff fe53 	bl	8000bcc <nrf24_toggle_features>
	nrf24_write_reg(FEATURE, 0x07);				//устанавливаем стандартные значения регистра FEATURE 
 8000f26:	2107      	movs	r1, #7
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f7ff fe2b 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(DYNPD, 0);						//отключаем динамический размер полезной нагрузки
 8000f2e:	2100      	movs	r1, #0
 8000f30:	201c      	movs	r0, #28
 8000f32:	f7ff fe27 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(STATUS, 0x70);				//опускаем флаг прерывания
 8000f36:	2170      	movs	r1, #112	@ 0x70
 8000f38:	2007      	movs	r0, #7
 8000f3a:	f7ff fe23 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(RF_CH, CHANNEL);			//устанавливаем канал
 8000f3e:	2110      	movs	r1, #16
 8000f40:	2005      	movs	r0, #5
 8000f42:	f7ff fe1f 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_reg(RF_SETUP, MAX_POWER);	//устанавливаем мощность и скорость передачи
 8000f46:	2106      	movs	r1, #6
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f7ff fe1b 	bl	8000b84 <nrf24_write_reg>
	nrf24_write_buf(TX_ADDR, tx_addr_0, TX_ADR_WIDTH);		//запись адреса передачи
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4909      	ldr	r1, [pc, #36]	@ (8000f78 <nrf24_init+0xa0>)
 8000f52:	2010      	movs	r0, #16
 8000f54:	f7ff fe8c 	bl	8000c70 <nrf24_write_buf>
	nrf24_write_buf(RX_ADDR_P1, tx_addr_0, TX_ADR_WIDTH);	//запись адреса приема
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <nrf24_init+0xa0>)
 8000f5c:	200b      	movs	r0, #11
 8000f5e:	f7ff fe87 	bl	8000c70 <nrf24_write_buf>
	nrf24_write_reg(RX_PW_P0, TX_PLOAD_WIDTH); //устанавливаем число байт полезной нагрузки
 8000f62:	210b      	movs	r1, #11
 8000f64:	2011      	movs	r0, #17
 8000f66:	f7ff fe0d 	bl	8000b84 <nrf24_write_reg>
	nrf24_rx_mode();					//пока уходим в режим приёмника
 8000f6a:	f7ff feed 	bl	8000d48 <nrf24_rx_mode>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000000 	.word	0x20000000

08000f7c <irq_callback>:

//Процедура обработки прерывания
void irq_callback(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	interrupt_off();
 8000f82:	f7ff fdb9 	bl	8000af8 <interrupt_off>
	
	uint8_t status = 0x01;				//переменная статуса
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
	
	uni_delay_us(10);				//залержка
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f7ff fdc4 	bl	8000b18 <uni_delay_us>
	
	status = nrf24_read_reg(STATUS);	//читаем значения регистра статуса
 8000f90:	2007      	movs	r0, #7
 8000f92:	f7ff fdcd 	bl	8000b30 <nrf24_read_reg>
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	if (status & RX_DR)								//если есть данные на прием
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <irq_callback+0x40>
	{
		nrf24_read_buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH);	//чтение буфера
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	4916      	ldr	r1, [pc, #88]	@ (8001000 <irq_callback+0x84>)
 8000fa8:	2061      	movs	r0, #97	@ 0x61
 8000faa:	f7ff fe31 	bl	8000c10 <nrf24_read_buf>
		nrf24_write_reg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 8000fae:	2140      	movs	r1, #64	@ 0x40
 8000fb0:	2007      	movs	r0, #7
 8000fb2:	f7ff fde7 	bl	8000b84 <nrf24_write_reg>
		f_rx = 1;												//поднимаем флаг приема
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <irq_callback+0x88>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
	}
	if (status & TX_DS)								//если данные успешно отправлены
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <irq_callback+0x5e>
	{
		nrf24_write_reg(STATUS, 0x20);	//очищаем все биты кроме пятого
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	2007      	movs	r0, #7
 8000fca:	f7ff fddb 	bl	8000b84 <nrf24_write_reg>
		nrf24_rx_mode();								//переходим в режим приема
 8000fce:	f7ff febb 	bl	8000d48 <nrf24_rx_mode>
		f_tx = 1;												//поднимаем флаг передачи
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <irq_callback+0x8c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e00c      	b.n	8000ff4 <irq_callback+0x78>
	}
	else if (status & MAX_RT)					//если превышение количества попыток отправки
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <irq_callback+0x78>
	{
		nrf24_write_reg(STATUS, 0x10);	//однуление всех остальных битов, кроме 4го
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f7ff fdcc 	bl	8000b84 <nrf24_write_reg>
		nrf24_flush_tx();								//очистка буфера отправки
 8000fec:	f7ff fe90 	bl	8000d10 <nrf24_flush_tx>
		nrf24_rx_mode();								//переходим в режим приема
 8000ff0:	f7ff feaa 	bl	8000d48 <nrf24_rx_mode>
	}
	
	interrupt_on();
 8000ff4:	f7ff fd88 	bl	8000b08 <interrupt_on>

}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000188 	.word	0x20000188
 8001004:	2000019f 	.word	0x2000019f
 8001008:	200001a0 	.word	0x200001a0

0800100c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b02      	cmp	r3, #2
 8001060:	d101      	bne.n	8001066 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	330c      	adds	r3, #12
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	330c      	adds	r3, #12
 800109c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <spi_init>:

#include "kombo_spi.h"				//добавляем заголовочный файл

//Процедура инициализации SPI
void spi_init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	PORTB &= ~((1<<PB2)|(1<<PB3)|(1<<PB5));				//низкий уровень
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
	#endif
	
	#ifdef STM32_LL
	LL_SPI_Enable(SPI1);										//включаем spi, основная инициализация генерируется автоматически
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <spi_init+0x10>)
 80010b6:	f7ff ffa9 	bl	800100c <LL_SPI_Enable>
	#endif
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013000 	.word	0x40013000

080010c4 <spi_send_byte>:

//Процедура отправки байта 
void spi_send_byte(uint8_t byte)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	SPDR = byte;				//записываем байт в регистр
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся
	#endif
	
	#ifdef STM32_LL
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)) {}
 80010ce:	bf00      	nop
 80010d0:	480b      	ldr	r0, [pc, #44]	@ (8001100 <spi_send_byte+0x3c>)
 80010d2:	f7ff ffbc 	bl	800104e <LL_SPI_IsActiveFlag_TXE>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f9      	beq.n	80010d0 <spi_send_byte+0xc>
	LL_SPI_TransmitData8 (SPI1, byte);				//записываем адрес с командой записи
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	@ (8001100 <spi_send_byte+0x3c>)
 80010e2:	f7ff ffd3 	bl	800108c <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)) {}
 80010e6:	bf00      	nop
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <spi_send_byte+0x3c>)
 80010ea:	f7ff ff9e 	bl	800102a <LL_SPI_IsActiveFlag_RXNE>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f9      	beq.n	80010e8 <spi_send_byte+0x24>
	(void) SPI1->DR;													//читаем регистр DR, имитация приема, который обязательно происходит одновременно с записью
 80010f4:	4b02      	ldr	r3, [pc, #8]	@ (8001100 <spi_send_byte+0x3c>)
 80010f6:	68db      	ldr	r3, [r3, #12]
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013000 	.word	0x40013000

08001104 <spi_change_byte>:

//Функция приема/отправки байта
uint8_t spi_change_byte(uint8_t byte)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся (обменяются)
	return SPDR;				//возвращаем принятое значение
	#endif
	
	#ifdef STM32_LL
	uint8_t dt = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)) {}	//ждем пока не поднимется флаг txe (готовность к передаче)
 8001112:	bf00      	nop
 8001114:	480d      	ldr	r0, [pc, #52]	@ (800114c <spi_change_byte+0x48>)
 8001116:	f7ff ff9a 	bl	800104e <LL_SPI_IsActiveFlag_TXE>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f9      	beq.n	8001114 <spi_change_byte+0x10>
  LL_SPI_TransmitData8 (SPI1, byte);				//передаем байт адреса по spi
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <spi_change_byte+0x48>)
 8001126:	f7ff ffb1 	bl	800108c <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)) {} //ждем пока не поднимется флаг rxne (есть данные на прием)
 800112a:	bf00      	nop
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <spi_change_byte+0x48>)
 800112e:	f7ff ff7c 	bl	800102a <LL_SPI_IsActiveFlag_RXNE>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <spi_change_byte+0x28>
	dt = LL_SPI_ReceiveData8(SPI1);						//принимаем данные по spi
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <spi_change_byte+0x48>)
 800113a:	f7ff ff9a 	bl	8001072 <LL_SPI_ReceiveData8>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	return dt;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
	#endif
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013000 	.word	0x40013000

08001150 <LL_USART_Enable>:
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60da      	str	r2, [r3, #12]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <LL_USART_IsActiveFlag_TXE>:
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117e:	2b80      	cmp	r3, #128	@ 0x80
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_USART_TransmitData8>:
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	605a      	str	r2, [r3, #4]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <usart_init>:

#include "kombo_usart.h"				//добавляем заголовочный файл

//Процедура инициализации USART
void usart_init(unsigned int ubrr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	//ассинхронный режим (UMSEL=0), без контроля четности (UPM1=0 и UPM0=0),
	//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
	#endif
	
	#ifdef STM32_LL
	LL_USART_Enable(USART1);	//включаем порт, основная инициализация генерируется автоматически
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <usart_init+0x18>)
 80011ba:	f7ff ffc9 	bl	8001150 <LL_USART_Enable>
	#endif
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40013800 	.word	0x40013800

080011cc <usart_transmit>:

//Процедура отправки одного байта
void usart_transmit(unsigned char data) 
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	while ( !(UCSR0A & (1<<UDRE0)) ); //ждем опустошения буфера приема
	UDR0 = data; //записываем байт в регистр
	#endif
	
	#ifdef STM32_LL
	while (!LL_USART_IsActiveFlag_TXE(USART1)) {}		//ждем отправки предыдущего байта
 80011d6:	bf00      	nop
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <usart_transmit+0x2c>)
 80011da:	f7ff ffc8 	bl	800116e <LL_USART_IsActiveFlag_TXE>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f9      	beq.n	80011d8 <usart_transmit+0xc>
  LL_USART_TransmitData8(USART1,data);						//отправляем очередной байт в порт
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <usart_transmit+0x2c>)
 80011ea:	f7ff ffd2 	bl	8001192 <LL_USART_TransmitData8>
	#endif
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40013800 	.word	0x40013800

080011fc <usart_print>:

//Процедура отправки массива
void usart_print(char *str)
{	//цикл по всему массиву
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++)
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e009      	b.n	800121e <usart_print+0x22>
	{
		usart_transmit(str[i]); //отправляем очередной байт
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffda 	bl	80011cc <usart_transmit>
	for (int i = 0; i < strlen(str); i++)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7fe ff94 	bl	800014c <strlen>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8ee      	bhi.n	800120a <usart_print+0xe>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <DelayMicro>:
extern I2C_HandleTypeDef hi2c1;
char str1[100];
uint8_t portlcd; //ячейка для хранения данных порта микросхемы расширения
//------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <DelayMicro+0x34>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <DelayMicro+0x38>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0d5b      	lsrs	r3, r3, #21
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	607b      	str	r3, [r7, #4]
	while (micros--);
 8001254:	bf00      	nop
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1fa      	bne.n	8001256 <DelayMicro+0x1e>
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200000a4 	.word	0x200000a4
 8001270:	6b5fca6b 	.word	0x6b5fca6b

08001274 <LCD_WriteByteI2CLCD>:
//------------------------------------------------
void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <LCD_WriteByteI2CLCD+0x2c>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) 0x4E,buf,1,1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <LCD_WriteByteI2CLCD+0x2c>)
 800128e:	214e      	movs	r1, #78	@ 0x4e
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <LCD_WriteByteI2CLCD+0x30>)
 8001292:	f002 fd67 	bl	8003d64 <HAL_I2C_Master_Transmit>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001a4 	.word	0x200001a4
 80012a4:	20000134 	.word	0x20000134

080012a8 <sendhalfbyte>:
//------------------------------------------------
void sendhalfbyte(uint8_t c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	71fb      	strb	r3, [r7, #7]
	e_set();//включаем линию E
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <sendhalfbyte+0x64>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <sendhalfbyte+0x64>)
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <sendhalfbyte+0x64>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffd2 	bl	8001274 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 80012d0:	2032      	movs	r0, #50	@ 0x32
 80012d2:	f7ff ffb1 	bl	8001238 <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <sendhalfbyte+0x64>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ffc7 	bl	8001274 <LCD_WriteByteI2CLCD>
	e_reset();//выключаем линию E
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <sendhalfbyte+0x64>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	f023 0304 	bic.w	r3, r3, #4
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <sendhalfbyte+0x64>)
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <sendhalfbyte+0x64>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffbb 	bl	8001274 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 80012fe:	2032      	movs	r0, #50	@ 0x32
 8001300:	f7ff ff9a 	bl	8001238 <DelayMicro>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001a5 	.word	0x200001a5

08001310 <sendbyte>:
//------------------------------------------------
void sendbyte(uint8_t c, uint8_t mode)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <sendbyte+0x30>
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <sendbyte+0x6c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <sendbyte+0x6c>)
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <sendbyte+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff9b 	bl	8001274 <LCD_WriteByteI2CLCD>
 800133e:	e00b      	b.n	8001358 <sendbyte+0x48>
	else rs_set();
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <sendbyte+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <sendbyte+0x6c>)
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <sendbyte+0x6c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff8e 	bl	8001274 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff9f 	bl	80012a8 <sendhalfbyte>
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff9b 	bl	80012a8 <sendhalfbyte>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001a5 	.word	0x200001a5

08001380 <LCD_Clear>:
//------------------------------------------------
void LCD_Clear(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	sendbyte(0x01,0);
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffc2 	bl	8001310 <sendbyte>
	HAL_Delay(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f002 f919 	bl	80035c4 <HAL_Delay>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <LCD_SendChar>:
//------------------------------------------------
void LCD_SendChar(char ch)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
	sendbyte(ch,1);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffb3 	bl	8001310 <sendbyte>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LCD_String>:
//------------------------------------------------
void LCD_String(char* st)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80013be:	e00a      	b.n	80013d6 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffa0 	bl	8001310 <sendbyte>
		i++;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <LCD_String+0xe>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LCD_SetPos>:
//------------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	switch(y)
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d846      	bhi.n	8001490 <LCD_SetPos+0xa4>
 8001402:	a201      	add	r2, pc, #4	@ (adr r2, 8001408 <LCD_SetPos+0x1c>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	08001419 	.word	0x08001419
 800140c:	08001431 	.word	0x08001431
 8001410:	08001451 	.word	0x08001451
 8001414:	08001471 	.word	0x08001471
	{
		case 0:
			sendbyte(x|0x80,0);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff74 	bl	8001310 <sendbyte>
			HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f002 f8cb 	bl	80035c4 <HAL_Delay>
			break;
 800142e:	e02f      	b.n	8001490 <LCD_SetPos+0xa4>
		case 1:
			sendbyte((0x40+x)|0x80,0);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	3340      	adds	r3, #64	@ 0x40
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff64 	bl	8001310 <sendbyte>
			HAL_Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f002 f8bb 	bl	80035c4 <HAL_Delay>
			break;
 800144e:	e01f      	b.n	8001490 <LCD_SetPos+0xa4>
		case 2:
			sendbyte((0x14+x)|0x80,0);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3314      	adds	r3, #20
 8001454:	b2db      	uxtb	r3, r3
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff54 	bl	8001310 <sendbyte>
			HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f002 f8ab 	bl	80035c4 <HAL_Delay>
			break;
 800146e:	e00f      	b.n	8001490 <LCD_SetPos+0xa4>
		case 3:
			sendbyte((0x54+x)|0x80,0);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3354      	adds	r3, #84	@ 0x54
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800147c:	b25b      	sxtb	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff44 	bl	8001310 <sendbyte>
			HAL_Delay(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f002 f89b 	bl	80035c4 <HAL_Delay>
			break;
 800148e:	bf00      	nop
	}
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <LCD_init>:
//------------------------------------------------
void LCD_init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800149c:	200f      	movs	r0, #15
 800149e:	f002 f891 	bl	80035c4 <HAL_Delay>
	sendhalfbyte(0x03);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f7ff ff00 	bl	80012a8 <sendhalfbyte>
	HAL_Delay(4);
 80014a8:	2004      	movs	r0, #4
 80014aa:	f002 f88b 	bl	80035c4 <HAL_Delay>
	sendhalfbyte(0x03);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f7ff fefa 	bl	80012a8 <sendhalfbyte>
	DelayMicro(100);
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f7ff febf 	bl	8001238 <DelayMicro>
	sendhalfbyte(0x03);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f7ff fef4 	bl	80012a8 <sendhalfbyte>
	HAL_Delay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f002 f87f 	bl	80035c4 <HAL_Delay>
	sendhalfbyte(0x02);
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7ff feee 	bl	80012a8 <sendhalfbyte>
	HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f002 f879 	bl	80035c4 <HAL_Delay>
	sendbyte(0x28,0);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8	
 80014d2:	2100      	movs	r1, #0
 80014d4:	2028      	movs	r0, #40	@ 0x28
 80014d6:	f7ff ff1b 	bl	8001310 <sendbyte>
	HAL_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f002 f872 	bl	80035c4 <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 80014e0:	2100      	movs	r1, #0
 80014e2:	200c      	movs	r0, #12
 80014e4:	f7ff ff14 	bl	8001310 <sendbyte>
	HAL_Delay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f002 f86b 	bl	80035c4 <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 80014ee:	2100      	movs	r1, #0
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff ff0d 	bl	8001310 <sendbyte>
	HAL_Delay(2);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f002 f864 	bl	80035c4 <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 80014fc:	2100      	movs	r1, #0
 80014fe:	2006      	movs	r0, #6
 8001500:	f7ff ff06 	bl	8001310 <sendbyte>
	HAL_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f002 f85d 	bl	80035c4 <HAL_Delay>
	setled();//подсветка
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <LCD_init+0xa8>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <LCD_init+0xa8>)
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <LCD_init+0xa8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fea9 	bl	8001274 <LCD_WriteByteI2CLCD>
	setwrite();//запись
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <LCD_init+0xa8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f023 0302 	bic.w	r3, r3, #2
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <LCD_init+0xa8>)
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <LCD_init+0xa8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe9d 	bl	8001274 <LCD_WriteByteI2CLCD>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001a5 	.word	0x200001a5

08001544 <LL_IWDG_ReloadCounter>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
	...

08001560 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <LL_RCC_HSE_Enable+0x18>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a03      	ldr	r2, [pc, #12]	@ (8001578 <LL_RCC_HSE_Enable+0x18>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <LL_RCC_HSE_IsReady+0x20>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000

080015a0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <LL_RCC_LSI_Enable+0x18>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	4a03      	ldr	r2, [pc, #12]	@ (80015b8 <LL_RCC_LSI_Enable+0x18>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <LL_RCC_LSI_IsReady+0x20>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <LL_RCC_SetSysClkSource+0x24>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 0203 	bic.w	r2, r3, #3
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <LL_RCC_SetSysClkSource+0x24>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <LL_RCC_GetSysClkSource+0x14>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <LL_RCC_SetAHBPrescaler+0x24>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LL_RCC_SetAHBPrescaler+0x24>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001658:	4904      	ldr	r1, [pc, #16]	@ (800166c <LL_RCC_SetAPB1Prescaler+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <LL_RCC_SetAPB2Prescaler+0x24>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001680:	4904      	ldr	r1, [pc, #16]	@ (8001694 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <LL_RCC_PLL_Enable+0x18>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a03      	ldr	r2, [pc, #12]	@ (80016b0 <LL_RCC_PLL_Enable+0x18>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <LL_RCC_PLL_IsReady+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000

080016d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	4903      	ldr	r1, [pc, #12]	@ (8001704 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000

08001708 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <LL_FLASH_SetLatency+0x24>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 0207 	bic.w	r2, r3, #7
 8001718:	4904      	ldr	r1, [pc, #16]	@ (800172c <LL_FLASH_SetLatency+0x24>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000

08001730 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <LL_FLASH_GetLatency+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40022000 	.word	0x40022000

08001748 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f06f 0201 	mvn.w	r2, #1
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60da      	str	r2, [r3, #12]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <LL_USART_EnableIT_RXNE>:
{
 80017c2:	b480      	push	{r7}
 80017c4:	b089      	sub	sp, #36	@ 0x24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	330c      	adds	r3, #12
 80017ce:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	e853 3f00 	ldrex	r3, [r3]
 80017d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	330c      	adds	r3, #12
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	61ba      	str	r2, [r7, #24]
 80017e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017ea:	6979      	ldr	r1, [r7, #20]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	e841 2300 	strex	r3, r2, [r1]
 80017f2:	613b      	str	r3, [r7, #16]
   return(result);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e7      	bne.n	80017ca <LL_USART_EnableIT_RXNE+0x8>
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3724      	adds	r7, #36	@ 0x24
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_GPIO_IsInputPinSet>:
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	43da      	mvns	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	4013      	ands	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	b2db      	uxtb	r3, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <init_variables>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Процедура инициализации переменных, флагов, массивов
void init_variables(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
	flags.rst_push 					= 0;
 800183a:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <init_variables+0xd0>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
	flags.nxt_push 					= 0;
 8001840:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <init_variables+0xd0>)
 8001842:	2200      	movs	r2, #0
 8001844:	705a      	strb	r2, [r3, #1]
	flags.set_push 					= 0;
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <init_variables+0xd0>)
 8001848:	2200      	movs	r2, #0
 800184a:	709a      	strb	r2, [r3, #2]
	flags.time_push 				= 0;
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <init_variables+0xd0>)
 800184e:	2200      	movs	r2, #0
 8001850:	70da      	strb	r2, [r3, #3]
	flags.f_timer 					= 0;
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <init_variables+0xd0>)
 8001854:	2200      	movs	r2, #0
 8001856:	711a      	strb	r2, [r3, #4]
	
	vars.seconds 						= 0;
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <init_variables+0xd4>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	vars.temp_seconds 			= 0;
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <init_variables+0xd4>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
	vars.millis 						= 0;
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <init_variables+0xd4>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
	vars.slave_counter 			= 0;
 800186a:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <init_variables+0xd4>)
 800186c:	2200      	movs	r2, #0
 800186e:	741a      	strb	r2, [r3, #16]
	vars.send_order_count		= 1;
 8001870:	4b25      	ldr	r3, [pc, #148]	@ (8001908 <init_variables+0xd4>)
 8001872:	2201      	movs	r2, #1
 8001874:	749a      	strb	r2, [r3, #18]
	vars.bounce_count = 0;
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <init_variables+0xd4>)
 8001878:	2200      	movs	r2, #0
 800187a:	829a      	strh	r2, [r3, #20]
	
	for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	e036      	b.n	80018f0 <init_variables+0xbc>
	{
		b_data[i].number 			= i;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4a21      	ldr	r2, [pc, #132]	@ (800190c <init_variables+0xd8>)
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	701a      	strb	r2, [r3, #0]
		b_data[i].address 		= slave_addrs[i];
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	491f      	ldr	r1, [pc, #124]	@ (8001910 <init_variables+0xdc>)
 8001894:	5c89      	ldrb	r1, [r1, r2]
 8001896:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <init_variables+0xd8>)
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	3301      	adds	r3, #1
 800189e:	460a      	mov	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
		b_data[i].time 				= MAX_TIME;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <init_variables+0xd8>)
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	601a      	str	r2, [r3, #0]
		b_data[i].cmd 				= LED_STAT; 
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a15      	ldr	r2, [pc, #84]	@ (800190c <init_variables+0xd8>)
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	330e      	adds	r3, #14
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		b_data[i].led_status 	= LED_STAT_OFF; 
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <init_variables+0xd8>)
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	330c      	adds	r3, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		b_data[i].push_order 	= 0;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <init_variables+0xd8>)
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	330d      	adds	r3, #13
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
		b_data[i].pushed 			= 0;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <init_variables+0xd8>)
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	3302      	adds	r3, #2
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	3301      	adds	r3, #1
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b13      	cmp	r3, #19
 80018f4:	d9c5      	bls.n	8001882 <init_variables+0x4e>
	}
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200001e8 	.word	0x200001e8
 8001908:	200001f0 	.word	0x200001f0
 800190c:	20000208 	.word	0x20000208
 8001910:	2000001c 	.word	0x2000001c

08001914 <crc16_calc>:

//Процедура расчета контрольной суммы
uint16_t crc16_calc(volatile uint8_t buf[], uint8_t buf_size) 
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	uint16_t	crc = 0;			// возвращаемое значение
 8001920:	2300      	movs	r3, #0
 8001922:	82fb      	strh	r3, [r7, #22]
	uint16_t	D;						// �?ндекс элемента массива для наложения 
	int16_t 	T;						// Элемент массива для наложения, вычисляется на лету
	uint16_t	P = 0x1021;		// Полином - маска
 8001924:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001928:	823b      	strh	r3, [r7, #16]

	for (uint8_t i = 0; i < buf_size; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	74fb      	strb	r3, [r7, #19]
 800192e:	e038      	b.n	80019a2 <crc16_calc+0x8e>
	{
		D = crc >> 8; 				// Сдвиг crc на 8 бит вправо
 8001930:	8afb      	ldrh	r3, [r7, #22]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	81fb      	strh	r3, [r7, #14]
		D = D ^ buf[i];				// Вычисление индекса элемента массива для наложения  
 8001936:	7cfb      	ldrb	r3, [r7, #19]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	4053      	eors	r3, r2
 8001946:	81fb      	strh	r3, [r7, #14]

		T = D;								// Вычисление элемента массива
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	82bb      	strh	r3, [r7, #20]
		T = T << 8;        		// Сдвиг элемента массива на 8 бит влево
 800194c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	82bb      	strh	r3, [r7, #20]

		for (uint8_t j = 0; j < 8; j++)    // Повторение 8 раз
 8001954:	2300      	movs	r3, #0
 8001956:	74bb      	strb	r3, [r7, #18]
 8001958:	e014      	b.n	8001984 <crc16_calc+0x70>
		{
			if (T < 0)					// Если старший бит = 1
 800195a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	da09      	bge.n	8001976 <crc16_calc+0x62>
			{
				T = T << 1;				// Сдвиг элемента массива на 1 бит влево
 8001962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	82bb      	strh	r3, [r7, #20]
				T = T ^ P;				// Наложение полинома
 800196a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	4053      	eors	r3, r2
 8001972:	82bb      	strh	r3, [r7, #20]
 8001974:	e003      	b.n	800197e <crc16_calc+0x6a>
			}
			else
			{
				T = T << 1;				// Сдвиг элемента массива на 1 бит влево
 8001976:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	82bb      	strh	r3, [r7, #20]
		for (uint8_t j = 0; j < 8; j++)    // Повторение 8 раз
 800197e:	7cbb      	ldrb	r3, [r7, #18]
 8001980:	3301      	adds	r3, #1
 8001982:	74bb      	strb	r3, [r7, #18]
 8001984:	7cbb      	ldrb	r3, [r7, #18]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d9e7      	bls.n	800195a <crc16_calc+0x46>
			}
		}
		crc = crc << 8;				// Сдвиг С на 8 бит влево
 800198a:	8afb      	ldrh	r3, [r7, #22]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	82fb      	strh	r3, [r7, #22]
		crc = crc ^ T;				// �?сключающе или между С и элементом массива
 8001990:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001994:	8abb      	ldrh	r3, [r7, #20]
 8001996:	4053      	eors	r3, r2
 8001998:	b21b      	sxth	r3, r3
 800199a:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < buf_size; i++)
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	3301      	adds	r3, #1
 80019a0:	74fb      	strb	r3, [r7, #19]
 80019a2:	7cfa      	ldrb	r2, [r7, #19]
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3c2      	bcc.n	8001930 <crc16_calc+0x1c>
	}

	return crc;							// Возврат значения crc
 80019aa:	8afb      	ldrh	r3, [r7, #22]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
	...

080019b8 <nrf24l01_receive>:

//Процедура приема радиомодуля
void nrf24l01_receive(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
	if(f_rx)	//если флаг приема поднят (флаг поднимается по внешнему прерыванию от радиомодуля)
 80019be:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <nrf24l01_receive+0xc8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d057      	beq.n	8001a78 <nrf24l01_receive+0xc0>
	{
		uint16_t temp_crc = crc16_calc(rx_buf, TX_PLOAD_WIDTH - 2);
 80019c8:	2109      	movs	r1, #9
 80019ca:	482e      	ldr	r0, [pc, #184]	@ (8001a84 <nrf24l01_receive+0xcc>)
 80019cc:	f7ff ffa2 	bl	8001914 <crc16_calc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	81bb      	strh	r3, [r7, #12]
		uint16_t input_crc = (uint16_t)rx_buf[TX_PLOAD_WIDTH - 1] + (uint16_t)(rx_buf[TX_PLOAD_WIDTH - 2] << 8);
 80019d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <nrf24l01_receive+0xcc>)
 80019d6:	7a9b      	ldrb	r3, [r3, #10]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <nrf24l01_receive+0xcc>)
 80019dc:	7a5b      	ldrb	r3, [r3, #9]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	817b      	strh	r3, [r7, #10]
		if (temp_crc == input_crc)
 80019e6:	89ba      	ldrh	r2, [r7, #12]
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d141      	bne.n	8001a72 <nrf24l01_receive+0xba>
		{
			for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e039      	b.n	8001a68 <nrf24l01_receive+0xb0>
			{	//если найден принятый адрес
				if (rx_buf[0] == slave_addrs[i]) 	//если найден принятый адрес
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <nrf24l01_receive+0xcc>)
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4923      	ldr	r1, [pc, #140]	@ (8001a88 <nrf24l01_receive+0xd0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d12f      	bne.n	8001a62 <nrf24l01_receive+0xaa>
				{
					float_to_byte.char_val[0] = rx_buf[5];
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <nrf24l01_receive+0xcc>)
 8001a04:	795a      	ldrb	r2, [r3, #5]
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <nrf24l01_receive+0xd4>)
 8001a08:	701a      	strb	r2, [r3, #0]
					float_to_byte.char_val[1] = rx_buf[6];
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <nrf24l01_receive+0xcc>)
 8001a0c:	799a      	ldrb	r2, [r3, #6]
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <nrf24l01_receive+0xd4>)
 8001a10:	705a      	strb	r2, [r3, #1]
					float_to_byte.char_val[2] = rx_buf[7];
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <nrf24l01_receive+0xcc>)
 8001a14:	79da      	ldrb	r2, [r3, #7]
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <nrf24l01_receive+0xd4>)
 8001a18:	709a      	strb	r2, [r3, #2]
					float_to_byte.char_val[3] = rx_buf[8];
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <nrf24l01_receive+0xcc>)
 8001a1c:	7a1a      	ldrb	r2, [r3, #8]
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <nrf24l01_receive+0xd4>)
 8001a20:	70da      	strb	r2, [r3, #3]
					b_data[i].vcc = float_to_byte.float_val;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4a19      	ldr	r2, [pc, #100]	@ (8001a8c <nrf24l01_receive+0xd4>)
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4919      	ldr	r1, [pc, #100]	@ (8001a90 <nrf24l01_receive+0xd8>)
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3308      	adds	r3, #8
 8001a30:	601a      	str	r2, [r3, #0]
					
					if ((*(uint32_t*)&rx_buf[1]) != NOT_PUSHED)
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <nrf24l01_receive+0xdc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d019      	beq.n	8001a70 <nrf24l01_receive+0xb8>
					{	
						uint32_t time = *(uint32_t*)&rx_buf[1];	//преобразуем оставшиеся байты во время
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <nrf24l01_receive+0xdc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	607b      	str	r3, [r7, #4]

						if (b_data[i].pushed == 0)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <nrf24l01_receive+0xd8>)
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <nrf24l01_receive+0xb8>
						{
							b_data[i].time = time;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <nrf24l01_receive+0xd8>)
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
						}
					}	
					break;
 8001a60:	e006      	b.n	8001a70 <nrf24l01_receive+0xb8>
			for (uint8_t i = 0; i < NUM_OF_SLAVES; i++)
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	3301      	adds	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b13      	cmp	r3, #19
 8001a6c:	d9c2      	bls.n	80019f4 <nrf24l01_receive+0x3c>
 8001a6e:	e000      	b.n	8001a72 <nrf24l01_receive+0xba>
					break;
 8001a70:	bf00      	nop
				}
			}
		}
		f_rx = 0;					//опускаем флаг приема
 8001a72:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <nrf24l01_receive+0xc8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
	}
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000019f 	.word	0x2000019f
 8001a84:	20000188 	.word	0x20000188
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000348 	.word	0x20000348
 8001a90:	20000208 	.word	0x20000208
 8001a94:	20000189 	.word	0x20000189

08001a98 <refresh_display>:

//Процедура обновления дисплея
void refresh_display()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	#ifdef LCD_2004
		LCD_Clear();
 8001a9c:	f7ff fc70 	bl	8001380 <LCD_Clear>

		LCD_SetPos(0,0);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fca2 	bl	80013ec <LCD_SetPos>
		LCD_String(string_0);
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <refresh_display+0x44>)
 8001aaa:	f7ff fc82 	bl	80013b2 <LCD_String>
		LCD_SetPos(0,1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fc9b 	bl	80013ec <LCD_SetPos>
		LCD_String(string_1);
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <refresh_display+0x48>)
 8001ab8:	f7ff fc7b 	bl	80013b2 <LCD_String>
		LCD_SetPos(0,2);
 8001abc:	2102      	movs	r1, #2
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fc94 	bl	80013ec <LCD_SetPos>
		LCD_String(string_2);
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <refresh_display+0x4c>)
 8001ac6:	f7ff fc74 	bl	80013b2 <LCD_String>
		LCD_SetPos(0,3);
 8001aca:	2103      	movs	r1, #3
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fc8d 	bl	80013ec <LCD_SetPos>
		LCD_String(string_3);
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <refresh_display+0x50>)
 8001ad4:	f7ff fc6d 	bl	80013b2 <LCD_String>

		#endif

	#endif

	}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000044 	.word	0x20000044
 8001ae0:	2000005c 	.word	0x2000005c
 8001ae4:	20000074 	.word	0x20000074
 8001ae8:	2000008c 	.word	0x2000008c

08001aec <display_init>:

//Процедура инициализации дисплея
void display_init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	#ifdef LCD_2004
		LCD_init();
 8001af0:	f7ff fcd2 	bl	8001498 <LCD_init>
	
	#ifdef ST_7735
		ST7735_Init();
		ST7735_FillScreen(ST7735_BLACK);
	#endif
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <nrf_test>:

//Подпрограмма тестирования радиомодуля
uint8_t nrf_test(void)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af04      	add	r7, sp, #16
	uint8_t buf_0[TX_ADR_WIDTH] = {0};				
 8001afe:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <nrf_test+0xd4>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	823b      	strh	r3, [r7, #16]
 8001b04:	2300      	movs	r3, #0
 8001b06:	74bb      	strb	r3, [r7, #18]
	uint8_t buf_1[TX_ADR_WIDTH] = {0};
 8001b08:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <nrf_test+0xd4>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	81bb      	strh	r3, [r7, #12]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
	uint8_t test_addr_0[TX_ADR_WIDTH] = UNIQUE_ADDRESS_0;
 8001b12:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd0 <nrf_test+0xd8>)
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	8019      	strh	r1, [r3, #0]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	0c12      	lsrs	r2, r2, #16
 8001b22:	701a      	strb	r2, [r3, #0]
	uint8_t test_addr_1[TX_ADR_WIDTH] = UNIQUE_ADDRESS_1;
 8001b24:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <nrf_test+0xdc>)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	8019      	strh	r1, [r3, #0]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	0c12      	lsrs	r2, r2, #16
 8001b32:	701a      	strb	r2, [r3, #0]
	
	uint8_t err = ERR_OK;								
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]

	//читаем значения регистров
	
	#ifdef MASTER
		nrf24_read_buf(RX_ADDR_P1,buf_0,3);	
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	4619      	mov	r1, r3
 8001b40:	200b      	movs	r0, #11
 8001b42:	f7ff f865 	bl	8000c10 <nrf24_read_buf>
		nrf24_read_buf(TX_ADDR,buf_1,3);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2010      	movs	r0, #16
 8001b50:	f7ff f85e 	bl	8000c10 <nrf24_read_buf>
		nrf24_read_buf(RX_ADDR_P1,buf_1,3);	
		nrf24_read_buf(TX_ADDR,buf_0,3);
	#endif
	
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001b56:	461c      	mov	r4, r3
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001b5a:	461d      	mov	r5, r3
	buf_1[0], buf_1[1], buf_1[2], buf_0[0], buf_0[1], buf_0[2]);
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	7c3a      	ldrb	r2, [r7, #16]
 8001b60:	7c79      	ldrb	r1, [r7, #17]
 8001b62:	7cb8      	ldrb	r0, [r7, #18]
	sprintf(str, "TX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\nRX_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n",
 8001b64:	9003      	str	r0, [sp, #12]
 8001b66:	9102      	str	r1, [sp, #8]
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	4622      	mov	r2, r4
 8001b70:	4919      	ldr	r1, [pc, #100]	@ (8001bd8 <nrf_test+0xe0>)
 8001b72:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <nrf_test+0xe4>)
 8001b74:	f003 fc10 	bl	8005398 <siprintf>
		usart_print(str);	
	#endif
	
	//проверяем значения регистров записанных при инициализации и считанных 
	
	for (uint8_t i = 0; i < TX_ADR_WIDTH; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75bb      	strb	r3, [r7, #22]
 8001b7c:	e01e      	b.n	8001bbc <nrf_test+0xc4>
	{
		if (test_addr_0[i] != buf_0[i]) err = NRF_ERR;
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	3318      	adds	r3, #24
 8001b82:	443b      	add	r3, r7
 8001b84:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001b88:	7dbb      	ldrb	r3, [r7, #22]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <nrf_test+0xa2>
 8001b96:	23ff      	movs	r3, #255	@ 0xff
 8001b98:	75fb      	strb	r3, [r7, #23]
		if (test_addr_1[i] != buf_1[i]) err = NRF_ERR;
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	3318      	adds	r3, #24
 8001b9e:	443b      	add	r3, r7
 8001ba0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001ba4:	7dbb      	ldrb	r3, [r7, #22]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	443b      	add	r3, r7
 8001baa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <nrf_test+0xbe>
 8001bb2:	23ff      	movs	r3, #255	@ 0xff
 8001bb4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < TX_ADR_WIDTH; i++)
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	75bb      	strb	r3, [r7, #22]
 8001bbc:	7dbb      	ldrb	r3, [r7, #22]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d9dd      	bls.n	8001b7e <nrf_test+0x86>
	}
	
	return err;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bdb0      	pop	{r4, r5, r7, pc}
 8001bcc:	08006404 	.word	0x08006404
 8001bd0:	08006408 	.word	0x08006408
 8001bd4:	0800640c 	.word	0x0800640c
 8001bd8:	080063c0 	.word	0x080063c0
 8001bdc:	200001a8 	.word	0x200001a8

08001be0 <test_and_info>:

//Процедура тестирования радиомодуля и сигнализации
void test_and_info(uint8_t err)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	sprintf(str, "v. %d.%02d", VERSION, SUBVERSION);
 8001bea:	2304      	movs	r3, #4
 8001bec:	2201      	movs	r2, #1
 8001bee:	491c      	ldr	r1, [pc, #112]	@ (8001c60 <test_and_info+0x80>)
 8001bf0:	481c      	ldr	r0, [pc, #112]	@ (8001c64 <test_and_info+0x84>)
 8001bf2:	f003 fbd1 	bl	8005398 <siprintf>
		usart_println(DEV_INFO);
		usart_println(str);
	#endif
	
	#ifdef LCD_2004
		LCD_SetPos(0,0);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fbf7 	bl	80013ec <LCD_SetPos>
		LCD_String(DEV_INFO);
 8001bfe:	481a      	ldr	r0, [pc, #104]	@ (8001c68 <test_and_info+0x88>)
 8001c00:	f7ff fbd7 	bl	80013b2 <LCD_String>
		LCD_SetPos(0,1);
 8001c04:	2101      	movs	r1, #1
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fbf0 	bl	80013ec <LCD_SetPos>
		LCD_String(str);
 8001c0c:	4815      	ldr	r0, [pc, #84]	@ (8001c64 <test_and_info+0x84>)
 8001c0e:	f7ff fbd0 	bl	80013b2 <LCD_String>
	#ifdef DEBUG_MODE
		usart_println(str);
	#endif	
	
	#ifndef DEBUG_MODE
	LL_IWDG_ReloadCounter(IWDG);
 8001c12:	4816      	ldr	r0, [pc, #88]	@ (8001c6c <test_and_info+0x8c>)
 8001c14:	f7ff fc96 	bl	8001544 <LL_IWDG_ReloadCounter>
	#endif
	
	err = nrf_test();		//выводим значения регистров в порт
 8001c18:	f7ff ff6e 	bl	8001af8 <nrf_test>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
	
	if (err == ERR_OK) 
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <test_and_info+0x62>
	{
		sprintf(str, "%s ch = %d", "nrf24 OK ", CHANNEL);
 8001c26:	2310      	movs	r3, #16
 8001c28:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <test_and_info+0x90>)
 8001c2a:	4912      	ldr	r1, [pc, #72]	@ (8001c74 <test_and_info+0x94>)
 8001c2c:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <test_and_info+0x84>)
 8001c2e:	f003 fbb3 	bl	8005398 <siprintf>
		#ifdef DEBUG_MODE
			usart_println(str);
		#endif		
		
		#ifdef LCD_2004
			LCD_SetPos(0,2);
 8001c32:	2102      	movs	r1, #2
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fbd9 	bl	80013ec <LCD_SetPos>
			LCD_String(str);
 8001c3a:	480a      	ldr	r0, [pc, #40]	@ (8001c64 <test_and_info+0x84>)
 8001c3c:	f7ff fbb9 	bl	80013b2 <LCD_String>
		
		#ifdef ST_7735
			ST7735_WriteString(0, 60, "nrf24 ERROR", Font_11x18, ST7735_WHITE, ST7735_BLACK);
		#endif
	}
}
 8001c40:	e009      	b.n	8001c56 <test_and_info+0x76>
	else  if (err == NRF_ERR) 
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2bff      	cmp	r3, #255	@ 0xff
 8001c46:	d106      	bne.n	8001c56 <test_and_info+0x76>
			LCD_SetPos(0,2);
 8001c48:	2102      	movs	r1, #2
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fbce 	bl	80013ec <LCD_SetPos>
			LCD_String("nrf ERROR");
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <test_and_info+0x98>)
 8001c52:	f7ff fbae 	bl	80013b2 <LCD_String>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08006410 	.word	0x08006410
 8001c64:	200001a8 	.word	0x200001a8
 8001c68:	0800641c 	.word	0x0800641c
 8001c6c:	40003000 	.word	0x40003000
 8001c70:	0800642c 	.word	0x0800642c
 8001c74:	08006438 	.word	0x08006438
 8001c78:	08006444 	.word	0x08006444

08001c7c <sort_data>:

//Процедура сортировки данных по возрастанию
void sort_data(uint32_t *data) 
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES - 1; i++) 
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e033      	b.n	8001cf2 <sort_data+0x76>
	{ 
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES - i - 1 ; j++) 
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73bb      	strb	r3, [r7, #14]
 8001c8e:	e027      	b.n	8001ce0 <sort_data+0x64>
		{
			if(data[j] > data[j+1]) 			//сравниваем два соседних элемента.
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	440b      	add	r3, r1
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d917      	bls.n	8001cda <sort_data+0x5e>
			{           									//если они идут в неправильном порядке, то  
				uint32_t tmp = data[j];			//меняем их местами. 
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60bb      	str	r3, [r7, #8]
        data[j] = data[j+1];
 8001cb6:	7bbb      	ldrb	r3, [r7, #14]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	601a      	str	r2, [r3, #0]
        data[j+1] = tmp; 
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES - i - 1 ; j++) 
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73bb      	strb	r3, [r7, #14]
 8001ce0:	7bba      	ldrb	r2, [r7, #14]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	f1c3 0313 	rsb	r3, r3, #19
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbd1      	blt.n	8001c90 <sort_data+0x14>
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES - 1; i++) 
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b12      	cmp	r3, #18
 8001cf6:	d9c8      	bls.n	8001c8a <sort_data+0xe>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <dwt_init>:

//Процедура инициализации модуля DWT
void dwt_init(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <dwt_init+0x24>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <dwt_init+0x24>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <dwt_init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <dwt_init+0x28>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	e000edfc 	.word	0xe000edfc
 8001d2c:	e0001000 	.word	0xe0001000

08001d30 <delay_us>:

//Процедура микросекундной задержки
void delay_us(uint32_t us)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000); // получаем кол-во тактов за 1 мкс и умножаем на наше значение
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <delay_us+0x3c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <delay_us+0x40>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9a      	lsrs	r2, r3, #18
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U; // обнуляем счётчик
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <delay_us+0x44>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001d52:	bf00      	nop
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <delay_us+0x44>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8fa      	bhi.n	8001d54 <delay_us+0x24>
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200000a4 	.word	0x200000a4
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	e0001000 	.word	0xe0001000

08001d78 <reset_all>:

//Процедура отправки общей команды сброса
void reset_all(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
	tx_buf[0] = RESET_CMD;	//
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <reset_all+0x3c>)
 8001d80:	22ff      	movs	r2, #255	@ 0xff
 8001d82:	701a      	strb	r2, [r3, #0]
	
	uint16_t temp_crc = crc16_calc(tx_buf, TX_PLOAD_WIDTH - 2);
 8001d84:	2109      	movs	r1, #9
 8001d86:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <reset_all+0x3c>)
 8001d88:	f7ff fdc4 	bl	8001914 <crc16_calc>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	80fb      	strh	r3, [r7, #6]
	
	tx_buf[TX_PLOAD_WIDTH - 2] = (uint8_t)(temp_crc >> 8);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <reset_all+0x3c>)
 8001d9a:	725a      	strb	r2, [r3, #9]
	tx_buf[TX_PLOAD_WIDTH - 1] = (uint8_t)temp_crc;
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <reset_all+0x3c>)
 8001da2:	729a      	strb	r2, [r3, #10]
	
	nrf24_send(tx_buf);						//отправляем посылку в эфир
 8001da4:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <reset_all+0x3c>)
 8001da6:	f7ff f857 	bl	8000e58 <nrf24_send>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000194 	.word	0x20000194

08001db8 <data_mix>:

//Процедура псевдослучайного перемешивания данных
void data_mix(uint8_t *data)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[NUM_OF_SLAVES];
	uint8_t i_rnd;
	
	//прибавляем ко всем элементам 1 потому что алгоритм предполагает отсутствие нулей
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	77bb      	strb	r3, [r7, #30]
 8001dc4:	e012      	b.n	8001dec <data_mix+0x34>
	{
			if (data[i] != 0xFF) data[i] = data[i] + 1;
 8001dc6:	7fbb      	ldrb	r3, [r7, #30]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d009      	beq.n	8001de6 <data_mix+0x2e>
 8001dd2:	7fbb      	ldrb	r3, [r7, #30]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	7fbb      	ldrb	r3, [r7, #30]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	440b      	add	r3, r1
 8001de0:	3201      	adds	r2, #1
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001de6:	7fbb      	ldrb	r3, [r7, #30]
 8001de8:	3301      	adds	r3, #1
 8001dea:	77bb      	strb	r3, [r7, #30]
 8001dec:	7fbb      	ldrb	r3, [r7, #30]
 8001dee:	2b13      	cmp	r3, #19
 8001df0:	d9e9      	bls.n	8001dc6 <data_mix+0xe>
	}
	
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8001df2:	2300      	movs	r3, #0
 8001df4:	777b      	strb	r3, [r7, #29]
 8001df6:	e03d      	b.n	8001e74 <data_mix+0xbc>
	{
		i_rnd = rand()%NUM_OF_SLAVES;	//генерируем случайный индекс
 8001df8:	f003 f9ce 	bl	8005198 <rand>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <data_mix+0x100>)
 8001e00:	fb83 1302 	smull	r1, r3, r3, r2
 8001e04:	10d9      	asrs	r1, r3, #3
 8001e06:	17d3      	asrs	r3, r2, #31
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	1ad1      	subs	r1, r2, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	77fb      	strb	r3, [r7, #31]
		
		while (data[i_rnd] == 0)			//в случае если элемент массива с полученным индексом нулевой
 8001e18:	e00f      	b.n	8001e3a <data_mix+0x82>
		{
				i_rnd = rand()%NUM_OF_SLAVES;		//генерируем новый случайный индекс пока не найдем ненулевой элемент
 8001e1a:	f003 f9bd 	bl	8005198 <rand>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <data_mix+0x100>)
 8001e22:	fb83 1302 	smull	r1, r3, r3, r2
 8001e26:	10d9      	asrs	r1, r3, #3
 8001e28:	17d3      	asrs	r3, r2, #31
 8001e2a:	1ac9      	subs	r1, r1, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	1ad1      	subs	r1, r2, r3
 8001e36:	460b      	mov	r3, r1
 8001e38:	77fb      	strb	r3, [r7, #31]
		while (data[i_rnd] == 0)			//в случае если элемент массива с полученным индексом нулевой
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0e9      	beq.n	8001e1a <data_mix+0x62>
		}
		if (data[i_rnd] != 0)					
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <data_mix+0xb6>
		{
				temp_data[i] = data[i_rnd];	//записываем случайный элемент массива во временный массив
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	441a      	add	r2, r3
 8001e58:	7f7b      	ldrb	r3, [r7, #29]
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	3320      	adds	r3, #32
 8001e5e:	443b      	add	r3, r7
 8001e60:	f803 2c18 	strb.w	r2, [r3, #-24]
				data[i_rnd] = 0;						//обнуляем сохраненный элемент
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8001e6e:	7f7b      	ldrb	r3, [r7, #29]
 8001e70:	3301      	adds	r3, #1
 8001e72:	777b      	strb	r3, [r7, #29]
 8001e74:	7f7b      	ldrb	r3, [r7, #29]
 8001e76:	2b13      	cmp	r3, #19
 8001e78:	d9be      	bls.n	8001df8 <data_mix+0x40>
		}
	}
	
	//копируем перемешанные элементы массива обратно в исходный массив, вычитаем единицу
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	773b      	strb	r3, [r7, #28]
 8001e7e:	e013      	b.n	8001ea8 <data_mix+0xf0>
	{
			if (data[i] != 0xFF) data[i] = temp_data[i] - 1;
 8001e80:	7f3b      	ldrb	r3, [r7, #28]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2bff      	cmp	r3, #255	@ 0xff
 8001e8a:	d00a      	beq.n	8001ea2 <data_mix+0xea>
 8001e8c:	7f3b      	ldrb	r3, [r7, #28]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	443b      	add	r3, r7
 8001e92:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e96:	7f3b      	ldrb	r3, [r7, #28]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_OF_SLAVES; i++) 
 8001ea2:	7f3b      	ldrb	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	773b      	strb	r3, [r7, #28]
 8001ea8:	7f3b      	ldrb	r3, [r7, #28]
 8001eaa:	2b13      	cmp	r3, #19
 8001eac:	d9e8      	bls.n	8001e80 <data_mix+0xc8>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	66666667 	.word	0x66666667

08001ebc <rst_push>:

//Процедура реализации команды "сброс"
void rst_push(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	reset_all();		//отправляем команду общего сброса всем кнопкам
 8001ec0:	f7ff ff5a 	bl	8001d78 <reset_all>
	
	f_rx = 0;					//опускаем флаг приема
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <rst_push+0x2c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]

	//приводим в исходное состояние дисплей
	#ifdef LCD_2004
		LCD_Clear();
 8001eca:	f7ff fa59 	bl	8001380 <LCD_Clear>
		refresh_display();
 8001ece:	f7ff fde3 	bl	8001a98 <refresh_display>
			w_string_2[i] = ' ';
		}
	#endif
	
	//перемешаваем массив с номерами кнопок
	data_mix(slave_nums);
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <rst_push+0x30>)
 8001ed4:	f7ff ff70 	bl	8001db8 <data_mix>
	//приводим все переменные в исходное состояние
	init_variables();
 8001ed8:	f7ff fcac 	bl	8001834 <init_variables>
	//делаем паузу
	LL_mDelay(SCAN_PERIOD * 5);
 8001edc:	2005      	movs	r0, #5
 8001ede:	f003 f873 	bl	8004fc8 <LL_mDelay>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000019f 	.word	0x2000019f
 8001eec:	20000030 	.word	0x20000030

08001ef0 <set_push>:

//Процедура команды "установка"
void set_push(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	//присваиваем новое значение переключателя звуковых файлов
	vars.sound_switch++;			
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <set_push+0x9c>)
 8001ef6:	7c5b      	ldrb	r3, [r3, #17]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <set_push+0x9c>)
 8001f00:	745a      	strb	r2, [r3, #17]
	if (vars.sound_switch >= 5) vars.sound_switch = 0;
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <set_push+0x9c>)
 8001f04:	7c5b      	ldrb	r3, [r3, #17]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d902      	bls.n	8001f12 <set_push+0x22>
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <set_push+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	745a      	strb	r2, [r3, #17]
	
	//отображаем на дисплее название нового звука
	#ifdef LCD_2004
		switch (vars.sound_switch)
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <set_push+0x9c>)
 8001f14:	7c5b      	ldrb	r3, [r3, #17]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d835      	bhi.n	8001f88 <set_push+0x98>
 8001f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <set_push+0x34>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f49 	.word	0x08001f49
 8001f2c:	08001f59 	.word	0x08001f59
 8001f30:	08001f69 	.word	0x08001f69
 8001f34:	08001f79 	.word	0x08001f79
		{
			case 0:
				LCD_SetPos(12,2);
 8001f38:	2102      	movs	r1, #2
 8001f3a:	200c      	movs	r0, #12
 8001f3c:	f7ff fa56 	bl	80013ec <LCD_SetPos>
				LCD_String("shoot   ");
 8001f40:	4813      	ldr	r0, [pc, #76]	@ (8001f90 <set_push+0xa0>)
 8001f42:	f7ff fa36 	bl	80013b2 <LCD_String>
			break;
 8001f46:	e01f      	b.n	8001f88 <set_push+0x98>
			case 1:
				LCD_SetPos(12,2);
 8001f48:	2102      	movs	r1, #2
 8001f4a:	200c      	movs	r0, #12
 8001f4c:	f7ff fa4e 	bl	80013ec <LCD_SetPos>
				LCD_String("open    ");
 8001f50:	4810      	ldr	r0, [pc, #64]	@ (8001f94 <set_push+0xa4>)
 8001f52:	f7ff fa2e 	bl	80013b2 <LCD_String>
			break;
 8001f56:	e017      	b.n	8001f88 <set_push+0x98>
			case 2:
				LCD_SetPos(12,2);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	200c      	movs	r0, #12
 8001f5c:	f7ff fa46 	bl	80013ec <LCD_SetPos>
				LCD_String("svist   ");
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <set_push+0xa8>)
 8001f62:	f7ff fa26 	bl	80013b2 <LCD_String>
			break;
 8001f66:	e00f      	b.n	8001f88 <set_push+0x98>
			case 3:
				LCD_SetPos(12,2);
 8001f68:	2102      	movs	r1, #2
 8001f6a:	200c      	movs	r0, #12
 8001f6c:	f7ff fa3e 	bl	80013ec <LCD_SetPos>
				LCD_String("falstart");
 8001f70:	480a      	ldr	r0, [pc, #40]	@ (8001f9c <set_push+0xac>)
 8001f72:	f7ff fa1e 	bl	80013b2 <LCD_String>
			break;
 8001f76:	e007      	b.n	8001f88 <set_push+0x98>
			case 4:
				LCD_SetPos(12,2);
 8001f78:	2102      	movs	r1, #2
 8001f7a:	200c      	movs	r0, #12
 8001f7c:	f7ff fa36 	bl	80013ec <LCD_SetPos>
				LCD_String("zvon    ");
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <set_push+0xb0>)
 8001f82:	f7ff fa16 	bl	80013b2 <LCD_String>
			break;
 8001f86:	bf00      	nop
				ST7735_WriteString(0, 90, "zvon    ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
			break;
		}
	#endif

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200001f0 	.word	0x200001f0
 8001f90:	08006450 	.word	0x08006450
 8001f94:	0800645c 	.word	0x0800645c
 8001f98:	08006468 	.word	0x08006468
 8001f9c:	08006474 	.word	0x08006474
 8001fa0:	08006480 	.word	0x08006480

08001fa4 <time_push>:

//Процедура выполнения команды "время"
void time_push(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	flags.f_timer = 1;		//поднимаем флаг таймера
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <time_push+0x6c>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	711a      	strb	r2, [r3, #4]
	vars.seconds = 0;			//обнуляем счетчик секунд
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <time_push+0x70>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
	//Выводим на дисплей значение времени
	#ifdef LCD_2004
		LCD_SetPos(0,2);
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fa18 	bl	80013ec <LCD_SetPos>
		LCD_String(string_2);	//очищаем строку
 8001fbc:	4816      	ldr	r0, [pc, #88]	@ (8002018 <time_push+0x74>)
 8001fbe:	f7ff f9f8 	bl	80013b2 <LCD_String>
		sprintf(str, "%02d:%02d", (uint8_t)vars.seconds/60, (uint8_t)vars.seconds%60);
 8001fc2:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <time_push+0x70>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <time_push+0x78>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <time_push+0x70>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <time_push+0x78>)
 8001fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe0:	0959      	lsrs	r1, r3, #5
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	1a5b      	subs	r3, r3, r1
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4602      	mov	r2, r0
 8001ff0:	490b      	ldr	r1, [pc, #44]	@ (8002020 <time_push+0x7c>)
 8001ff2:	480c      	ldr	r0, [pc, #48]	@ (8002024 <time_push+0x80>)
 8001ff4:	f003 f9d0 	bl	8005398 <siprintf>
		LCD_SetPos(0,2);
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff f9f6 	bl	80013ec <LCD_SetPos>
		LCD_String(str);
 8002000:	4808      	ldr	r0, [pc, #32]	@ (8002024 <time_push+0x80>)
 8002002:	f7ff f9d6 	bl	80013b2 <LCD_String>
	#ifdef ST_7735
		sprintf(str, "%02d:%02d", vars.seconds/60, vars.seconds%60);
		ST7735_WriteString(0, 110, str, Font_11x18, ST7735_WHITE, ST7735_BLACK);
	#endif
	//воспроизводим нужный звуковой айл
	mp3_play(MP3_START);
 8002006:	2005      	movs	r0, #5
 8002008:	f7fe f988 	bl	800031c <mp3_play>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200001e8 	.word	0x200001e8
 8002014:	200001f0 	.word	0x200001f0
 8002018:	20000074 	.word	0x20000074
 800201c:	88888889 	.word	0x88888889
 8002020:	0800648c 	.word	0x0800648c
 8002024:	200001a8 	.word	0x200001a8

08002028 <order_processing>:

//Процедура формирования очереди нажатий
void order_processing(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09c      	sub	sp, #112	@ 0x70
 800202c:	af00      	add	r7, sp, #0
	uint32_t time_to_sort[NUM_OF_SLAVES];
	//uint32_t buts_to_sort[NUM_OF_SLAVES];
	
	uint8_t flag_order[NUM_OF_SLAVES] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
	
	uint8_t order = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	//uint8_t number = 0;
	
	//копируем времена кнопок для сортировки
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002046:	2300      	movs	r3, #0
 8002048:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800204c:	e012      	b.n	8002074 <order_processing+0x4c>
	{ 
		time_to_sort[i] = b_data[i].time;
 800204e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8002052:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002056:	499b      	ldr	r1, [pc, #620]	@ (80022c4 <order_processing+0x29c>)
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	440a      	add	r2, r1
 800205c:	3204      	adds	r2, #4
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3370      	adds	r3, #112	@ 0x70
 8002064:	443b      	add	r3, r7
 8002066:	f843 2c58 	str.w	r2, [r3, #-88]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800206a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800206e:	3301      	adds	r3, #1
 8002070:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002074:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002078:	2b13      	cmp	r3, #19
 800207a:	d9e8      	bls.n	800204e <order_processing+0x26>
	}
	//сортируем времена
	sort_data(time_to_sort);
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdfb 	bl	8001c7c <sort_data>
	
	//находим 
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002086:	2300      	movs	r3, #0
 8002088:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800208c:	e052      	b.n	8002134 <order_processing+0x10c>
	{ 
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES; j++) 
 800208e:	2300      	movs	r3, #0
 8002090:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8002094:	e045      	b.n	8002122 <order_processing+0xfa>
		{ 
			//в качестве индекса номер из перемешанного массива для обеспечения более объективного выбора очередности при совпадении времен
			//если время кнопки сопадает со следующим по величине, точно нажималась и соответствующий флаг учета очереди не поднят
			if ((b_data[slave_nums[j]].time == time_to_sort[i]) && (b_data[slave_nums[j]].time != MAX_TIME) && (!flag_order[slave_nums[j]]) )
 8002096:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800209a:	4a8b      	ldr	r2, [pc, #556]	@ (80022c8 <order_processing+0x2a0>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	4a89      	ldr	r2, [pc, #548]	@ (80022c4 <order_processing+0x29c>)
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3370      	adds	r3, #112	@ 0x70
 80020b0:	443b      	add	r3, r7
 80020b2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d12e      	bne.n	8002118 <order_processing+0xf0>
 80020ba:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80020be:	4a82      	ldr	r2, [pc, #520]	@ (80022c8 <order_processing+0x2a0>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	4a80      	ldr	r2, [pc, #512]	@ (80022c4 <order_processing+0x29c>)
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d022      	beq.n	8002118 <order_processing+0xf0>
 80020d2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80020d6:	4a7c      	ldr	r2, [pc, #496]	@ (80022c8 <order_processing+0x2a0>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	3370      	adds	r3, #112	@ 0x70
 80020dc:	443b      	add	r3, r7
 80020de:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <order_processing+0xf0>
			{
				order++;																	//переходим к следующему значению очереди
 80020e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020ea:	3301      	adds	r3, #1
 80020ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				b_data[slave_nums[j]].push_order = order;	//присваиваем соответствующий номер в очереди кнопке
 80020f0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80020f4:	4a74      	ldr	r2, [pc, #464]	@ (80022c8 <order_processing+0x2a0>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	4a72      	ldr	r2, [pc, #456]	@ (80022c4 <order_processing+0x29c>)
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	330d      	adds	r3, #13
 8002100:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002104:	701a      	strb	r2, [r3, #0]
				flag_order[slave_nums[j]] = 1;						//поднимаем флаг учета
 8002106:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800210a:	4a6f      	ldr	r2, [pc, #444]	@ (80022c8 <order_processing+0x2a0>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	3370      	adds	r3, #112	@ 0x70
 8002110:	443b      	add	r3, r7
 8002112:	2201      	movs	r2, #1
 8002114:	f803 2c6c 	strb.w	r2, [r3, #-108]
		for(uint8_t j = 0 ; j < NUM_OF_SLAVES; j++) 
 8002118:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800211c:	3301      	adds	r3, #1
 800211e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8002122:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002126:	2b13      	cmp	r3, #19
 8002128:	d9b5      	bls.n	8002096 <order_processing+0x6e>
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800212a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800212e:	3301      	adds	r3, #1
 8002130:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8002134:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002138:	2b13      	cmp	r3, #19
 800213a:	d9a8      	bls.n	800208e <order_processing+0x66>
			}
		}
	}
	
	//отсылаем в последовательный порт символы в нужной последовательности
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 800213c:	2300      	movs	r3, #0
 800213e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002142:	e02d      	b.n	80021a0 <order_processing+0x178>
	{ 
		//если номер в очереди соответствует текущему значению счетчика очереди и кнопка нажималась
		if ((b_data[i].push_order == vars.send_order_count) && (b_data[i].time != MAX_TIME))
 8002144:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002148:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <order_processing+0x29c>)
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	4413      	add	r3, r2
 800214e:	330d      	adds	r3, #13
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <order_processing+0x2a4>)
 8002154:	7c9b      	ldrb	r3, [r3, #18]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	429a      	cmp	r2, r3
 800215a:	d11c      	bne.n	8002196 <order_processing+0x16e>
 800215c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002160:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <order_processing+0x29c>)
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d012      	beq.n	8002196 <order_processing+0x16e>
		{
			sprintf(str,"%c",char_to_send[i]);		
 8002170:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002174:	4a56      	ldr	r2, [pc, #344]	@ (80022d0 <order_processing+0x2a8>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	461a      	mov	r2, r3
 800217a:	4956      	ldr	r1, [pc, #344]	@ (80022d4 <order_processing+0x2ac>)
 800217c:	4856      	ldr	r0, [pc, #344]	@ (80022d8 <order_processing+0x2b0>)
 800217e:	f003 f90b 	bl	8005398 <siprintf>
			usart_print(str);					//высылаем символ в порт
 8002182:	4855      	ldr	r0, [pc, #340]	@ (80022d8 <order_processing+0x2b0>)
 8002184:	f7ff f83a 	bl	80011fc <usart_print>
			vars.send_order_count++;	//увеличиваем значение счетчика
 8002188:	4b50      	ldr	r3, [pc, #320]	@ (80022cc <order_processing+0x2a4>)
 800218a:	7c9b      	ldrb	r3, [r3, #18]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b4e      	ldr	r3, [pc, #312]	@ (80022cc <order_processing+0x2a4>)
 8002194:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002196:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800219a:	3301      	adds	r3, #1
 800219c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80021a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80021a4:	2b13      	cmp	r3, #19
 80021a6:	d9cd      	bls.n	8002144 <order_processing+0x11c>
		}
	}
	
	//расставляем состояния кнопок для отправки и выводим очередь на дисплей
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80021ae:	e07e      	b.n	80022ae <order_processing+0x286>
	{ 
		if (b_data[i].push_order != 0)
 80021b0:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80021b4:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <order_processing+0x29c>)
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	330d      	adds	r3, #13
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d070      	beq.n	80022a4 <order_processing+0x27c>
		{
			if (b_data[i].push_order == 1)
 80021c2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80021c6:	4a3f      	ldr	r2, [pc, #252]	@ (80022c4 <order_processing+0x29c>)
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	330d      	adds	r3, #13
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d108      	bne.n	80021e6 <order_processing+0x1be>
			{
				b_data[i].led_status = LED_STAT_TGL;	//первому в очереди - моргать
 80021d4:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80021d8:	4a3a      	ldr	r2, [pc, #232]	@ (80022c4 <order_processing+0x29c>)
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	330c      	adds	r3, #12
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e007      	b.n	80021f6 <order_processing+0x1ce>
			}
			else
			{
				b_data[i].led_status = LED_STAT_ON;		//оставшиеся нажатые - зажечь
 80021e6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80021ea:	4a36      	ldr	r2, [pc, #216]	@ (80022c4 <order_processing+0x29c>)
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4413      	add	r3, r2
 80021f0:	330c      	adds	r3, #12
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
			//выводим данные на дисплей

			#if NUM_OF_SLAVES == 20

				#ifdef LCD_2004
					LCD_SetPos(b_data[i].number, 1);
 80021f6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80021fa:	4a32      	ldr	r2, [pc, #200]	@ (80022c4 <order_processing+0x29c>)
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f8f1 	bl	80013ec <LCD_SetPos>
					LCD_SendChar(char_to_send[b_data[i].push_order - 1]);
 800220a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800220e:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <order_processing+0x29c>)
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	4413      	add	r3, r2
 8002214:	330d      	adds	r3, #13
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <order_processing+0x2a8>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f8b9 	bl	8001396 <LCD_SendChar>
			#endif
			
			

			//воспроизводим звук нажатия в зависимости от состояния таймера и настроек
			if (!b_data[i].pushed)
 8002224:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8002228:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <order_processing+0x29c>)
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4413      	add	r3, r2
 800222e:	3302      	adds	r3, #2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d136      	bne.n	80022a4 <order_processing+0x27c>
			{
				b_data[i].pushed = 1;
 8002236:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800223a:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <order_processing+0x29c>)
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

				if (flags.f_timer)
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <order_processing+0x2b4>)
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <order_processing+0x230>
				{
					mp3_play(MP3_ANSWER);
 8002250:	2002      	movs	r0, #2
 8002252:	f7fe f863 	bl	800031c <mp3_play>
 8002256:	e025      	b.n	80022a4 <order_processing+0x27c>
				}
				else
				{
					switch (vars.sound_switch)
 8002258:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <order_processing+0x2a4>)
 800225a:	7c5b      	ldrb	r3, [r3, #17]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b04      	cmp	r3, #4
 8002260:	d820      	bhi.n	80022a4 <order_processing+0x27c>
 8002262:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <order_processing+0x240>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	0800227d 	.word	0x0800227d
 800226c:	08002285 	.word	0x08002285
 8002270:	0800228d 	.word	0x0800228d
 8002274:	08002295 	.word	0x08002295
 8002278:	0800229d 	.word	0x0800229d
					{
						case 0:
							mp3_play(MP3_SHOOT);
 800227c:	2001      	movs	r0, #1
 800227e:	f7fe f84d 	bl	800031c <mp3_play>
						break;
 8002282:	e00f      	b.n	80022a4 <order_processing+0x27c>
						case 1:
							mp3_play(MP3_ANSWER);
 8002284:	2002      	movs	r0, #2
 8002286:	f7fe f849 	bl	800031c <mp3_play>
						break;
 800228a:	e00b      	b.n	80022a4 <order_processing+0x27c>
						case 2:
							mp3_play(MP3_SVIST);
 800228c:	2003      	movs	r0, #3
 800228e:	f7fe f845 	bl	800031c <mp3_play>
						break;
 8002292:	e007      	b.n	80022a4 <order_processing+0x27c>
						case 3:
							mp3_play(MP3_FALSTART);
 8002294:	2004      	movs	r0, #4
 8002296:	f7fe f841 	bl	800031c <mp3_play>
						break;
 800229a:	e003      	b.n	80022a4 <order_processing+0x27c>
						case 4:
							mp3_play(MP3_ZVON);
 800229c:	2006      	movs	r0, #6
 800229e:	f7fe f83d 	bl	800031c <mp3_play>
						break;
 80022a2:	bf00      	nop
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 80022a4:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022a8:	3301      	adds	r3, #1
 80022aa:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80022ae:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022b2:	2b13      	cmp	r3, #19
 80022b4:	f67f af7c 	bls.w	80021b0 <order_processing+0x188>
					}
				}
			}
		}
	}
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3770      	adds	r7, #112	@ 0x70
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000208 	.word	0x20000208
 80022c8:	20000030 	.word	0x20000030
 80022cc:	200001f0 	.word	0x200001f0
 80022d0:	20000008 	.word	0x20000008
 80022d4:	08006498 	.word	0x08006498
 80022d8:	200001a8 	.word	0x200001a8
 80022dc:	200001e8 	.word	0x200001e8

080022e0 <nxt_push>:

//Процедура выполнения команды "далее"
void nxt_push(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e037      	b.n	800235c <nxt_push+0x7c>
	{ 
		//находим первого в очереди
		if (b_data[i].push_order == 1) 	
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4a22      	ldr	r2, [pc, #136]	@ (8002378 <nxt_push+0x98>)
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	330d      	adds	r3, #13
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d116      	bne.n	800232a <nxt_push+0x4a>
		{
			b_data[i].push_order = 0;						//обнуляем значение номера в очереди
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002378 <nxt_push+0x98>)
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4413      	add	r3, r2
 8002304:	330d      	adds	r3, #13
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
			b_data[i].time = MAX_TIME;					//устанавливаем стандартное значение времени
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <nxt_push+0x98>)
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	601a      	str	r2, [r3, #0]
			b_data[i].led_status = LED_STAT_OFF;//записываем команду на выключения для отправки
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <nxt_push+0x98>)
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	330c      	adds	r3, #12
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e015      	b.n	8002356 <nxt_push+0x76>
		}
		else if (b_data[i].push_order > 1) 		//уменьшаем номер в очереди всем остальным в очереди
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <nxt_push+0x98>)
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	330d      	adds	r3, #13
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d90d      	bls.n	8002356 <nxt_push+0x76>
		{
			b_data[i].push_order--;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	490e      	ldr	r1, [pc, #56]	@ (8002378 <nxt_push+0x98>)
 800233e:	011a      	lsls	r2, r3, #4
 8002340:	440a      	add	r2, r1
 8002342:	320d      	adds	r2, #13
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	3a01      	subs	r2, #1
 8002348:	b2d1      	uxtb	r1, r2
 800234a:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <nxt_push+0x98>)
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	4413      	add	r3, r2
 8002350:	330d      	adds	r3, #13
 8002352:	460a      	mov	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < NUM_OF_SLAVES; i++) 
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	3301      	adds	r3, #1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b13      	cmp	r3, #19
 8002360:	d9c4      	bls.n	80022ec <nxt_push+0xc>
		}
	}
	
	//очищаем отображение очереди на дисплее
	#ifdef LCD_2004
		LCD_SetPos(0,1);
 8002362:	2101      	movs	r1, #1
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff f841 	bl	80013ec <LCD_SetPos>
		LCD_String(string_1);
 800236a:	4804      	ldr	r0, [pc, #16]	@ (800237c <nxt_push+0x9c>)
 800236c:	f7ff f821 	bl	80013b2 <LCD_String>
	
	//формируем новую очередь
	//order_processing();

	//LL_mDelay(200); //пауза против дребезга кнопки
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000208 	.word	0x20000208
 800237c:	2000005c 	.word	0x2000005c

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t err = ERR_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	71fb      	strb	r3, [r7, #7]
	//задаем звуковой сигнал по умолчанию
	vars.sound_switch = 0;
 800238a:	4b84      	ldr	r3, [pc, #528]	@ (800259c <main+0x21c>)
 800238c:	2200      	movs	r2, #0
 800238e:	745a      	strb	r2, [r3, #17]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002390:	f001 f8b6 	bl	8003500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002394:	f000 f916 	bl	80025c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002398:	f7fe f9e2 	bl	8000760 <MX_GPIO_Init>
  MX_SPI1_Init();
 800239c:	f000 f9fc 	bl	8002798 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80023a0:	f000 ffc8 	bl	8003334 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80023a4:	f000 fe66 	bl	8003074 <MX_TIM1_Init>
  MX_I2C1_Init();
 80023a8:	f7fe fb1c 	bl	80009e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80023ac:	f000 fea6 	bl	80030fc <MX_TIM2_Init>
  MX_SPI2_Init();
 80023b0:	f000 fa46 	bl	8002840 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80023b4:	f001 f826 	bl	8003404 <MX_USART3_UART_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
	
	dwt_init();					//инициализируем dwt
 80023b8:	f7ff fca4 	bl	8001d04 <dwt_init>
	spi_init();					//инициализируем SPI
 80023bc:	f7fe fe78 	bl	80010b0 <spi_init>
	nrf24_init();				//инициализируем радиомодуль
 80023c0:	f7fe fd8a 	bl	8000ed8 <nrf24_init>
	usart_init(103);		//инициализируем USART
 80023c4:	2067      	movs	r0, #103	@ 0x67
 80023c6:	f7fe fef3 	bl	80011b0 <usart_init>
	
	display_init();			//инициализируем дисплей
 80023ca:	f7ff fb8f 	bl	8001aec <display_init>

	test_and_info(err);	//тестируем радиомодуль и выводим информацию	
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fc05 	bl	8001be0 <test_and_info>
	
	#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 80023d6:	4872      	ldr	r0, [pc, #456]	@ (80025a0 <main+0x220>)
 80023d8:	f7ff f8b4 	bl	8001544 <LL_IWDG_ReloadCounter>
	#endif
	
	mp3_init();					//инициализируем звуковой модуль
 80023dc:	f7fd ff1e 	bl	800021c <mp3_init>

	refresh_display();	//обновляем дисплей
 80023e0:	f7ff fb5a 	bl	8001a98 <refresh_display>
	
	//разрешаем прерывания, запускаем таймеры
	LL_TIM_EnableIT_UPDATE(TIM1);
 80023e4:	486f      	ldr	r0, [pc, #444]	@ (80025a4 <main+0x224>)
 80023e6:	f7ff f9dd 	bl	80017a4 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);	
 80023ea:	486e      	ldr	r0, [pc, #440]	@ (80025a4 <main+0x224>)
 80023ec:	f7ff f9ac 	bl	8001748 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM2);
 80023f0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80023f4:	f7ff f9d6 	bl	80017a4 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 80023f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80023fc:	f7ff f9a4 	bl	8001748 <LL_TIM_EnableCounter>
	LL_USART_EnableIT_RXNE(USART1);
 8002400:	4869      	ldr	r0, [pc, #420]	@ (80025a8 <main+0x228>)
 8002402:	f7ff f9de 	bl	80017c2 <LL_USART_EnableIT_RXNE>
	
	//инициализируем переменные
	init_variables();
 8002406:	f7ff fa15 	bl	8001834 <init_variables>
	
	//отправляем команду общего сброса
	reset_all();
 800240a:	f7ff fcb5 	bl	8001d78 <reset_all>
	
	//устанавливаем громкость звукового модуля
	mp3_volume(15);
 800240e:	200f      	movs	r0, #15
 8002410:	f7fd fff6 	bl	8000400 <mp3_volume>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	
		//проверяем флаг сброса 
		if (flags.rst_push)			//если поднят флаг
 8002414:	4b65      	ldr	r3, [pc, #404]	@ (80025ac <main+0x22c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <main+0xa8>
		{
			flags.rst_push = 0;		//опускаем флаг
 800241e:	4b63      	ldr	r3, [pc, #396]	@ (80025ac <main+0x22c>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
			rst_push();						//выполняем команду "сброс"
 8002424:	f7ff fd4a 	bl	8001ebc <rst_push>
		}
		
		//следующий блок выполняется с указанной периодичностью
		if ((vars.millis - vars.temp_millis) > SCAN_PERIOD)
 8002428:	4b5c      	ldr	r3, [pc, #368]	@ (800259c <main+0x21c>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b5b      	ldr	r3, [pc, #364]	@ (800259c <main+0x21c>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	f240 80ab 	bls.w	800258e <main+0x20e>
		{
			vars.temp_millis = vars.millis;
 8002438:	4b58      	ldr	r3, [pc, #352]	@ (800259c <main+0x21c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a57      	ldr	r2, [pc, #348]	@ (800259c <main+0x21c>)
 800243e:	60d3      	str	r3, [r2, #12]
			
			tx_buf[0] = b_data[vars.slave_counter].address;	//записываем в буфер очередной адрес
 8002440:	4b56      	ldr	r3, [pc, #344]	@ (800259c <main+0x21c>)
 8002442:	7c1b      	ldrb	r3, [r3, #16]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4a5a      	ldr	r2, [pc, #360]	@ (80025b0 <main+0x230>)
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	3301      	adds	r3, #1
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <main+0x234>)
 8002452:	701a      	strb	r2, [r3, #0]
			tx_buf[1] = b_data[vars.slave_counter].cmd;
 8002454:	4b51      	ldr	r3, [pc, #324]	@ (800259c <main+0x21c>)
 8002456:	7c1b      	ldrb	r3, [r3, #16]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4a55      	ldr	r2, [pc, #340]	@ (80025b0 <main+0x230>)
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	330e      	adds	r3, #14
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <main+0x234>)
 8002466:	705a      	strb	r2, [r3, #1]
			tx_buf[2] = b_data[vars.slave_counter].led_status;
 8002468:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <main+0x21c>)
 800246a:	7c1b      	ldrb	r3, [r3, #16]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <main+0x230>)
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	330c      	adds	r3, #12
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	4b4e      	ldr	r3, [pc, #312]	@ (80025b4 <main+0x234>)
 800247a:	709a      	strb	r2, [r3, #2]
			
			uint16_t temp_crc = crc16_calc(tx_buf, TX_PLOAD_WIDTH - 2);
 800247c:	2109      	movs	r1, #9
 800247e:	484d      	ldr	r0, [pc, #308]	@ (80025b4 <main+0x234>)
 8002480:	f7ff fa48 	bl	8001914 <crc16_calc>
 8002484:	4603      	mov	r3, r0
 8002486:	80bb      	strh	r3, [r7, #4]
			
			tx_buf[TX_PLOAD_WIDTH - 2] = (uint8_t)(temp_crc >> 8);
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	b29b      	uxth	r3, r3
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b48      	ldr	r3, [pc, #288]	@ (80025b4 <main+0x234>)
 8002492:	725a      	strb	r2, [r3, #9]
			tx_buf[TX_PLOAD_WIDTH - 1] = (uint8_t)temp_crc;
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b46      	ldr	r3, [pc, #280]	@ (80025b4 <main+0x234>)
 800249a:	729a      	strb	r2, [r3, #10]
			
			nrf24_send(tx_buf);						//отправляем посылку в эфир
 800249c:	4845      	ldr	r0, [pc, #276]	@ (80025b4 <main+0x234>)
 800249e:	f7fe fcdb 	bl	8000e58 <nrf24_send>

			vars.slave_counter++;
 80024a2:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <main+0x21c>)
 80024a4:	7c1b      	ldrb	r3, [r3, #16]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <main+0x21c>)
 80024ae:	741a      	strb	r2, [r3, #16]
			
			if (vars.slave_counter >= NUM_OF_SLAVES) 
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <main+0x21c>)
 80024b2:	7c1b      	ldrb	r3, [r3, #16]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b13      	cmp	r3, #19
 80024b8:	d922      	bls.n	8002500 <main+0x180>
			{
				vars.slave_counter = 0;			
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <main+0x21c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	741a      	strb	r2, [r3, #16]
				
				if (flags.nxt_push == 1)
 80024c0:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <main+0x22c>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d104      	bne.n	80024d4 <main+0x154>
				{
					flags.nxt_push = 2;
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <main+0x22c>)
 80024cc:	2202      	movs	r2, #2
 80024ce:	705a      	strb	r2, [r3, #1]
					nxt_push();
 80024d0:	f7ff ff06 	bl	80022e0 <nxt_push>
				}
				
				if (flags.set_push)
 80024d4:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <main+0x22c>)
 80024d6:	789b      	ldrb	r3, [r3, #2]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <main+0x168>
				{
					flags.set_push = 0;
 80024de:	4b33      	ldr	r3, [pc, #204]	@ (80025ac <main+0x22c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]
					set_push();
 80024e4:	f7ff fd04 	bl	8001ef0 <set_push>
				}

				if (flags.time_push)
 80024e8:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <main+0x22c>)
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <main+0x17c>
				{
					flags.time_push = 0;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	@ (80025ac <main+0x22c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	70da      	strb	r2, [r3, #3]
					time_push();
 80024f8:	f7ff fd54 	bl	8001fa4 <time_push>
				}
				
				order_processing();
 80024fc:	f7ff fd94 	bl	8002028 <order_processing>
			}
			
			if (flags.nxt_push == 2)
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <main+0x22c>)
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d111      	bne.n	800252e <main+0x1ae>
			{
				vars.bounce_count++;
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <main+0x21c>)
 800250c:	8a9b      	ldrh	r3, [r3, #20]
 800250e:	b29b      	uxth	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b21      	ldr	r3, [pc, #132]	@ (800259c <main+0x21c>)
 8002516:	829a      	strh	r2, [r3, #20]
				if (vars.bounce_count >= BOUNCE_OFFSET)
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <main+0x21c>)
 800251a:	8a9b      	ldrh	r3, [r3, #20]
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b63      	cmp	r3, #99	@ 0x63
 8002520:	d905      	bls.n	800252e <main+0x1ae>
				{
					vars.bounce_count = 0;
 8002522:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <main+0x21c>)
 8002524:	2200      	movs	r2, #0
 8002526:	829a      	strh	r2, [r3, #20]
					flags.nxt_push = 0;
 8002528:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <main+0x22c>)
 800252a:	2200      	movs	r2, #0
 800252c:	705a      	strb	r2, [r3, #1]
				}
			}

			if (flags.f_timer)	//если секундный таймер запущен
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <main+0x22c>)
 8002530:	791b      	ldrb	r3, [r3, #4]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02a      	beq.n	800258e <main+0x20e>
			{			
				//если прошла секунда
				if ((vars.seconds - vars.temp_seconds) > 0)
 8002538:	4b18      	ldr	r3, [pc, #96]	@ (800259c <main+0x21c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <main+0x21c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d024      	beq.n	800258e <main+0x20e>
				{
					uint8_t dec = vars.seconds/60;
 8002544:	4b15      	ldr	r3, [pc, #84]	@ (800259c <main+0x21c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <main+0x238>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	70fb      	strb	r3, [r7, #3]
					uint8_t ed = vars.seconds%60;
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <main+0x21c>)
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <main+0x238>)
 8002558:	fba3 2301 	umull	r2, r3, r3, r1
 800255c:	095a      	lsrs	r2, r3, #5
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	1aca      	subs	r2, r1, r3
 8002568:	4613      	mov	r3, r2
 800256a:	70bb      	strb	r3, [r7, #2]
					vars.temp_seconds = vars.seconds;
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <main+0x21c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <main+0x21c>)
 8002572:	6053      	str	r3, [r2, #4]
					
					//отображаем текущее время на дисплее
					#ifdef LCD_2004
						sprintf(str, "%02d:%02d", dec, ed);
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	78bb      	ldrb	r3, [r7, #2]
 8002578:	4910      	ldr	r1, [pc, #64]	@ (80025bc <main+0x23c>)
 800257a:	4811      	ldr	r0, [pc, #68]	@ (80025c0 <main+0x240>)
 800257c:	f002 ff0c 	bl	8005398 <siprintf>
						LCD_SetPos(0,2);
 8002580:	2102      	movs	r1, #2
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe ff32 	bl	80013ec <LCD_SetPos>
						LCD_String(str);
 8002588:	480d      	ldr	r0, [pc, #52]	@ (80025c0 <main+0x240>)
 800258a:	f7fe ff12 	bl	80013b2 <LCD_String>
					#endif
				}
			}
		}

		nrf24l01_receive();		//прием
 800258e:	f7ff fa13 	bl	80019b8 <nrf24l01_receive>
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		#ifndef DEBUG_MODE
		LL_IWDG_ReloadCounter(IWDG);
 8002592:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <main+0x220>)
 8002594:	f7fe ffd6 	bl	8001544 <LL_IWDG_ReloadCounter>
		if (flags.rst_push)			//если поднят флаг
 8002598:	e73c      	b.n	8002414 <main+0x94>
 800259a:	bf00      	nop
 800259c:	200001f0 	.word	0x200001f0
 80025a0:	40003000 	.word	0x40003000
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40013800 	.word	0x40013800
 80025ac:	200001e8 	.word	0x200001e8
 80025b0:	20000208 	.word	0x20000208
 80025b4:	20000194 	.word	0x20000194
 80025b8:	88888889 	.word	0x88888889
 80025bc:	0800648c 	.word	0x0800648c
 80025c0:	200001a8 	.word	0x200001a8

080025c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7ff f89d 	bl	8001708 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80025ce:	bf00      	nop
 80025d0:	f7ff f8ae 	bl	8001730 <LL_FLASH_GetLatency>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d1fa      	bne.n	80025d0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80025da:	f7fe ffc1 	bl	8001560 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80025de:	bf00      	nop
 80025e0:	f7fe ffcc 	bl	800157c <LL_RCC_HSE_IsReady>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d1fa      	bne.n	80025e0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 80025ea:	f7fe ffd9 	bl	80015a0 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80025ee:	bf00      	nop
 80025f0:	f7fe ffe4 	bl	80015bc <LL_RCC_LSI_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d1fa      	bne.n	80025f0 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80025fa:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80025fe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002602:	f7ff f869 	bl	80016d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002606:	f7ff f847 	bl	8001698 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800260a:	bf00      	nop
 800260c:	f7ff f852 	bl	80016b4 <LL_RCC_PLL_IsReady>
 8002610:	4603      	mov	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d1fa      	bne.n	800260c <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002616:	2000      	movs	r0, #0
 8002618:	f7ff f802 	bl	8001620 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800261c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002620:	f7ff f812 	bl	8001648 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff f823 	bl	8001670 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800262a:	2002      	movs	r0, #2
 800262c:	f7fe ffd8 	bl	80015e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002630:	bf00      	nop
 8002632:	f7fe ffe9 	bl	8001608 <LL_RCC_GetSysClkSource>
 8002636:	4603      	mov	r3, r0
 8002638:	2b08      	cmp	r3, #8
 800263a:	d1fa      	bne.n	8002632 <SystemClock_Config+0x6e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800263c:	4806      	ldr	r0, [pc, #24]	@ (8002658 <SystemClock_Config+0x94>)
 800263e:	f002 fce7 	bl	8005010 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002642:	200f      	movs	r0, #15
 8002644:	f000 ff72 	bl	800352c <HAL_InitTick>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800264e:	f000 f885 	bl	800275c <Error_Handler>
  }
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	044aa200 	.word	0x044aa200

0800265c <rst_callback>:

/* USER CODE BEGIN 4 */

//обработка прерывания по нажатию кнопки "сброс"
void rst_callback(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(RST_GPIO_Port, RST_Pin))	//если состояние входа - 0, кнопка нажата
 8002660:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <rst_callback+0x20>)
 8002666:	f7ff f8ce 	bl	8001806 <LL_GPIO_IsInputPinSet>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <rst_callback+0x1a>
	{
		flags.rst_push = 1;	//поднимаем флаг нажатия 
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <rst_callback+0x24>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
	}
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40010c00 	.word	0x40010c00
 8002680:	200001e8 	.word	0x200001e8

08002684 <nxt_callback>:

//обработка прерывания по нажатию кнопки "далее"
void nxt_callback(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(NEXT_GPIO_Port, NEXT_Pin))	//если состояние входа - 0, кнопка нажата
 8002688:	f640 0108 	movw	r1, #2056	@ 0x808
 800268c:	4807      	ldr	r0, [pc, #28]	@ (80026ac <nxt_callback+0x28>)
 800268e:	f7ff f8ba 	bl	8001806 <LL_GPIO_IsInputPinSet>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <nxt_callback+0x24>
	{
		if (flags.nxt_push == 0)
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <nxt_callback+0x2c>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <nxt_callback+0x24>
		{
			flags.nxt_push = 1;	//поднимаем флаг нажатия
 80026a2:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <nxt_callback+0x2c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
		}
	}
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40010c00 	.word	0x40010c00
 80026b0:	200001e8 	.word	0x200001e8

080026b4 <set_callback>:

//обработка прерывания по нажатию кнопки "установка"
void set_callback(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(SET_GPIO_Port, SET_Pin))	//если состояние входа - 0, кнопка нажата
 80026b8:	f242 0120 	movw	r1, #8224	@ 0x2020
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <set_callback+0x20>)
 80026be:	f7ff f8a2 	bl	8001806 <LL_GPIO_IsInputPinSet>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <set_callback+0x1a>
	{
		flags.set_push = 1;	//поднимаем флаг нажатия 
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <set_callback+0x24>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	709a      	strb	r2, [r3, #2]
	}
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	200001e8 	.word	0x200001e8

080026dc <time_callback>:

//обработка прерывания по нажатию кнопки "время"
void time_callback(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if (!LL_GPIO_IsInputPinSet(TIME_GPIO_Port, TIME_Pin))	//если состояние входа - 0, кнопка нажата
 80026e0:	4905      	ldr	r1, [pc, #20]	@ (80026f8 <time_callback+0x1c>)
 80026e2:	4806      	ldr	r0, [pc, #24]	@ (80026fc <time_callback+0x20>)
 80026e4:	f7ff f88f 	bl	8001806 <LL_GPIO_IsInputPinSet>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <time_callback+0x18>
	{
		flags.time_push = 1;	//поднимаем флаг нажатия 
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <time_callback+0x24>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	70da      	strb	r2, [r3, #3]
	}
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	04800080 	.word	0x04800080
 80026fc:	40010800 	.word	0x40010800
 8002700:	200001e8 	.word	0x200001e8

08002704 <tim1_callback>:

//обработка прерывания таймера 1
void tim1_callback(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1))			//если флаг прерывания т/с
 8002708:	4807      	ldr	r0, [pc, #28]	@ (8002728 <tim1_callback+0x24>)
 800270a:	f7ff f839 	bl	8001780 <LL_TIM_IsActiveFlag_UPDATE>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <tim1_callback+0x20>
	{
		LL_TIM_ClearFlag_UPDATE(TIM1);					//опускаем флаг прерывания
 8002714:	4804      	ldr	r0, [pc, #16]	@ (8002728 <tim1_callback+0x24>)
 8002716:	f7ff f826 	bl	8001766 <LL_TIM_ClearFlag_UPDATE>
		vars.seconds++;													//считаем секунду
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <tim1_callback+0x28>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	4a02      	ldr	r2, [pc, #8]	@ (800272c <tim1_callback+0x28>)
 8002722:	6013      	str	r3, [r2, #0]
	}
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40012c00 	.word	0x40012c00
 800272c:	200001f0 	.word	0x200001f0

08002730 <tim2_callback>:

//обработка прерывания таймера 2
void tim2_callback(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))			//если флаг прерывания таймера поднят
 8002734:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002738:	f7ff f822 	bl	8001780 <LL_TIM_IsActiveFlag_UPDATE>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <tim2_callback+0x24>
	{
		LL_TIM_ClearFlag_UPDATE(TIM2);					//опускаем флаг прерывания
 8002742:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002746:	f7ff f80e 	bl	8001766 <LL_TIM_ClearFlag_UPDATE>
		vars.millis++;													//считаем милисекунду
 800274a:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <tim2_callback+0x28>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	3301      	adds	r3, #1
 8002750:	4a01      	ldr	r2, [pc, #4]	@ (8002758 <tim2_callback+0x28>)
 8002752:	6093      	str	r3, [r2, #8]
	}
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200001f0 	.word	0x200001f0

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <Error_Handler+0x8>

08002768 <LL_APB2_GRP1_EnableClock>:
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	4907      	ldr	r1, [pc, #28]	@ (8002794 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <LL_APB2_GRP1_EnableClock+0x2c>)
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b090      	sub	sp, #64	@ 0x40
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800279e:	f107 0318 	add.w	r3, r7, #24
 80027a2:	2228      	movs	r2, #40	@ 0x28
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fe59 	bl	800545e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80027ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80027be:	f7ff ffd3 	bl	8002768 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80027c2:	2004      	movs	r0, #4
 80027c4:	f7ff ffd0 	bl	8002768 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 80027c8:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 80027cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027ce:	2309      	movs	r3, #9
 80027d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4816      	ldr	r0, [pc, #88]	@ (8002838 <MX_SPI1_Init+0xa0>)
 80027e0:	f002 f881 	bl	80048e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80027e4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80027e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80027ea:	2304      	movs	r3, #4
 80027ec:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4811      	ldr	r0, [pc, #68]	@ (8002838 <MX_SPI1_Init+0xa0>)
 80027f4:	f002 f877 	bl	80048e6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027fc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002800:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800280a:	2300      	movs	r3, #0
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800280e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8002814:	2320      	movs	r3, #32
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002818:	2300      	movs	r3, #0
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002820:	230a      	movs	r3, #10
 8002822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	4619      	mov	r1, r3
 800282a:	4804      	ldr	r0, [pc, #16]	@ (800283c <MX_SPI1_Init+0xa4>)
 800282c:	f002 f9f5 	bl	8004c1a <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3740      	adds	r7, #64	@ 0x40
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40010800 	.word	0x40010800
 800283c:	40013000 	.word	0x40013000

08002840 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002844:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002846:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <MX_SPI2_Init+0x6c>)
 8002848:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_SPI2_Init+0x68>)
 800284c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002850:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002854:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002858:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_SPI2_Init+0x68>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <MX_SPI2_Init+0x68>)
 800286e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002872:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <MX_SPI2_Init+0x68>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002888:	2200      	movs	r2, #0
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <MX_SPI2_Init+0x68>)
 800288e:	220a      	movs	r2, #10
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <MX_SPI2_Init+0x68>)
 8002894:	f001 fddc 	bl	8004450 <HAL_SPI_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800289e:	f7ff ff5d 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000034c 	.word	0x2000034c
 80028ac:	40003800 	.word	0x40003800

080028b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <HAL_SPI_MspInit+0x74>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d124      	bne.n	800291a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028da:	61d3      	str	r3, [r2, #28]
 80028dc:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <HAL_SPI_MspInit+0x78>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002900:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	@ (800292c <HAL_SPI_MspInit+0x7c>)
 8002916:	f000 ff5d 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40003800 	.word	0x40003800
 8002928:	40021000 	.word	0x40021000
 800292c:	40010c00 	.word	0x40010c00

08002930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_MspInit+0x5c>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	4a14      	ldr	r2, [pc, #80]	@ (800298c <HAL_MspInit+0x5c>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6193      	str	r3, [r2, #24]
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_MspInit+0x5c>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <HAL_MspInit+0x5c>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <HAL_MspInit+0x5c>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	61d3      	str	r3, [r2, #28]
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <HAL_MspInit+0x5c>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_MspInit+0x60>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_MspInit+0x60>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000

08002994 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4013      	ands	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40010400 	.word	0x40010400

080029c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80029c8:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <LL_EXTI_ClearFlag_0_31+0x18>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6153      	str	r3, [r2, #20]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40010400 	.word	0x40010400

080029dc <LL_USART_IsActiveFlag_FE>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_USART_IsActiveFlag_NE>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_USART_IsActiveFlag_ORE>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_USART_ClearFlag_FE>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <LL_USART_ClearFlag_NE>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <LL_USART_ClearFlag_ORE>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002abe:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_USART_IsEnabledIT_RXNE>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_USART_ReceiveData8>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b2db      	uxtb	r3, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <NMI_Handler+0x4>

08002b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <HardFault_Handler+0x4>

08002b1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <MemManage_Handler+0x4>

08002b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <BusFault_Handler+0x4>

08002b2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b32:	bf00      	nop
 8002b34:	e7fd      	b.n	8002b32 <UsageFault_Handler+0x4>

08002b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5e:	f000 fd15 	bl	800358c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002b6a:	2004      	movs	r0, #4
 8002b6c:	f7ff ff12 	bl	8002994 <LL_EXTI_IsActiveFlag_0_31>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8002b76:	2004      	movs	r0, #4
 8002b78:	f7ff ff22 	bl	80029c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
		irq_callback();
 8002b7c:	f7fe f9fe 	bl	8000f7c <irq_callback>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8002b88:	2008      	movs	r0, #8
 8002b8a:	f7ff ff03 	bl	8002994 <LL_EXTI_IsActiveFlag_0_31>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <EXTI3_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002b94:	2008      	movs	r0, #8
 8002b96:	f7ff ff13 	bl	80029c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
		nxt_callback();
 8002b9a:	f7ff fd73 	bl	8002684 <nxt_callback>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8002ba6:	2010      	movs	r0, #16
 8002ba8:	f7ff fef4 	bl	8002994 <LL_EXTI_IsActiveFlag_0_31>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8002bb2:	2010      	movs	r0, #16
 8002bb4:	f7ff ff04 	bl	80029c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
		rst_callback();
 8002bb8:	f7ff fd50 	bl	800265c <rst_callback>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f7ff fee5 	bl	8002994 <LL_EXTI_IsActiveFlag_0_31>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8002bd0:	2020      	movs	r0, #32
 8002bd2:	f7ff fef5 	bl	80029c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
		set_callback();
 8002bd6:	f7ff fd6d 	bl	80026b4 <set_callback>
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	tim1_callback();
 8002be2:	f7ff fd8f 	bl	8002704 <tim1_callback>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}

08002bea <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	tim2_callback();
 8002bee:	f7ff fd9f 	bl	8002730 <tim2_callback>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	//Если поднят флаг приема и разрешены прерывания по приему 
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8002bfe:	4829      	ldr	r0, [pc, #164]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c00:	f7ff ff22 	bl	8002a48 <LL_USART_IsActiveFlag_RXNE>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02a      	beq.n	8002c60 <USART1_IRQHandler+0x68>
 8002c0a:	4826      	ldr	r0, [pc, #152]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c0c:	f7ff ff61 	bl	8002ad2 <LL_USART_IsEnabledIT_RXNE>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <USART1_IRQHandler+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c16:	b672      	cpsid	i
}
 8002c18:	bf00      	nop
	{
		__disable_irq();	//отключаем все прерывания
		//Читаем байт из регистра
		uint8_t rbyte =  LL_USART_ReceiveData8(USART1);	
 8002c1a:	4822      	ldr	r0, [pc, #136]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c1c:	f7ff ff6b 	bl	8002af6 <LL_USART_ReceiveData8>
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
		
		if(f_usart_command)	//если поднят флаг приема команды
 8002c24:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <USART1_IRQHandler+0xb0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <USART1_IRQHandler+0x56>
		{
			if (rbyte == USART_RESET)	//если новый байт - команда сброса
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b31      	cmp	r3, #49	@ 0x31
 8002c30:	d103      	bne.n	8002c3a <USART1_IRQHandler+0x42>
			{
				flags.rst_push = 1;			//поднимаем флаг сброса
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <USART1_IRQHandler+0xb4>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e005      	b.n	8002c46 <USART1_IRQHandler+0x4e>
			}
			else if (rbyte == USART_NEXT)//если новый байт - команда "далее"
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b32      	cmp	r3, #50	@ 0x32
 8002c3e:	d102      	bne.n	8002c46 <USART1_IRQHandler+0x4e>
			{
				flags.nxt_push = 1;			//поднимаем флаг
 8002c40:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <USART1_IRQHandler+0xb4>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	705a      	strb	r2, [r3, #1]
			}
			f_usart_command = 0;			//опускаем флаг приема команды
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <USART1_IRQHandler+0xb0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e005      	b.n	8002c5a <USART1_IRQHandler+0x62>
		}
		else
		{
			if (rbyte == USART_COMMAND)	//если пришел байт команды из порта
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b31      	cmp	r3, #49	@ 0x31
 8002c52:	d102      	bne.n	8002c5a <USART1_IRQHandler+0x62>
			{
				f_usart_command = 1;			//поднимаем флаг команды из порта
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <USART1_IRQHandler+0xb0>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c5a:	b662      	cpsie	i
}
 8002c5c:	bf00      	nop
	{
 8002c5e:	e01c      	b.n	8002c9a <USART1_IRQHandler+0xa2>
		}
		__enable_irq();							//включаем все прерывания
	}
	else //сбрасываем посторонние флаги
	{
		if(LL_USART_IsActiveFlag_ORE(USART1))
 8002c60:	4810      	ldr	r0, [pc, #64]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c62:	f7ff fedf 	bl	8002a24 <LL_USART_IsActiveFlag_ORE>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <USART1_IRQHandler+0x7c>
		{
			LL_USART_ClearFlag_ORE(USART1);
 8002c6c:	480d      	ldr	r0, [pc, #52]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c6e:	f7ff ff1f 	bl	8002ab0 <LL_USART_ClearFlag_ORE>
		{
			LL_USART_ClearFlag_NE(USART1);
		}
	}
	
	return;
 8002c72:	e013      	b.n	8002c9c <USART1_IRQHandler+0xa4>
		else if(LL_USART_IsActiveFlag_FE(USART1))
 8002c74:	480b      	ldr	r0, [pc, #44]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c76:	f7ff feb1 	bl	80029dc <LL_USART_IsActiveFlag_FE>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <USART1_IRQHandler+0x90>
			LL_USART_ClearFlag_FE(USART1);
 8002c80:	4808      	ldr	r0, [pc, #32]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c82:	f7ff fef3 	bl	8002a6c <LL_USART_ClearFlag_FE>
	return;
 8002c86:	e009      	b.n	8002c9c <USART1_IRQHandler+0xa4>
		else if(LL_USART_IsActiveFlag_NE(USART1))
 8002c88:	4806      	ldr	r0, [pc, #24]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c8a:	f7ff feb9 	bl	8002a00 <LL_USART_IsActiveFlag_NE>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <USART1_IRQHandler+0xa4>
			LL_USART_ClearFlag_NE(USART1);
 8002c94:	4803      	ldr	r0, [pc, #12]	@ (8002ca4 <USART1_IRQHandler+0xac>)
 8002c96:	f7ff fefa 	bl	8002a8e <LL_USART_ClearFlag_NE>
	return;
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
	
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	200003a4 	.word	0x200003a4
 8002cac:	200001e8 	.word	0x200001e8

08002cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002cb4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cb8:	f7ff fe6c 	bl	8002994 <LL_EXTI_IsActiveFlag_0_31>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002cc2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cc6:	f7ff fe7b 	bl	80029c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
		time_callback();
 8002cca:	f7ff fd07 	bl	80026dc <time_callback>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_getpid>:
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <_kill>:
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	f002 fc17 	bl	800551c <__errno>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2216      	movs	r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_exit>:
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffe7 	bl	8002ce0 <_kill>
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <_exit+0x12>

08002d16 <_read>:
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e00a      	b.n	8002d3e <_read+0x28>
 8002d28:	f3af 8000 	nop.w
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	60ba      	str	r2, [r7, #8]
 8002d34:	b2ca      	uxtb	r2, r1
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf0      	blt.n	8002d28 <_read+0x12>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_write>:
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e009      	b.n	8002d76 <_write+0x26>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f3af 8000 	nop.w
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbf1      	blt.n	8002d62 <_write+0x12>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_close>:
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <_fstat>:
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	2300      	movs	r3, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_isatty>:
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <_lseek>:
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <_sbrk>:
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <_sbrk+0x5c>)
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <_sbrk+0x60>)
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x22>
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <_sbrk+0x64>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <_sbrk+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <_sbrk+0x64>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d207      	bcs.n	8002e28 <_sbrk+0x40>
 8002e18:	f002 fb80 	bl	800551c <__errno>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e009      	b.n	8002e3c <_sbrk+0x54>
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <_sbrk+0x64>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20005000 	.word	0x20005000
 8002e48:	00000400 	.word	0x00000400
 8002e4c:	200003a8 	.word	0x200003a8
 8002e50:	20000500 	.word	0x20000500

08002e54 <SystemInit>:
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <__NVIC_GetPriorityGrouping>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4906      	ldr	r1, [pc, #24]	@ (8002eb0 <__NVIC_EnableIRQ+0x34>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	490c      	ldr	r1, [pc, #48]	@ (8002f00 <__NVIC_SetPriority+0x4c>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	3b04      	subs	r3, #4
 8002eec:	0112      	lsls	r2, r2, #4
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf28      	it	cs
 8002f26:	2304      	movcs	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b03      	subs	r3, #3
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	4313      	orrs	r3, r2
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <LL_APB1_GRP1_EnableClock>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	4907      	ldr	r1, [pc, #28]	@ (8002f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4013      	ands	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <LL_APB2_GRP1_EnableClock>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	4907      	ldr	r1, [pc, #28]	@ (8002fc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <LL_TIM_EnableARRPreload>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_TIM_DisableARRPreload>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <LL_TIM_SetClockSource>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <LL_TIM_SetTriggerOutput>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	605a      	str	r2, [r3, #4]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <LL_TIM_DisableMasterSlaveMode>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
	...

08003074 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003088:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800308c:	f7ff ff86 	bl	8002f9c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003090:	f7ff fee6 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8003094:	4603      	mov	r3, r0
 8003096:	2200      	movs	r2, #0
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff34 	bl	8002f08 <NVIC_EncodePriority>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4619      	mov	r1, r3
 80030a4:	2019      	movs	r0, #25
 80030a6:	f7ff ff05 	bl	8002eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030aa:	2019      	movs	r0, #25
 80030ac:	f7ff fee6 	bl	8002e7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 10000;
 80030b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80030b4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7199;
 80030ba:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 80030be:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	480a      	ldr	r0, [pc, #40]	@ (80030f8 <MX_TIM1_Init+0x84>)
 80030ce:	f001 fe27 	bl	8004d20 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 80030d2:	4809      	ldr	r0, [pc, #36]	@ (80030f8 <MX_TIM1_Init+0x84>)
 80030d4:	f7ff ff7a 	bl	8002fcc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030d8:	2100      	movs	r1, #0
 80030da:	4807      	ldr	r0, [pc, #28]	@ (80030f8 <MX_TIM1_Init+0x84>)
 80030dc:	f7ff ff94 	bl	8003008 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80030e0:	2100      	movs	r1, #0
 80030e2:	4805      	ldr	r0, [pc, #20]	@ (80030f8 <MX_TIM1_Init+0x84>)
 80030e4:	f7ff ffa4 	bl	8003030 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80030e8:	4803      	ldr	r0, [pc, #12]	@ (80030f8 <MX_TIM1_Init+0x84>)
 80030ea:	f7ff ffb3 	bl	8003054 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00

080030fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003110:	2001      	movs	r0, #1
 8003112:	f7ff ff2b 	bl	8002f6c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003116:	f7ff fea3 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 800311a:	4603      	mov	r3, r0
 800311c:	2200      	movs	r2, #0
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fef1 	bl	8002f08 <NVIC_EncodePriority>
 8003126:	4603      	mov	r3, r0
 8003128:	4619      	mov	r1, r3
 800312a:	201c      	movs	r0, #28
 800312c:	f7ff fec2 	bl	8002eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003130:	201c      	movs	r0, #28
 8003132:	f7ff fea3 	bl	8002e7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 10;
 8003136:	230a      	movs	r3, #10
 8003138:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 6539;
 800313e:	f641 138b 	movw	r3, #6539	@ 0x198b
 8003142:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	4619      	mov	r1, r3
 800314c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003150:	f001 fde6 	bl	8004d20 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003154:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003158:	f7ff ff47 	bl	8002fea <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800315c:	2100      	movs	r1, #0
 800315e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003162:	f7ff ff51 	bl	8003008 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003166:	2100      	movs	r1, #0
 8003168:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800316c:	f7ff ff60 	bl	8003030 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003170:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003174:	f7ff ff6e 	bl	8003054 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <__NVIC_GetPriorityGrouping>:
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4906      	ldr	r1, [pc, #24]	@ (80031d0 <__NVIC_EnableIRQ+0x34>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	@ (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	@ (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	@ 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <LL_APB1_GRP1_EnableClock>:
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000

080032bc <LL_APB2_GRP1_EnableClock>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000

080032ec <LL_USART_Enable>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_USART_ConfigAsyncMode>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	615a      	str	r2, [r3, #20]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334e:	463b      	mov	r3, r7
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800335c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003360:	f7ff ffac 	bl	80032bc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003364:	2004      	movs	r0, #4
 8003366:	f7ff ffa9 	bl	80032bc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <MX_USART1_UART_Init+0xc0>)
 800336c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800336e:	2309      	movs	r3, #9
 8003370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	463b      	mov	r3, r7
 800337c:	4619      	mov	r1, r3
 800337e:	481e      	ldr	r0, [pc, #120]	@ (80033f8 <MX_USART1_UART_Init+0xc4>)
 8003380:	f001 fab1 	bl	80048e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003384:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <MX_USART1_UART_Init+0xc8>)
 8003386:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003388:	2304      	movs	r3, #4
 800338a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	463b      	mov	r3, r7
 800338e:	4619      	mov	r1, r3
 8003390:	4819      	ldr	r0, [pc, #100]	@ (80033f8 <MX_USART1_UART_Init+0xc4>)
 8003392:	f001 faa8 	bl	80048e6 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003396:	f7ff fef3 	bl	8003180 <__NVIC_GetPriorityGrouping>
 800339a:	4603      	mov	r3, r0
 800339c:	2200      	movs	r2, #0
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff41 	bl	8003228 <NVIC_EncodePriority>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4619      	mov	r1, r3
 80033aa:	2025      	movs	r0, #37	@ 0x25
 80033ac:	f7ff ff12 	bl	80031d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80033b0:	2025      	movs	r0, #37	@ 0x25
 80033b2:	f7ff fef3 	bl	800319c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80033b6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80033ba:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033c8:	230c      	movs	r3, #12
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	4619      	mov	r1, r3
 80033da:	4809      	ldr	r0, [pc, #36]	@ (8003400 <MX_USART1_UART_Init+0xcc>)
 80033dc:	f001 fd94 	bl	8004f08 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80033e0:	4807      	ldr	r0, [pc, #28]	@ (8003400 <MX_USART1_UART_Init+0xcc>)
 80033e2:	f7ff ff92 	bl	800330a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80033e6:	4806      	ldr	r0, [pc, #24]	@ (8003400 <MX_USART1_UART_Init+0xcc>)
 80033e8:	f7ff ff80 	bl	80032ec <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	3730      	adds	r7, #48	@ 0x30
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	04020002 	.word	0x04020002
 80033f8:	40010800 	.word	0x40010800
 80033fc:	04040004 	.word	0x04040004
 8003400:	40013800 	.word	0x40013800

08003404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	@ 0x30
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	611a      	str	r2, [r3, #16]
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341e:	463b      	mov	r3, r7
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800342c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003430:	f7ff ff2c 	bl	800328c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003434:	2008      	movs	r0, #8
 8003436:	f7ff ff41 	bl	80032bc <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800343a:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <MX_USART3_UART_Init+0xa0>)
 800343c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800343e:	2309      	movs	r3, #9
 8003440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003442:	2303      	movs	r3, #3
 8003444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344a:	463b      	mov	r3, r7
 800344c:	4619      	mov	r1, r3
 800344e:	4816      	ldr	r0, [pc, #88]	@ (80034a8 <MX_USART3_UART_Init+0xa4>)
 8003450:	f001 fa49 	bl	80048e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003454:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <MX_USART3_UART_Init+0xa8>)
 8003456:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003458:	2304      	movs	r3, #4
 800345a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	463b      	mov	r3, r7
 800345e:	4619      	mov	r1, r3
 8003460:	4811      	ldr	r0, [pc, #68]	@ (80034a8 <MX_USART3_UART_Init+0xa4>)
 8003462:	f001 fa40 	bl	80048e6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003466:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800346a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003478:	230c      	movs	r3, #12
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4619      	mov	r1, r3
 800348a:	4809      	ldr	r0, [pc, #36]	@ (80034b0 <MX_USART3_UART_Init+0xac>)
 800348c:	f001 fd3c 	bl	8004f08 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003490:	4807      	ldr	r0, [pc, #28]	@ (80034b0 <MX_USART3_UART_Init+0xac>)
 8003492:	f7ff ff3a 	bl	800330a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003496:	4806      	ldr	r0, [pc, #24]	@ (80034b0 <MX_USART3_UART_Init+0xac>)
 8003498:	f7ff ff28 	bl	80032ec <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	3730      	adds	r7, #48	@ 0x30
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	04040004 	.word	0x04040004
 80034a8:	40010c00 	.word	0x40010c00
 80034ac:	04080008 	.word	0x04080008
 80034b0:	40004800 	.word	0x40004800

080034b4 <Reset_Handler>:
 80034b4:	f7ff fcce 	bl	8002e54 <SystemInit>
 80034b8:	480b      	ldr	r0, [pc, #44]	@ (80034e8 <LoopFillZerobss+0xe>)
 80034ba:	490c      	ldr	r1, [pc, #48]	@ (80034ec <LoopFillZerobss+0x12>)
 80034bc:	4a0c      	ldr	r2, [pc, #48]	@ (80034f0 <LoopFillZerobss+0x16>)
 80034be:	2300      	movs	r3, #0
 80034c0:	e002      	b.n	80034c8 <LoopCopyDataInit>

080034c2 <CopyDataInit>:
 80034c2:	58d4      	ldr	r4, [r2, r3]
 80034c4:	50c4      	str	r4, [r0, r3]
 80034c6:	3304      	adds	r3, #4

080034c8 <LoopCopyDataInit>:
 80034c8:	18c4      	adds	r4, r0, r3
 80034ca:	428c      	cmp	r4, r1
 80034cc:	d3f9      	bcc.n	80034c2 <CopyDataInit>
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <LoopFillZerobss+0x1a>)
 80034d0:	4c09      	ldr	r4, [pc, #36]	@ (80034f8 <LoopFillZerobss+0x1e>)
 80034d2:	2300      	movs	r3, #0
 80034d4:	e001      	b.n	80034da <LoopFillZerobss>

080034d6 <FillZerobss>:
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	3204      	adds	r2, #4

080034da <LoopFillZerobss>:
 80034da:	42a2      	cmp	r2, r4
 80034dc:	d3fb      	bcc.n	80034d6 <FillZerobss>
 80034de:	f002 f823 	bl	8005528 <__libc_init_array>
 80034e2:	f7fe ff4d 	bl	8002380 <main>
 80034e6:	4770      	bx	lr
 80034e8:	20000000 	.word	0x20000000
 80034ec:	2000010c 	.word	0x2000010c
 80034f0:	080065a4 	.word	0x080065a4
 80034f4:	2000010c 	.word	0x2000010c
 80034f8:	200004fc 	.word	0x200004fc

080034fc <ADC1_2_IRQHandler>:
 80034fc:	e7fe      	b.n	80034fc <ADC1_2_IRQHandler>
	...

08003500 <HAL_Init>:
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <HAL_Init+0x28>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_Init+0x28>)
 800350a:	f043 0310 	orr.w	r3, r3, #16
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	2003      	movs	r0, #3
 8003512:	f000 f92b 	bl	800376c <HAL_NVIC_SetPriorityGrouping>
 8003516:	200f      	movs	r0, #15
 8003518:	f000 f808 	bl	800352c <HAL_InitTick>
 800351c:	f7ff fa08 	bl	8002930 <HAL_MspInit>
 8003520:	2300      	movs	r3, #0
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40022000 	.word	0x40022000

0800352c <HAL_InitTick>:
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_InitTick+0x54>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_InitTick+0x58>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003542:	fbb3 f3f1 	udiv	r3, r3, r1
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f935 	bl	80037ba <HAL_SYSTICK_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_InitTick+0x2e>
 8003556:	2301      	movs	r3, #1
 8003558:	e00e      	b.n	8003578 <HAL_InitTick+0x4c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b0f      	cmp	r3, #15
 800355e:	d80a      	bhi.n	8003576 <HAL_InitTick+0x4a>
 8003560:	2200      	movs	r2, #0
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f000 f90b 	bl	8003782 <HAL_NVIC_SetPriority>
 800356c:	4a06      	ldr	r2, [pc, #24]	@ (8003588 <HAL_InitTick+0x5c>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_InitTick+0x4c>
 8003576:	2301      	movs	r3, #1
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200000a4 	.word	0x200000a4
 8003584:	200000ac 	.word	0x200000ac
 8003588:	200000a8 	.word	0x200000a8

0800358c <HAL_IncTick>:
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_IncTick+0x1c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_IncTick+0x20>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	4a03      	ldr	r2, [pc, #12]	@ (80035ac <HAL_IncTick+0x20>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	200000ac 	.word	0x200000ac
 80035ac:	200003ac 	.word	0x200003ac

080035b0 <HAL_GetTick>:
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4b02      	ldr	r3, [pc, #8]	@ (80035c0 <HAL_GetTick+0x10>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	200003ac 	.word	0x200003ac

080035c4 <HAL_Delay>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d005      	beq.n	80035ea <HAL_Delay+0x26>
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_Delay+0x44>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	bf00      	nop
 80035ec:	f7ff ffe0 	bl	80035b0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d8f7      	bhi.n	80035ec <HAL_Delay+0x28>
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200000ac 	.word	0x200000ac

0800360c <__NVIC_SetPriorityGrouping>:
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4a04      	ldr	r2, [pc, #16]	@ (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
 8003658:	4b04      	ldr	r3, [pc, #16]	@ (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_SetPriority>:
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	@ (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	@ (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
 800371c:	4313      	orrs	r3, r2
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	@ 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <SysTick_Config>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff90 	bl	8003670 <__NVIC_SetPriority>
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff49 	bl	800360c <__NVIC_SetPriorityGrouping>
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	f7ff ff5e 	bl	8003654 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff90 	bl	80036c4 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5f 	bl	8003670 <__NVIC_SetPriority>
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_SYSTICK_Config>:
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffb0 	bl	8003728 <SysTick_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_GPIO_Init>:
 80037d4:	b480      	push	{r7}
 80037d6:	b08b      	sub	sp, #44	@ 0x2c
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	2300      	movs	r3, #0
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	e169      	b.n	8003abc <HAL_GPIO_Init+0x2e8>
 80037e8:	2201      	movs	r2, #1
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	429a      	cmp	r2, r3
 8003802:	f040 8158 	bne.w	8003ab6 <HAL_GPIO_Init+0x2e2>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a9a      	ldr	r2, [pc, #616]	@ (8003a74 <HAL_GPIO_Init+0x2a0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d05e      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003810:	4a98      	ldr	r2, [pc, #608]	@ (8003a74 <HAL_GPIO_Init+0x2a0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d875      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003816:	4a98      	ldr	r2, [pc, #608]	@ (8003a78 <HAL_GPIO_Init+0x2a4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d058      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 800381c:	4a96      	ldr	r2, [pc, #600]	@ (8003a78 <HAL_GPIO_Init+0x2a4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d86f      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003822:	4a96      	ldr	r2, [pc, #600]	@ (8003a7c <HAL_GPIO_Init+0x2a8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d052      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003828:	4a94      	ldr	r2, [pc, #592]	@ (8003a7c <HAL_GPIO_Init+0x2a8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d869      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800382e:	4a94      	ldr	r2, [pc, #592]	@ (8003a80 <HAL_GPIO_Init+0x2ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04c      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003834:	4a92      	ldr	r2, [pc, #584]	@ (8003a80 <HAL_GPIO_Init+0x2ac>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d863      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800383a:	4a92      	ldr	r2, [pc, #584]	@ (8003a84 <HAL_GPIO_Init+0x2b0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d046      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 8003840:	4a90      	ldr	r2, [pc, #576]	@ (8003a84 <HAL_GPIO_Init+0x2b0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d85d      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 8003846:	2b12      	cmp	r3, #18
 8003848:	d82a      	bhi.n	80038a0 <HAL_GPIO_Init+0xcc>
 800384a:	2b12      	cmp	r3, #18
 800384c:	d859      	bhi.n	8003902 <HAL_GPIO_Init+0x12e>
 800384e:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <HAL_GPIO_Init+0x80>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	080038cf 	.word	0x080038cf
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038bb 	.word	0x080038bb
 8003860:	080038fd 	.word	0x080038fd
 8003864:	08003903 	.word	0x08003903
 8003868:	08003903 	.word	0x08003903
 800386c:	08003903 	.word	0x08003903
 8003870:	08003903 	.word	0x08003903
 8003874:	08003903 	.word	0x08003903
 8003878:	08003903 	.word	0x08003903
 800387c:	08003903 	.word	0x08003903
 8003880:	08003903 	.word	0x08003903
 8003884:	08003903 	.word	0x08003903
 8003888:	08003903 	.word	0x08003903
 800388c:	08003903 	.word	0x08003903
 8003890:	08003903 	.word	0x08003903
 8003894:	08003903 	.word	0x08003903
 8003898:	080038b1 	.word	0x080038b1
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <HAL_GPIO_Init+0x2b4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0xfa>
 80038a6:	e02c      	b.n	8003902 <HAL_GPIO_Init+0x12e>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	e029      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	e024      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	3308      	adds	r3, #8
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	e01f      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	330c      	adds	r3, #12
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	e01a      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_GPIO_Init+0x108>
 80038d6:	2304      	movs	r3, #4
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	e013      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_GPIO_Init+0x11c>
 80038e4:	2308      	movs	r3, #8
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	e009      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038f0:	2308      	movs	r3, #8
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	615a      	str	r2, [r3, #20]
 80038fa:	e003      	b.n	8003904 <HAL_GPIO_Init+0x130>
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x130>
 8003902:	bf00      	nop
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2bff      	cmp	r3, #255	@ 0xff
 8003908:	d801      	bhi.n	800390e <HAL_GPIO_Init+0x13a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	e001      	b.n	8003912 <HAL_GPIO_Init+0x13e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2bff      	cmp	r3, #255	@ 0xff
 8003918:	d802      	bhi.n	8003920 <HAL_GPIO_Init+0x14c>
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	e002      	b.n	8003926 <HAL_GPIO_Init+0x152>
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	3b08      	subs	r3, #8
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	210f      	movs	r1, #15
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	431a      	orrs	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80b1 	beq.w	8003ab6 <HAL_GPIO_Init+0x2e2>
 8003954:	4b4d      	ldr	r3, [pc, #308]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4a4c      	ldr	r2, [pc, #304]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6193      	str	r3, [r2, #24]
 8003960:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <HAL_GPIO_Init+0x2b8>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a48      	ldr	r2, [pc, #288]	@ (8003a90 <HAL_GPIO_Init+0x2bc>)
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	@ (8003a94 <HAL_GPIO_Init+0x2c0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a98 <HAL_GPIO_Init+0x2c4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00d      	beq.n	80039bc <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3e      	ldr	r2, [pc, #248]	@ (8003a9c <HAL_GPIO_Init+0x2c8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <HAL_GPIO_Init+0x1e4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa0 <HAL_GPIO_Init+0x2cc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_GPIO_Init+0x1e0>
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1ee>
 80039c0:	2300      	movs	r3, #0
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	492f      	ldr	r1, [pc, #188]	@ (8003a90 <HAL_GPIO_Init+0x2bc>)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_GPIO_Init+0x226>
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	492c      	ldr	r1, [pc, #176]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x234>
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4928      	ldr	r1, [pc, #160]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <HAL_GPIO_Init+0x24e>
 8003a14:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4922      	ldr	r1, [pc, #136]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x25c>
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	491e      	ldr	r1, [pc, #120]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_GPIO_Init+0x276>
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4918      	ldr	r1, [pc, #96]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x284>
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	4914      	ldr	r1, [pc, #80]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d021      	beq.n	8003aa8 <HAL_GPIO_Init+0x2d4>
 8003a64:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	490e      	ldr	r1, [pc, #56]	@ (8003aa4 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
 8003a70:	e021      	b.n	8003ab6 <HAL_GPIO_Init+0x2e2>
 8003a72:	bf00      	nop
 8003a74:	10320000 	.word	0x10320000
 8003a78:	10310000 	.word	0x10310000
 8003a7c:	10220000 	.word	0x10220000
 8003a80:	10210000 	.word	0x10210000
 8003a84:	10120000 	.word	0x10120000
 8003a88:	10110000 	.word	0x10110000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010800 	.word	0x40010800
 8003a98:	40010c00 	.word	0x40010c00
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	4909      	ldr	r1, [pc, #36]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	3301      	adds	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f47f ae8e 	bne.w	80037e8 <HAL_GPIO_Init+0x14>
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	372c      	adds	r7, #44	@ 0x2c
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_I2C_Init>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Init+0x12>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e12b      	b.n	8003d46 <HAL_I2C_Init+0x26a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_I2C_Init+0x2c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc ff9c 	bl	8000a40 <HAL_I2C_MspInit>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	@ 0x24
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	f000 fc72 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a81      	ldr	r2, [pc, #516]	@ (8003d50 <HAL_I2C_Init+0x274>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d807      	bhi.n	8003b60 <HAL_I2C_Init+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a80      	ldr	r2, [pc, #512]	@ (8003d54 <HAL_I2C_Init+0x278>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bf94      	ite	ls
 8003b58:	2301      	movls	r3, #1
 8003b5a:	2300      	movhi	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e006      	b.n	8003b6e <HAL_I2C_Init+0x92>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a7d      	ldr	r2, [pc, #500]	@ (8003d58 <HAL_I2C_Init+0x27c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bf94      	ite	ls
 8003b68:	2301      	movls	r3, #1
 8003b6a:	2300      	movhi	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Init+0x9a>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0e7      	b.n	8003d46 <HAL_I2C_Init+0x26a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a78      	ldr	r2, [pc, #480]	@ (8003d5c <HAL_I2C_Init+0x280>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0c9b      	lsrs	r3, r3, #18
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d50 <HAL_I2C_Init+0x274>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d802      	bhi.n	8003bb0 <HAL_I2C_Init+0xd4>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3301      	adds	r3, #1
 8003bae:	e009      	b.n	8003bc4 <HAL_I2C_Init+0xe8>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	4a69      	ldr	r2, [pc, #420]	@ (8003d60 <HAL_I2C_Init+0x284>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	099b      	lsrs	r3, r3, #6
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	495c      	ldr	r1, [pc, #368]	@ (8003d50 <HAL_I2C_Init+0x274>)
 8003be0:	428b      	cmp	r3, r1
 8003be2:	d819      	bhi.n	8003c18 <HAL_I2C_Init+0x13c>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e59      	subs	r1, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf2:	1c59      	adds	r1, r3, #1
 8003bf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_I2C_Init+0x138>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e59      	subs	r1, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	e051      	b.n	8003cb8 <HAL_I2C_Init+0x1dc>
 8003c14:	2304      	movs	r3, #4
 8003c16:	e04f      	b.n	8003cb8 <HAL_I2C_Init+0x1dc>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d111      	bne.n	8003c44 <HAL_I2C_Init+0x168>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1e58      	subs	r0, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	440b      	add	r3, r1
 8003c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e012      	b.n	8003c6a <HAL_I2C_Init+0x18e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e58      	subs	r0, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Init+0x196>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e022      	b.n	8003cb8 <HAL_I2C_Init+0x1dc>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <HAL_I2C_Init+0x1bc>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1e58      	subs	r0, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	440b      	add	r3, r1
 8003c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c96:	e00f      	b.n	8003cb8 <HAL_I2C_Init+0x1dc>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e58      	subs	r0, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	0099      	lsls	r1, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	6809      	ldr	r1, [r1, #0]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61cb      	str	r3, [r1, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ce6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6911      	ldr	r1, [r2, #16]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d44:	2300      	movs	r3, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	000186a0 	.word	0x000186a0
 8003d54:	001e847f 	.word	0x001e847f
 8003d58:	003d08ff 	.word	0x003d08ff
 8003d5c:	431bde83 	.word	0x431bde83
 8003d60:	10624dd3 	.word	0x10624dd3

08003d64 <HAL_I2C_Master_Transmit>:
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	460b      	mov	r3, r1
 8003d72:	817b      	strh	r3, [r7, #10]
 8003d74:	4613      	mov	r3, r2
 8003d76:	813b      	strh	r3, [r7, #8]
 8003d78:	f7ff fc1a 	bl	80035b0 <HAL_GetTick>
 8003d7c:	6178      	str	r0, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	f040 80e0 	bne.w	8003f4c <HAL_I2C_Master_Transmit+0x1e8>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2319      	movs	r3, #25
 8003d92:	2201      	movs	r2, #1
 8003d94:	4970      	ldr	r1, [pc, #448]	@ (8003f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f964 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Master_Transmit+0x42>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0d3      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_I2C_Master_Transmit+0x50>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0cc      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d007      	beq.n	8003dda <HAL_I2C_Master_Transmit+0x76>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	@ 0x21
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2210      	movs	r2, #16
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	893a      	ldrh	r2, [r7, #8]
 8003e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a50      	ldr	r2, [pc, #320]	@ (8003f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8003e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e1c:	8979      	ldrh	r1, [r7, #10]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f89c 	bl	8003f60 <I2C_MasterRequestWrite>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0xce>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e08d      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	e066      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x1b4>
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa22 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0x112>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d107      	bne.n	8003e72 <HAL_I2C_Master_Transmit+0x10e>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	2301      	movs	r3, #1
 8003e74:	e06b      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <HAL_I2C_Master_Transmit+0x188>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_I2C_Master_Transmit+0x188>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	6a39      	ldr	r1, [r7, #32]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa19 	bl	8004328 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <HAL_I2C_Master_Transmit+0x1b4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d107      	bne.n	8003f14 <HAL_I2C_Master_Transmit+0x1b0>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	2301      	movs	r3, #1
 8003f16:	e01a      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d194      	bne.n	8003e4a <HAL_I2C_Master_Transmit+0xe6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_I2C_Master_Transmit+0x1ea>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	00100002 	.word	0x00100002
 8003f5c:	ffff0000 	.word	0xffff0000

08003f60 <I2C_MasterRequestWrite>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	817b      	strh	r3, [r7, #10]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d006      	beq.n	8003f8a <I2C_MasterRequestWrite+0x2a>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d003      	beq.n	8003f8a <I2C_MasterRequestWrite+0x2a>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f88:	d108      	bne.n	8003f9c <I2C_MasterRequestWrite+0x3c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e00b      	b.n	8003fb4 <I2C_MasterRequestWrite+0x54>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	2b12      	cmp	r3, #18
 8003fa2:	d107      	bne.n	8003fb4 <I2C_MasterRequestWrite+0x54>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f84f 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <I2C_MasterRequestWrite+0x88>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fda:	d103      	bne.n	8003fe4 <I2C_MasterRequestWrite+0x84>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e035      	b.n	8004054 <I2C_MasterRequestWrite+0xf4>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff0:	d108      	bne.n	8004004 <I2C_MasterRequestWrite+0xa4>
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e01b      	b.n	800403c <I2C_MasterRequestWrite+0xdc>
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	11db      	asrs	r3, r3, #7
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f063 030f 	orn	r3, r3, #15
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	490e      	ldr	r1, [pc, #56]	@ (800405c <I2C_MasterRequestWrite+0xfc>)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f898 	bl	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_MasterRequestWrite+0xd2>
 800402e:	2301      	movs	r3, #1
 8004030:	e010      	b.n	8004054 <I2C_MasterRequestWrite+0xf4>
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4907      	ldr	r1, [pc, #28]	@ (8004060 <I2C_MasterRequestWrite+0x100>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f888 	bl	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2C_MasterRequestWrite+0xf2>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <I2C_MasterRequestWrite+0xf4>
 8004052:	2300      	movs	r3, #0
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	00010008 	.word	0x00010008
 8004060:	00010002 	.word	0x00010002

08004064 <I2C_WaitOnFlagUntilTimeout>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
 8004074:	e048      	b.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d044      	beq.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
 800407e:	f7ff fa97 	bl	80035b0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d139      	bne.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	e00c      	b.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d116      	bne.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004104:	2301      	movs	r3, #1
 8004106:	e023      	b.n	8004150 <I2C_WaitOnFlagUntilTimeout+0xec>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10d      	bne.n	800412e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	43da      	mvns	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	e00c      	b.n	8004148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	429a      	cmp	r2, r3
 800414c:	d093      	beq.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x12>
 800414e:	2300      	movs	r3, #0
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	e071      	b.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d123      	bne.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004190:	615a      	str	r2, [r3, #20]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80041bc:	2301      	movs	r3, #1
 80041be:	e067      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d041      	beq.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80041c8:	f7ff f9f2 	bl	80035b0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d136      	bne.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10c      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e00b      	b.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	43da      	mvns	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004248:	2301      	movs	r3, #1
 800424a:	e021      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10c      	bne.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e00b      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af6d 	bne.w	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800428e:	2300      	movs	r3, #0
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	e034      	b.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f886 	bl	80043b8 <I2C_IsAcknowledgeFailed>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e034      	b.n	8004320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d028      	beq.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80042be:	f7ff f977 	bl	80035b0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11d      	bne.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b80      	cmp	r3, #128	@ 0x80
 80042e0:	d016      	beq.n	8004310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800430c:	2301      	movs	r3, #1
 800430e:	e007      	b.n	8004320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b80      	cmp	r3, #128	@ 0x80
 800431c:	d1c3      	bne.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800431e:	2300      	movs	r3, #0
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnBTFFlagUntilTimeout>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f83e 	bl	80043b8 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800434e:	f7ff f92f 	bl	80035b0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80043ae:	2300      	movs	r3, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_IsAcknowledgeFailed>:
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d11b      	bne.n	8004408 <I2C_IsAcknowledgeFailed+0x50>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043d8:	615a      	str	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0204 	orr.w	r2, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <I2C_IsAcknowledgeFailed+0x52>
 8004408:	2300      	movs	r3, #0
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_RCC_GetHCLKFreq>:
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
 8004418:	4b02      	ldr	r3, [pc, #8]	@ (8004424 <HAL_RCC_GetHCLKFreq+0x10>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	200000a4 	.word	0x200000a4

08004428 <HAL_RCC_GetPCLK1Freq>:
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
 800442c:	f7ff fff2 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	@ (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	080064ac 	.word	0x080064ac

08004450 <HAL_SPI_Init>:
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Init+0x12>
 800445e:	2301      	movs	r3, #1
 8004460:	e076      	b.n	8004550 <HAL_SPI_Init+0x100>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_SPI_Init+0x2c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004472:	d009      	beq.n	8004488 <HAL_SPI_Init+0x38>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	e005      	b.n	8004488 <HAL_SPI_Init+0x38>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	@ 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_SPI_Init+0x58>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe fa04 	bl	80028b0 <HAL_SPI_MspInit>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	0c1a      	lsrs	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f002 0204 	and.w	r2, r2, #4
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800453e:	61da      	str	r2, [r3, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800454e:	2300      	movs	r3, #0
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <LL_EXTI_EnableIT_0_31>:
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <LL_EXTI_EnableIT_0_31+0x20>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4904      	ldr	r1, [pc, #16]	@ (8004578 <LL_EXTI_EnableIT_0_31+0x20>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010400 	.word	0x40010400

0800457c <LL_EXTI_DisableIT_0_31>:
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <LL_EXTI_DisableIT_0_31+0x20>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	43db      	mvns	r3, r3
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <LL_EXTI_DisableIT_0_31+0x20>)
 800458e:	4013      	ands	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40010400 	.word	0x40010400

080045a0 <LL_EXTI_EnableEvent_0_31>:
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4904      	ldr	r1, [pc, #16]	@ (80045c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010400 	.word	0x40010400

080045c4 <LL_EXTI_DisableEvent_0_31>:
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	40010400 	.word	0x40010400

080045e8 <LL_EXTI_EnableRisingTrig_0_31>:
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	4904      	ldr	r1, [pc, #16]	@ (8004608 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010400 	.word	0x40010400

0800460c <LL_EXTI_DisableRisingTrig_0_31>:
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	43db      	mvns	r3, r3
 800461c:	4903      	ldr	r1, [pc, #12]	@ (800462c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800461e:	4013      	ands	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	40010400 	.word	0x40010400

08004630 <LL_EXTI_EnableFallingTrig_0_31>:
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4904      	ldr	r1, [pc, #16]	@ (8004650 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010400 	.word	0x40010400

08004654 <LL_EXTI_DisableFallingTrig_0_31>:
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	43db      	mvns	r3, r3
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004666:	4013      	ands	r3, r2
 8004668:	60cb      	str	r3, [r1, #12]
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	40010400 	.word	0x40010400

08004678 <LL_EXTI_Init>:
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	791b      	ldrb	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d065      	beq.n	8004758 <LL_EXTI_Init+0xe0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d06b      	beq.n	800476c <LL_EXTI_Init+0xf4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	795b      	ldrb	r3, [r3, #5]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d01c      	beq.n	80046d6 <LL_EXTI_Init+0x5e>
 800469c:	2b02      	cmp	r3, #2
 800469e:	dc25      	bgt.n	80046ec <LL_EXTI_Init+0x74>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <LL_EXTI_Init+0x32>
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d00b      	beq.n	80046c0 <LL_EXTI_Init+0x48>
 80046a8:	e020      	b.n	80046ec <LL_EXTI_Init+0x74>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff88 	bl	80045c4 <LL_EXTI_DisableEvent_0_31>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff4d 	bl	8004558 <LL_EXTI_EnableIT_0_31>
 80046be:	e018      	b.n	80046f2 <LL_EXTI_Init+0x7a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff59 	bl	800457c <LL_EXTI_DisableIT_0_31>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff66 	bl	80045a0 <LL_EXTI_EnableEvent_0_31>
 80046d4:	e00d      	b.n	80046f2 <LL_EXTI_Init+0x7a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ff3c 	bl	8004558 <LL_EXTI_EnableIT_0_31>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff5b 	bl	80045a0 <LL_EXTI_EnableEvent_0_31>
 80046ea:	e002      	b.n	80046f2 <LL_EXTI_Init+0x7a>
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	bf00      	nop
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	799b      	ldrb	r3, [r3, #6]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d038      	beq.n	800476c <LL_EXTI_Init+0xf4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	799b      	ldrb	r3, [r3, #6]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d01c      	beq.n	800473c <LL_EXTI_Init+0xc4>
 8004702:	2b03      	cmp	r3, #3
 8004704:	dc25      	bgt.n	8004752 <LL_EXTI_Init+0xda>
 8004706:	2b01      	cmp	r3, #1
 8004708:	d002      	beq.n	8004710 <LL_EXTI_Init+0x98>
 800470a:	2b02      	cmp	r3, #2
 800470c:	d00b      	beq.n	8004726 <LL_EXTI_Init+0xae>
 800470e:	e020      	b.n	8004752 <LL_EXTI_Init+0xda>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff9d 	bl	8004654 <LL_EXTI_DisableFallingTrig_0_31>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff62 	bl	80045e8 <LL_EXTI_EnableRisingTrig_0_31>
 8004724:	e022      	b.n	800476c <LL_EXTI_Init+0xf4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff6e 	bl	800460c <LL_EXTI_DisableRisingTrig_0_31>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff7b 	bl	8004630 <LL_EXTI_EnableFallingTrig_0_31>
 800473a:	e017      	b.n	800476c <LL_EXTI_Init+0xf4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff51 	bl	80045e8 <LL_EXTI_EnableRisingTrig_0_31>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff70 	bl	8004630 <LL_EXTI_EnableFallingTrig_0_31>
 8004750:	e00c      	b.n	800476c <LL_EXTI_Init+0xf4>
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	e009      	b.n	800476c <LL_EXTI_Init+0xf4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff0d 	bl	800457c <LL_EXTI_DisableIT_0_31>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff2c 	bl	80045c4 <LL_EXTI_DisableEvent_0_31>
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <LL_GPIO_SetPinMode>:
 8004776:	b490      	push	{r4, r7}
 8004778:	b088      	sub	sp, #32
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	4413      	add	r3, r2
 800478c:	461c      	mov	r4, r3
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	210f      	movs	r1, #15
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	4313      	orrs	r3, r2
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	bf00      	nop
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc90      	pop	{r4, r7}
 80047d8:	4770      	bx	lr

080047da <LL_GPIO_SetPinSpeed>:
 80047da:	b490      	push	{r4, r7}
 80047dc:	b088      	sub	sp, #32
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	461a      	mov	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	0e1b      	lsrs	r3, r3, #24
 80047ee:	4413      	add	r3, r2
 80047f0:	461c      	mov	r4, r3
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	4313      	orrs	r3, r2
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bc90      	pop	{r4, r7}
 800483c:	4770      	bx	lr

0800483e <LL_GPIO_SetPinOutputType>:
 800483e:	b490      	push	{r4, r7}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	4413      	add	r3, r2
 8004854:	461c      	mov	r4, r3
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	2104      	movs	r1, #4
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	401a      	ands	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	4313      	orrs	r3, r2
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	bf00      	nop
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bc90      	pop	{r4, r7}
 80048a0:	4770      	bx	lr

080048a2 <LL_GPIO_SetPinPull>:
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	43db      	mvns	r3, r3
 80048b8:	401a      	ands	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	408b      	lsls	r3, r1
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <LL_GPIO_Init>:
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b088      	sub	sp, #32
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e044      	b.n	800499c <LL_GPIO_Init+0xb6>
 8004912:	2201      	movs	r2, #1
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	409a      	lsls	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d03a      	beq.n	8004996 <LL_GPIO_Init+0xb0>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b07      	cmp	r3, #7
 8004924:	d806      	bhi.n	8004934 <LL_GPIO_Init+0x4e>
 8004926:	f240 1201 	movw	r2, #257	@ 0x101
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e008      	b.n	8004946 <LL_GPIO_Init+0x60>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3b08      	subs	r3, #8
 8004938:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d106      	bne.n	800495c <LL_GPIO_Init+0x76>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	461a      	mov	r2, r3
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ffa3 	bl	80048a2 <LL_GPIO_SetPinPull>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	461a      	mov	r2, r3
 8004962:	69b9      	ldr	r1, [r7, #24]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff06 	bl	8004776 <LL_GPIO_SetPinMode>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d003      	beq.n	800497a <LL_GPIO_Init+0x94>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b09      	cmp	r3, #9
 8004978:	d10d      	bne.n	8004996 <LL_GPIO_Init+0xb0>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	461a      	mov	r2, r3
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ff29 	bl	80047da <LL_GPIO_SetPinSpeed>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	461a      	mov	r2, r3
 800498e:	69b9      	ldr	r1, [r7, #24]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff54 	bl	800483e <LL_GPIO_SetPinOutputType>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1b4      	bne.n	8004912 <LL_GPIO_Init+0x2c>
 80049a8:	2300      	movs	r3, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <LL_RCC_GetSysClkSource>:
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4b03      	ldr	r3, [pc, #12]	@ (80049c8 <LL_RCC_GetSysClkSource+0x14>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40021000 	.word	0x40021000

080049cc <LL_RCC_GetAHBPrescaler>:
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <LL_RCC_GetAHBPrescaler+0x14>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	40021000 	.word	0x40021000

080049e4 <LL_RCC_GetAPB1Prescaler>:
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	40021000 	.word	0x40021000

080049fc <LL_RCC_GetAPB2Prescaler>:
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <LL_RCC_GetAPB2Prescaler+0x14>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40021000 	.word	0x40021000

08004a14 <LL_RCC_PLL_GetMainSource>:
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <LL_RCC_PLL_GetMainSource+0x14>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40021000 	.word	0x40021000

08004a2c <LL_RCC_PLL_GetMultiplicator>:
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40021000 	.word	0x40021000

08004a44 <LL_RCC_PLL_GetPrediv>:
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <LL_RCC_PLL_GetPrediv+0x18>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c5b      	lsrs	r3, r3, #17
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000

08004a60 <LL_RCC_GetSystemClocksFreq>:
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	f000 f820 	bl	8004aac <RCC_GetSystemClockFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f83e 	bl	8004af8 <RCC_GetHCLKClockFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f84c 	bl	8004b24 <RCC_GetPCLK1ClockFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f858 	bl	8004b4c <RCC_GetPCLK2ClockFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <RCC_GetSystemClockFreq>:
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	f7ff ff7d 	bl	80049b4 <LL_RCC_GetSysClkSource>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d00c      	beq.n	8004ada <RCC_GetSystemClockFreq+0x2e>
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d80e      	bhi.n	8004ae2 <RCC_GetSystemClockFreq+0x36>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <RCC_GetSystemClockFreq+0x22>
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d003      	beq.n	8004ad4 <RCC_GetSystemClockFreq+0x28>
 8004acc:	e009      	b.n	8004ae2 <RCC_GetSystemClockFreq+0x36>
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <RCC_GetSystemClockFreq+0x48>)
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	e009      	b.n	8004ae8 <RCC_GetSystemClockFreq+0x3c>
 8004ad4:	4b07      	ldr	r3, [pc, #28]	@ (8004af4 <RCC_GetSystemClockFreq+0x48>)
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e006      	b.n	8004ae8 <RCC_GetSystemClockFreq+0x3c>
 8004ada:	f000 f84b 	bl	8004b74 <RCC_PLL_GetFreqDomain_SYS>
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	e002      	b.n	8004ae8 <RCC_GetSystemClockFreq+0x3c>
 8004ae2:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <RCC_GetSystemClockFreq+0x48>)
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	bf00      	nop
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	007a1200 	.word	0x007a1200

08004af8 <RCC_GetHCLKClockFreq>:
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	f7ff ff64 	bl	80049cc <LL_RCC_GetAHBPrescaler>
 8004b04:	4603      	mov	r3, r0
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	4a04      	ldr	r2, [pc, #16]	@ (8004b20 <RCC_GetHCLKClockFreq+0x28>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	40d3      	lsrs	r3, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	0800649c 	.word	0x0800649c

08004b24 <RCC_GetPCLK1ClockFreq>:
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	f7ff ff5a 	bl	80049e4 <LL_RCC_GetAPB1Prescaler>
 8004b30:	4603      	mov	r3, r0
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	4a04      	ldr	r2, [pc, #16]	@ (8004b48 <RCC_GetPCLK1ClockFreq+0x24>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	40d3      	lsrs	r3, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	080064ac 	.word	0x080064ac

08004b4c <RCC_GetPCLK2ClockFreq>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	f7ff ff52 	bl	80049fc <LL_RCC_GetAPB2Prescaler>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	0adb      	lsrs	r3, r3, #11
 8004b5c:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <RCC_GetPCLK2ClockFreq+0x24>)
 8004b5e:	5cd3      	ldrb	r3, [r2, r3]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	40d3      	lsrs	r3, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	080064ac 	.word	0x080064ac

08004b74 <RCC_PLL_GetFreqDomain_SYS>:
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	f7ff ff47 	bl	8004a14 <LL_RCC_PLL_GetMainSource>
 8004b86:	6038      	str	r0, [r7, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d003      	beq.n	8004b9e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004b96:	e00b      	b.n	8004bb0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8004b98:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e00b      	b.n	8004bb6 <RCC_PLL_GetFreqDomain_SYS+0x42>
 8004b9e:	f7ff ff51 	bl	8004a44 <LL_RCC_PLL_GetPrediv>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e002      	b.n	8004bb6 <RCC_PLL_GetFreqDomain_SYS+0x42>
 8004bb0:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	bf00      	nop
 8004bb6:	f7ff ff39 	bl	8004a2c <LL_RCC_PLL_GetMultiplicator>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	0c9b      	lsrs	r3, r3, #18
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	003d0900 	.word	0x003d0900
 8004bd4:	007a1200 	.word	0x007a1200

08004bd8 <LL_SPI_IsEnabled>:
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d101      	bne.n	8004bf0 <LL_SPI_IsEnabled+0x18>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <LL_SPI_IsEnabled+0x1a>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <LL_SPI_SetCRCPolynomial>:
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	611a      	str	r2, [r3, #16]
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <LL_SPI_Init>:
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffd5 	bl	8004bd8 <LL_SPI_IsEnabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d139      	bne.n	8004ca8 <LL_SPI_Init+0x8e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	6811      	ldr	r1, [r2, #0]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	6852      	ldr	r2, [r2, #4]
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	4311      	orrs	r1, r2
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	68d2      	ldr	r2, [r2, #12]
 8004c54:	4311      	orrs	r1, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	6912      	ldr	r2, [r2, #16]
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	6952      	ldr	r2, [r2, #20]
 8004c60:	4311      	orrs	r1, r2
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	6992      	ldr	r2, [r2, #24]
 8004c66:	4311      	orrs	r1, r2
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	69d2      	ldr	r2, [r2, #28]
 8004c6c:	4311      	orrs	r1, r2
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	6a12      	ldr	r2, [r2, #32]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f023 0204 	bic.w	r2, r3, #4
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c96:	d105      	bne.n	8004ca4 <LL_SPI_Init+0x8a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ffac 	bl	8004bfc <LL_SPI_SetCRCPolynomial>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <LL_TIM_SetPrescaler>:
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <LL_TIM_SetAutoReload>:
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <LL_TIM_SetRepetitionCounter>:
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <LL_TIM_GenerateEvent_UPDATE>:
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	615a      	str	r2, [r3, #20]
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
	...

08004d20 <LL_TIM_Init>:
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a27      	ldr	r2, [pc, #156]	@ (8004dd0 <LL_TIM_Init+0xb0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <LL_TIM_Init+0x30>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d007      	beq.n	8004d50 <LL_TIM_Init+0x30>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <LL_TIM_Init+0xb4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <LL_TIM_Init+0x30>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <LL_TIM_Init+0xb8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d106      	bne.n	8004d5e <LL_TIM_Init+0x3e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd0 <LL_TIM_Init+0xb0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <LL_TIM_Init+0x5e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d007      	beq.n	8004d7e <LL_TIM_Init+0x5e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <LL_TIM_Init+0xb4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <LL_TIM_Init+0x5e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <LL_TIM_Init+0xb8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d106      	bne.n	8004d8c <LL_TIM_Init+0x6c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff97 	bl	8004ccc <LL_TIM_SetAutoReload>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff84 	bl	8004cb2 <LL_TIM_SetPrescaler>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <LL_TIM_Init+0xb0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d105      	bne.n	8004dbe <LL_TIM_Init+0x9e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ff94 	bl	8004ce6 <LL_TIM_SetRepetitionCounter>
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ff9e 	bl	8004d00 <LL_TIM_GenerateEvent_UPDATE>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800

08004ddc <LL_USART_IsEnabled>:
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df0:	bf0c      	ite	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	2300      	movne	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <LL_USART_SetStopBitsLength>:
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <LL_USART_SetHWFlowCtrl>:
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	615a      	str	r2, [r3, #20]
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
	...

08004e4c <LL_USART_SetBaudRate>:
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009a      	lsls	r2, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	4a25      	ldr	r2, [pc, #148]	@ (8004f04 <LL_USART_SetBaudRate+0xb8>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	b299      	uxth	r1, r3
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <LL_USART_SetBaudRate+0xb8>)
 8004e90:	fba3 0302 	umull	r0, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2064      	movs	r0, #100	@ 0x64
 8004e98:	fb00 f303 	mul.w	r3, r0, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	3332      	adds	r3, #50	@ 0x32
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <LL_USART_SetBaudRate+0xb8>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	440b      	add	r3, r1
 8004eb4:	b299      	uxth	r1, r3
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eca:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <LL_USART_SetBaudRate+0xb8>)
 8004ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2064      	movs	r0, #100	@ 0x64
 8004ed4:	fb00 f303 	mul.w	r3, r0, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	3332      	adds	r3, #50	@ 0x32
 8004ede:	4a09      	ldr	r2, [pc, #36]	@ (8004f04 <LL_USART_SetBaudRate+0xb8>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	440b      	add	r3, r1
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	51eb851f 	.word	0x51eb851f

08004f08 <LL_USART_Init>:
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	2301      	movs	r3, #1
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff5e 	bl	8004ddc <LL_USART_IsEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d145      	bne.n	8004fb2 <LL_USART_Init+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f2e:	f023 030c 	bic.w	r3, r3, #12
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	6851      	ldr	r1, [r2, #4]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68d2      	ldr	r2, [r2, #12]
 8004f3a:	4311      	orrs	r1, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	6912      	ldr	r2, [r2, #16]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ff57 	bl	8004e02 <LL_USART_SetStopBitsLength>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff63 	bl	8004e26 <LL_USART_SetHWFlowCtrl>
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fd7b 	bl	8004a60 <LL_RCC_GetSystemClocksFreq>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <LL_USART_Init+0xb4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d102      	bne.n	8004f78 <LL_USART_Init+0x70>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e00c      	b.n	8004f92 <LL_USART_Init+0x8a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a11      	ldr	r2, [pc, #68]	@ (8004fc0 <LL_USART_Init+0xb8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d102      	bne.n	8004f86 <LL_USART_Init+0x7e>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e005      	b.n	8004f92 <LL_USART_Init+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <LL_USART_Init+0xbc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <LL_USART_Init+0x8a>
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <LL_USART_Init+0xaa>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <LL_USART_Init+0xaa>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	69b9      	ldr	r1, [r7, #24]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ff4d 	bl	8004e4c <LL_USART_SetBaudRate>
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40004400 	.word	0x40004400
 8004fc4:	40004800 	.word	0x40004800

08004fc8 <LL_mDelay>:
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <LL_mDelay+0x44>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d00c      	beq.n	8004ffa <LL_mDelay+0x32>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	e008      	b.n	8004ffa <LL_mDelay+0x32>
 8004fe8:	4b08      	ldr	r3, [pc, #32]	@ (800500c <LL_mDelay+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <LL_mDelay+0x32>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f3      	bne.n	8004fe8 <LL_mDelay+0x20>
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	e000e010 	.word	0xe000e010

08005010 <LL_SetSystemCoreClock>:
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	4a03      	ldr	r2, [pc, #12]	@ (8005028 <LL_SetSystemCoreClock+0x18>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	200000a4 	.word	0x200000a4

0800502c <malloc>:
 800502c:	4b02      	ldr	r3, [pc, #8]	@ (8005038 <malloc+0xc>)
 800502e:	4601      	mov	r1, r0
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	f000 b825 	b.w	8005080 <_malloc_r>
 8005036:	bf00      	nop
 8005038:	200000bc 	.word	0x200000bc

0800503c <sbrk_aligned>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	4e0f      	ldr	r6, [pc, #60]	@ (800507c <sbrk_aligned+0x40>)
 8005040:	460c      	mov	r4, r1
 8005042:	6831      	ldr	r1, [r6, #0]
 8005044:	4605      	mov	r5, r0
 8005046:	b911      	cbnz	r1, 800504e <sbrk_aligned+0x12>
 8005048:	f000 fa46 	bl	80054d8 <_sbrk_r>
 800504c:	6030      	str	r0, [r6, #0]
 800504e:	4621      	mov	r1, r4
 8005050:	4628      	mov	r0, r5
 8005052:	f000 fa41 	bl	80054d8 <_sbrk_r>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d103      	bne.n	8005062 <sbrk_aligned+0x26>
 800505a:	f04f 34ff 	mov.w	r4, #4294967295
 800505e:	4620      	mov	r0, r4
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d0f8      	beq.n	800505e <sbrk_aligned+0x22>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4628      	mov	r0, r5
 8005070:	f000 fa32 	bl	80054d8 <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d1f2      	bne.n	800505e <sbrk_aligned+0x22>
 8005078:	e7ef      	b.n	800505a <sbrk_aligned+0x1e>
 800507a:	bf00      	nop
 800507c:	200003b0 	.word	0x200003b0

08005080 <_malloc_r>:
 8005080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005084:	1ccd      	adds	r5, r1, #3
 8005086:	f025 0503 	bic.w	r5, r5, #3
 800508a:	3508      	adds	r5, #8
 800508c:	2d0c      	cmp	r5, #12
 800508e:	bf38      	it	cc
 8005090:	250c      	movcc	r5, #12
 8005092:	2d00      	cmp	r5, #0
 8005094:	4606      	mov	r6, r0
 8005096:	db01      	blt.n	800509c <_malloc_r+0x1c>
 8005098:	42a9      	cmp	r1, r5
 800509a:	d904      	bls.n	80050a6 <_malloc_r+0x26>
 800509c:	230c      	movs	r3, #12
 800509e:	6033      	str	r3, [r6, #0]
 80050a0:	2000      	movs	r0, #0
 80050a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800517c <_malloc_r+0xfc>
 80050aa:	f000 f869 	bl	8005180 <__malloc_lock>
 80050ae:	f8d8 3000 	ldr.w	r3, [r8]
 80050b2:	461c      	mov	r4, r3
 80050b4:	bb44      	cbnz	r4, 8005108 <_malloc_r+0x88>
 80050b6:	4629      	mov	r1, r5
 80050b8:	4630      	mov	r0, r6
 80050ba:	f7ff ffbf 	bl	800503c <sbrk_aligned>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	4604      	mov	r4, r0
 80050c2:	d158      	bne.n	8005176 <_malloc_r+0xf6>
 80050c4:	f8d8 4000 	ldr.w	r4, [r8]
 80050c8:	4627      	mov	r7, r4
 80050ca:	2f00      	cmp	r7, #0
 80050cc:	d143      	bne.n	8005156 <_malloc_r+0xd6>
 80050ce:	2c00      	cmp	r4, #0
 80050d0:	d04b      	beq.n	800516a <_malloc_r+0xea>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	4639      	mov	r1, r7
 80050d6:	4630      	mov	r0, r6
 80050d8:	eb04 0903 	add.w	r9, r4, r3
 80050dc:	f000 f9fc 	bl	80054d8 <_sbrk_r>
 80050e0:	4581      	cmp	r9, r0
 80050e2:	d142      	bne.n	800516a <_malloc_r+0xea>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	4630      	mov	r0, r6
 80050e8:	1a6d      	subs	r5, r5, r1
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7ff ffa6 	bl	800503c <sbrk_aligned>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d03a      	beq.n	800516a <_malloc_r+0xea>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	442b      	add	r3, r5
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	f8d8 3000 	ldr.w	r3, [r8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	bb62      	cbnz	r2, 800515c <_malloc_r+0xdc>
 8005102:	f8c8 7000 	str.w	r7, [r8]
 8005106:	e00f      	b.n	8005128 <_malloc_r+0xa8>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	1b52      	subs	r2, r2, r5
 800510c:	d420      	bmi.n	8005150 <_malloc_r+0xd0>
 800510e:	2a0b      	cmp	r2, #11
 8005110:	d917      	bls.n	8005142 <_malloc_r+0xc2>
 8005112:	1961      	adds	r1, r4, r5
 8005114:	42a3      	cmp	r3, r4
 8005116:	6025      	str	r5, [r4, #0]
 8005118:	bf18      	it	ne
 800511a:	6059      	strne	r1, [r3, #4]
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	bf08      	it	eq
 8005120:	f8c8 1000 	streq.w	r1, [r8]
 8005124:	5162      	str	r2, [r4, r5]
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	4630      	mov	r0, r6
 800512a:	f000 f82f 	bl	800518c <__malloc_unlock>
 800512e:	f104 000b 	add.w	r0, r4, #11
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	f020 0007 	bic.w	r0, r0, #7
 8005138:	1ac2      	subs	r2, r0, r3
 800513a:	bf1c      	itt	ne
 800513c:	1a1b      	subne	r3, r3, r0
 800513e:	50a3      	strne	r3, [r4, r2]
 8005140:	e7af      	b.n	80050a2 <_malloc_r+0x22>
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	42a3      	cmp	r3, r4
 8005146:	bf0c      	ite	eq
 8005148:	f8c8 2000 	streq.w	r2, [r8]
 800514c:	605a      	strne	r2, [r3, #4]
 800514e:	e7eb      	b.n	8005128 <_malloc_r+0xa8>
 8005150:	4623      	mov	r3, r4
 8005152:	6864      	ldr	r4, [r4, #4]
 8005154:	e7ae      	b.n	80050b4 <_malloc_r+0x34>
 8005156:	463c      	mov	r4, r7
 8005158:	687f      	ldr	r7, [r7, #4]
 800515a:	e7b6      	b.n	80050ca <_malloc_r+0x4a>
 800515c:	461a      	mov	r2, r3
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	42a3      	cmp	r3, r4
 8005162:	d1fb      	bne.n	800515c <_malloc_r+0xdc>
 8005164:	2300      	movs	r3, #0
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	e7de      	b.n	8005128 <_malloc_r+0xa8>
 800516a:	230c      	movs	r3, #12
 800516c:	4630      	mov	r0, r6
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	f000 f80c 	bl	800518c <__malloc_unlock>
 8005174:	e794      	b.n	80050a0 <_malloc_r+0x20>
 8005176:	6005      	str	r5, [r0, #0]
 8005178:	e7d6      	b.n	8005128 <_malloc_r+0xa8>
 800517a:	bf00      	nop
 800517c:	200003b4 	.word	0x200003b4

08005180 <__malloc_lock>:
 8005180:	4801      	ldr	r0, [pc, #4]	@ (8005188 <__malloc_lock+0x8>)
 8005182:	f000 b9f6 	b.w	8005572 <__retarget_lock_acquire_recursive>
 8005186:	bf00      	nop
 8005188:	200004f8 	.word	0x200004f8

0800518c <__malloc_unlock>:
 800518c:	4801      	ldr	r0, [pc, #4]	@ (8005194 <__malloc_unlock+0x8>)
 800518e:	f000 b9f1 	b.w	8005574 <__retarget_lock_release_recursive>
 8005192:	bf00      	nop
 8005194:	200004f8 	.word	0x200004f8

08005198 <rand>:
 8005198:	4b16      	ldr	r3, [pc, #88]	@ (80051f4 <rand+0x5c>)
 800519a:	b510      	push	{r4, lr}
 800519c:	681c      	ldr	r4, [r3, #0]
 800519e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80051a0:	b9b3      	cbnz	r3, 80051d0 <rand+0x38>
 80051a2:	2018      	movs	r0, #24
 80051a4:	f7ff ff42 	bl	800502c <malloc>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80051ac:	b920      	cbnz	r0, 80051b8 <rand+0x20>
 80051ae:	2152      	movs	r1, #82	@ 0x52
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <rand+0x60>)
 80051b2:	4812      	ldr	r0, [pc, #72]	@ (80051fc <rand+0x64>)
 80051b4:	f000 f9e0 	bl	8005578 <__assert_func>
 80051b8:	4911      	ldr	r1, [pc, #68]	@ (8005200 <rand+0x68>)
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <rand+0x6c>)
 80051bc:	e9c0 1300 	strd	r1, r3, [r0]
 80051c0:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <rand+0x70>)
 80051c2:	2100      	movs	r1, #0
 80051c4:	6083      	str	r3, [r0, #8]
 80051c6:	230b      	movs	r3, #11
 80051c8:	8183      	strh	r3, [r0, #12]
 80051ca:	2001      	movs	r0, #1
 80051cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80051d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80051d2:	480e      	ldr	r0, [pc, #56]	@ (800520c <rand+0x74>)
 80051d4:	690b      	ldr	r3, [r1, #16]
 80051d6:	694c      	ldr	r4, [r1, #20]
 80051d8:	4358      	muls	r0, r3
 80051da:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <rand+0x78>)
 80051dc:	fb02 0004 	mla	r0, r2, r4, r0
 80051e0:	fba3 3202 	umull	r3, r2, r3, r2
 80051e4:	3301      	adds	r3, #1
 80051e6:	eb40 0002 	adc.w	r0, r0, r2
 80051ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80051ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80051f2:	bd10      	pop	{r4, pc}
 80051f4:	200000bc 	.word	0x200000bc
 80051f8:	080064b4 	.word	0x080064b4
 80051fc:	080064cb 	.word	0x080064cb
 8005200:	abcd330e 	.word	0xabcd330e
 8005204:	e66d1234 	.word	0xe66d1234
 8005208:	0005deec 	.word	0x0005deec
 800520c:	5851f42d 	.word	0x5851f42d
 8005210:	4c957f2d 	.word	0x4c957f2d

08005214 <std>:
 8005214:	2300      	movs	r3, #0
 8005216:	b510      	push	{r4, lr}
 8005218:	4604      	mov	r4, r0
 800521a:	e9c0 3300 	strd	r3, r3, [r0]
 800521e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005222:	6083      	str	r3, [r0, #8]
 8005224:	8181      	strh	r1, [r0, #12]
 8005226:	6643      	str	r3, [r0, #100]	@ 0x64
 8005228:	81c2      	strh	r2, [r0, #14]
 800522a:	6183      	str	r3, [r0, #24]
 800522c:	4619      	mov	r1, r3
 800522e:	2208      	movs	r2, #8
 8005230:	305c      	adds	r0, #92	@ 0x5c
 8005232:	f000 f914 	bl	800545e <memset>
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <std+0x58>)
 8005238:	6224      	str	r4, [r4, #32]
 800523a:	6263      	str	r3, [r4, #36]	@ 0x24
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <std+0x5c>)
 800523e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <std+0x60>)
 8005242:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <std+0x64>)
 8005246:	6323      	str	r3, [r4, #48]	@ 0x30
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <std+0x68>)
 800524a:	429c      	cmp	r4, r3
 800524c:	d006      	beq.n	800525c <std+0x48>
 800524e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005252:	4294      	cmp	r4, r2
 8005254:	d002      	beq.n	800525c <std+0x48>
 8005256:	33d0      	adds	r3, #208	@ 0xd0
 8005258:	429c      	cmp	r4, r3
 800525a:	d105      	bne.n	8005268 <std+0x54>
 800525c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f000 b984 	b.w	8005570 <__retarget_lock_init_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	bf00      	nop
 800526c:	080053d9 	.word	0x080053d9
 8005270:	080053fb 	.word	0x080053fb
 8005274:	08005433 	.word	0x08005433
 8005278:	08005457 	.word	0x08005457
 800527c:	200003b8 	.word	0x200003b8

08005280 <stdio_exit_handler>:
 8005280:	4a02      	ldr	r2, [pc, #8]	@ (800528c <stdio_exit_handler+0xc>)
 8005282:	4903      	ldr	r1, [pc, #12]	@ (8005290 <stdio_exit_handler+0x10>)
 8005284:	4803      	ldr	r0, [pc, #12]	@ (8005294 <stdio_exit_handler+0x14>)
 8005286:	f000 b869 	b.w	800535c <_fwalk_sglue>
 800528a:	bf00      	nop
 800528c:	200000b0 	.word	0x200000b0
 8005290:	08005d19 	.word	0x08005d19
 8005294:	200000c0 	.word	0x200000c0

08005298 <cleanup_stdio>:
 8005298:	6841      	ldr	r1, [r0, #4]
 800529a:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <cleanup_stdio+0x34>)
 800529c:	b510      	push	{r4, lr}
 800529e:	4299      	cmp	r1, r3
 80052a0:	4604      	mov	r4, r0
 80052a2:	d001      	beq.n	80052a8 <cleanup_stdio+0x10>
 80052a4:	f000 fd38 	bl	8005d18 <_fflush_r>
 80052a8:	68a1      	ldr	r1, [r4, #8]
 80052aa:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <cleanup_stdio+0x38>)
 80052ac:	4299      	cmp	r1, r3
 80052ae:	d002      	beq.n	80052b6 <cleanup_stdio+0x1e>
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fd31 	bl	8005d18 <_fflush_r>
 80052b6:	68e1      	ldr	r1, [r4, #12]
 80052b8:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <cleanup_stdio+0x3c>)
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d004      	beq.n	80052c8 <cleanup_stdio+0x30>
 80052be:	4620      	mov	r0, r4
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f000 bd28 	b.w	8005d18 <_fflush_r>
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	200003b8 	.word	0x200003b8
 80052d0:	20000420 	.word	0x20000420
 80052d4:	20000488 	.word	0x20000488

080052d8 <global_stdio_init.part.0>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <global_stdio_init.part.0+0x30>)
 80052dc:	4c0b      	ldr	r4, [pc, #44]	@ (800530c <global_stdio_init.part.0+0x34>)
 80052de:	4a0c      	ldr	r2, [pc, #48]	@ (8005310 <global_stdio_init.part.0+0x38>)
 80052e0:	4620      	mov	r0, r4
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2104      	movs	r1, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	f7ff ff94 	bl	8005214 <std>
 80052ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052f0:	2201      	movs	r2, #1
 80052f2:	2109      	movs	r1, #9
 80052f4:	f7ff ff8e 	bl	8005214 <std>
 80052f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052fc:	2202      	movs	r2, #2
 80052fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005302:	2112      	movs	r1, #18
 8005304:	f7ff bf86 	b.w	8005214 <std>
 8005308:	200004f0 	.word	0x200004f0
 800530c:	200003b8 	.word	0x200003b8
 8005310:	08005281 	.word	0x08005281

08005314 <__sfp_lock_acquire>:
 8005314:	4801      	ldr	r0, [pc, #4]	@ (800531c <__sfp_lock_acquire+0x8>)
 8005316:	f000 b92c 	b.w	8005572 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	200004f9 	.word	0x200004f9

08005320 <__sfp_lock_release>:
 8005320:	4801      	ldr	r0, [pc, #4]	@ (8005328 <__sfp_lock_release+0x8>)
 8005322:	f000 b927 	b.w	8005574 <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	200004f9 	.word	0x200004f9

0800532c <__sinit>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	f7ff fff0 	bl	8005314 <__sfp_lock_acquire>
 8005334:	6a23      	ldr	r3, [r4, #32]
 8005336:	b11b      	cbz	r3, 8005340 <__sinit+0x14>
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	f7ff bff0 	b.w	8005320 <__sfp_lock_release>
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__sinit+0x28>)
 8005342:	6223      	str	r3, [r4, #32]
 8005344:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <__sinit+0x2c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f5      	bne.n	8005338 <__sinit+0xc>
 800534c:	f7ff ffc4 	bl	80052d8 <global_stdio_init.part.0>
 8005350:	e7f2      	b.n	8005338 <__sinit+0xc>
 8005352:	bf00      	nop
 8005354:	08005299 	.word	0x08005299
 8005358:	200004f0 	.word	0x200004f0

0800535c <_fwalk_sglue>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4607      	mov	r7, r0
 8005362:	4688      	mov	r8, r1
 8005364:	4614      	mov	r4, r2
 8005366:	2600      	movs	r6, #0
 8005368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800536c:	f1b9 0901 	subs.w	r9, r9, #1
 8005370:	d505      	bpl.n	800537e <_fwalk_sglue+0x22>
 8005372:	6824      	ldr	r4, [r4, #0]
 8005374:	2c00      	cmp	r4, #0
 8005376:	d1f7      	bne.n	8005368 <_fwalk_sglue+0xc>
 8005378:	4630      	mov	r0, r6
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d907      	bls.n	8005394 <_fwalk_sglue+0x38>
 8005384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005388:	3301      	adds	r3, #1
 800538a:	d003      	beq.n	8005394 <_fwalk_sglue+0x38>
 800538c:	4629      	mov	r1, r5
 800538e:	4638      	mov	r0, r7
 8005390:	47c0      	blx	r8
 8005392:	4306      	orrs	r6, r0
 8005394:	3568      	adds	r5, #104	@ 0x68
 8005396:	e7e9      	b.n	800536c <_fwalk_sglue+0x10>

08005398 <siprintf>:
 8005398:	b40e      	push	{r1, r2, r3}
 800539a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800539e:	b500      	push	{lr}
 80053a0:	b09c      	sub	sp, #112	@ 0x70
 80053a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80053a4:	9002      	str	r0, [sp, #8]
 80053a6:	9006      	str	r0, [sp, #24]
 80053a8:	9107      	str	r1, [sp, #28]
 80053aa:	9104      	str	r1, [sp, #16]
 80053ac:	4808      	ldr	r0, [pc, #32]	@ (80053d0 <siprintf+0x38>)
 80053ae:	4909      	ldr	r1, [pc, #36]	@ (80053d4 <siprintf+0x3c>)
 80053b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b4:	9105      	str	r1, [sp, #20]
 80053b6:	6800      	ldr	r0, [r0, #0]
 80053b8:	a902      	add	r1, sp, #8
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	f000 f99e 	bl	80056fc <_svfiprintf_r>
 80053c0:	2200      	movs	r2, #0
 80053c2:	9b02      	ldr	r3, [sp, #8]
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	b01c      	add	sp, #112	@ 0x70
 80053c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053cc:	b003      	add	sp, #12
 80053ce:	4770      	bx	lr
 80053d0:	200000bc 	.word	0x200000bc
 80053d4:	ffff0208 	.word	0xffff0208

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 f868 	bl	80054b4 <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	4605      	mov	r5, r0
 8005404:	05db      	lsls	r3, r3, #23
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	2302      	movs	r3, #2
 800540e:	2200      	movs	r2, #0
 8005410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005414:	f000 f83c 	bl	8005490 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	4632      	mov	r2, r6
 800541c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	4628      	mov	r0, r5
 8005424:	463b      	mov	r3, r7
 8005426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b863 	b.w	80054f8 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f829 	bl	8005490 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b809 	b.w	8005470 <_close_r>

0800545e <memset>:
 800545e:	4603      	mov	r3, r0
 8005460:	4402      	add	r2, r0
 8005462:	4293      	cmp	r3, r2
 8005464:	d100      	bne.n	8005468 <memset+0xa>
 8005466:	4770      	bx	lr
 8005468:	f803 1b01 	strb.w	r1, [r3], #1
 800546c:	e7f9      	b.n	8005462 <memset+0x4>
	...

08005470 <_close_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	2300      	movs	r3, #0
 8005474:	4d05      	ldr	r5, [pc, #20]	@ (800548c <_close_r+0x1c>)
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fd fc84 	bl	8002d88 <_close>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_close_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_close_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	200004f4 	.word	0x200004f4

08005490 <_lseek_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	2200      	movs	r2, #0
 800549a:	4d05      	ldr	r5, [pc, #20]	@ (80054b0 <_lseek_r+0x20>)
 800549c:	602a      	str	r2, [r5, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f7fd fc96 	bl	8002dd0 <_lseek>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_lseek_r+0x1e>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_lseek_r+0x1e>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	200004f4 	.word	0x200004f4

080054b4 <_read_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	4d05      	ldr	r5, [pc, #20]	@ (80054d4 <_read_r+0x20>)
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fd fc27 	bl	8002d16 <_read>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_read_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_read_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200004f4 	.word	0x200004f4

080054d8 <_sbrk_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	2300      	movs	r3, #0
 80054dc:	4d05      	ldr	r5, [pc, #20]	@ (80054f4 <_sbrk_r+0x1c>)
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fd fc80 	bl	8002de8 <_sbrk>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_sbrk_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_sbrk_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200004f4 	.word	0x200004f4

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	2200      	movs	r2, #0
 8005502:	4d05      	ldr	r5, [pc, #20]	@ (8005518 <_write_r+0x20>)
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fd fc22 	bl	8002d50 <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200004f4 	.word	0x200004f4

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	@ (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	200000bc 	.word	0x200000bc

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	2600      	movs	r6, #0
 800552c:	4d0c      	ldr	r5, [pc, #48]	@ (8005560 <__libc_init_array+0x38>)
 800552e:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	f000 ff36 	bl	80063a8 <_init>
 800553c:	2600      	movs	r6, #0
 800553e:	4d0a      	ldr	r5, [pc, #40]	@ (8005568 <__libc_init_array+0x40>)
 8005540:	4c0a      	ldr	r4, [pc, #40]	@ (800556c <__libc_init_array+0x44>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	0800659c 	.word	0x0800659c
 8005564:	0800659c 	.word	0x0800659c
 8005568:	0800659c 	.word	0x0800659c
 800556c:	080065a0 	.word	0x080065a0

08005570 <__retarget_lock_init_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_acquire_recursive>:
 8005572:	4770      	bx	lr

08005574 <__retarget_lock_release_recursive>:
 8005574:	4770      	bx	lr
	...

08005578 <__assert_func>:
 8005578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800557a:	4614      	mov	r4, r2
 800557c:	461a      	mov	r2, r3
 800557e:	4b09      	ldr	r3, [pc, #36]	@ (80055a4 <__assert_func+0x2c>)
 8005580:	4605      	mov	r5, r0
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68d8      	ldr	r0, [r3, #12]
 8005586:	b954      	cbnz	r4, 800559e <__assert_func+0x26>
 8005588:	4b07      	ldr	r3, [pc, #28]	@ (80055a8 <__assert_func+0x30>)
 800558a:	461c      	mov	r4, r3
 800558c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005590:	9100      	str	r1, [sp, #0]
 8005592:	462b      	mov	r3, r5
 8005594:	4905      	ldr	r1, [pc, #20]	@ (80055ac <__assert_func+0x34>)
 8005596:	f000 fbe7 	bl	8005d68 <fiprintf>
 800559a:	f000 fc2d 	bl	8005df8 <abort>
 800559e:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <__assert_func+0x38>)
 80055a0:	e7f4      	b.n	800558c <__assert_func+0x14>
 80055a2:	bf00      	nop
 80055a4:	200000bc 	.word	0x200000bc
 80055a8:	0800655e 	.word	0x0800655e
 80055ac:	08006530 	.word	0x08006530
 80055b0:	08006523 	.word	0x08006523

080055b4 <_free_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4605      	mov	r5, r0
 80055b8:	2900      	cmp	r1, #0
 80055ba:	d040      	beq.n	800563e <_free_r+0x8a>
 80055bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c0:	1f0c      	subs	r4, r1, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfb8      	it	lt
 80055c6:	18e4      	addlt	r4, r4, r3
 80055c8:	f7ff fdda 	bl	8005180 <__malloc_lock>
 80055cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <_free_r+0x8c>)
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	b933      	cbnz	r3, 80055e0 <_free_r+0x2c>
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	6014      	str	r4, [r2, #0]
 80055d6:	4628      	mov	r0, r5
 80055d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055dc:	f7ff bdd6 	b.w	800518c <__malloc_unlock>
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d908      	bls.n	80055f6 <_free_r+0x42>
 80055e4:	6820      	ldr	r0, [r4, #0]
 80055e6:	1821      	adds	r1, r4, r0
 80055e8:	428b      	cmp	r3, r1
 80055ea:	bf01      	itttt	eq
 80055ec:	6819      	ldreq	r1, [r3, #0]
 80055ee:	685b      	ldreq	r3, [r3, #4]
 80055f0:	1809      	addeq	r1, r1, r0
 80055f2:	6021      	streq	r1, [r4, #0]
 80055f4:	e7ed      	b.n	80055d2 <_free_r+0x1e>
 80055f6:	461a      	mov	r2, r3
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	b10b      	cbz	r3, 8005600 <_free_r+0x4c>
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	d9fa      	bls.n	80055f6 <_free_r+0x42>
 8005600:	6811      	ldr	r1, [r2, #0]
 8005602:	1850      	adds	r0, r2, r1
 8005604:	42a0      	cmp	r0, r4
 8005606:	d10b      	bne.n	8005620 <_free_r+0x6c>
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	4401      	add	r1, r0
 800560c:	1850      	adds	r0, r2, r1
 800560e:	4283      	cmp	r3, r0
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	d1e0      	bne.n	80055d6 <_free_r+0x22>
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4408      	add	r0, r1
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	6053      	str	r3, [r2, #4]
 800561e:	e7da      	b.n	80055d6 <_free_r+0x22>
 8005620:	d902      	bls.n	8005628 <_free_r+0x74>
 8005622:	230c      	movs	r3, #12
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	e7d6      	b.n	80055d6 <_free_r+0x22>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	6054      	str	r4, [r2, #4]
 800563c:	e7cb      	b.n	80055d6 <_free_r+0x22>
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	200003b4 	.word	0x200003b4

08005644 <__ssputs_r>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	461f      	mov	r7, r3
 800564a:	688e      	ldr	r6, [r1, #8]
 800564c:	4682      	mov	sl, r0
 800564e:	42be      	cmp	r6, r7
 8005650:	460c      	mov	r4, r1
 8005652:	4690      	mov	r8, r2
 8005654:	680b      	ldr	r3, [r1, #0]
 8005656:	d82d      	bhi.n	80056b4 <__ssputs_r+0x70>
 8005658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800565c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005660:	d026      	beq.n	80056b0 <__ssputs_r+0x6c>
 8005662:	6965      	ldr	r5, [r4, #20]
 8005664:	6909      	ldr	r1, [r1, #16]
 8005666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566a:	eba3 0901 	sub.w	r9, r3, r1
 800566e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005672:	1c7b      	adds	r3, r7, #1
 8005674:	444b      	add	r3, r9
 8005676:	106d      	asrs	r5, r5, #1
 8005678:	429d      	cmp	r5, r3
 800567a:	bf38      	it	cc
 800567c:	461d      	movcc	r5, r3
 800567e:	0553      	lsls	r3, r2, #21
 8005680:	d527      	bpl.n	80056d2 <__ssputs_r+0x8e>
 8005682:	4629      	mov	r1, r5
 8005684:	f7ff fcfc 	bl	8005080 <_malloc_r>
 8005688:	4606      	mov	r6, r0
 800568a:	b360      	cbz	r0, 80056e6 <__ssputs_r+0xa2>
 800568c:	464a      	mov	r2, r9
 800568e:	6921      	ldr	r1, [r4, #16]
 8005690:	f000 fba4 	bl	8005ddc <memcpy>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	6126      	str	r6, [r4, #16]
 80056a2:	444e      	add	r6, r9
 80056a4:	6026      	str	r6, [r4, #0]
 80056a6:	463e      	mov	r6, r7
 80056a8:	6165      	str	r5, [r4, #20]
 80056aa:	eba5 0509 	sub.w	r5, r5, r9
 80056ae:	60a5      	str	r5, [r4, #8]
 80056b0:	42be      	cmp	r6, r7
 80056b2:	d900      	bls.n	80056b6 <__ssputs_r+0x72>
 80056b4:	463e      	mov	r6, r7
 80056b6:	4632      	mov	r2, r6
 80056b8:	4641      	mov	r1, r8
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	f000 fb66 	bl	8005d8c <memmove>
 80056c0:	2000      	movs	r0, #0
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	1b9b      	subs	r3, r3, r6
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	4433      	add	r3, r6
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d2:	462a      	mov	r2, r5
 80056d4:	f000 fb97 	bl	8005e06 <_realloc_r>
 80056d8:	4606      	mov	r6, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	d1e0      	bne.n	80056a0 <__ssputs_r+0x5c>
 80056de:	4650      	mov	r0, sl
 80056e0:	6921      	ldr	r1, [r4, #16]
 80056e2:	f7ff ff67 	bl	80055b4 <_free_r>
 80056e6:	230c      	movs	r3, #12
 80056e8:	f8ca 3000 	str.w	r3, [sl]
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	e7e9      	b.n	80056ce <__ssputs_r+0x8a>
	...

080056fc <_svfiprintf_r>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4698      	mov	r8, r3
 8005702:	898b      	ldrh	r3, [r1, #12]
 8005704:	4607      	mov	r7, r0
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	460d      	mov	r5, r1
 800570a:	4614      	mov	r4, r2
 800570c:	b09d      	sub	sp, #116	@ 0x74
 800570e:	d510      	bpl.n	8005732 <_svfiprintf_r+0x36>
 8005710:	690b      	ldr	r3, [r1, #16]
 8005712:	b973      	cbnz	r3, 8005732 <_svfiprintf_r+0x36>
 8005714:	2140      	movs	r1, #64	@ 0x40
 8005716:	f7ff fcb3 	bl	8005080 <_malloc_r>
 800571a:	6028      	str	r0, [r5, #0]
 800571c:	6128      	str	r0, [r5, #16]
 800571e:	b930      	cbnz	r0, 800572e <_svfiprintf_r+0x32>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	b01d      	add	sp, #116	@ 0x74
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	2340      	movs	r3, #64	@ 0x40
 8005730:	616b      	str	r3, [r5, #20]
 8005732:	2300      	movs	r3, #0
 8005734:	9309      	str	r3, [sp, #36]	@ 0x24
 8005736:	2320      	movs	r3, #32
 8005738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800573c:	2330      	movs	r3, #48	@ 0x30
 800573e:	f04f 0901 	mov.w	r9, #1
 8005742:	f8cd 800c 	str.w	r8, [sp, #12]
 8005746:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80058e0 <_svfiprintf_r+0x1e4>
 800574a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800574e:	4623      	mov	r3, r4
 8005750:	469a      	mov	sl, r3
 8005752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005756:	b10a      	cbz	r2, 800575c <_svfiprintf_r+0x60>
 8005758:	2a25      	cmp	r2, #37	@ 0x25
 800575a:	d1f9      	bne.n	8005750 <_svfiprintf_r+0x54>
 800575c:	ebba 0b04 	subs.w	fp, sl, r4
 8005760:	d00b      	beq.n	800577a <_svfiprintf_r+0x7e>
 8005762:	465b      	mov	r3, fp
 8005764:	4622      	mov	r2, r4
 8005766:	4629      	mov	r1, r5
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff ff6b 	bl	8005644 <__ssputs_r>
 800576e:	3001      	adds	r0, #1
 8005770:	f000 80a7 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005776:	445a      	add	r2, fp
 8005778:	9209      	str	r2, [sp, #36]	@ 0x24
 800577a:	f89a 3000 	ldrb.w	r3, [sl]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 809f 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005784:	2300      	movs	r3, #0
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578e:	f10a 0a01 	add.w	sl, sl, #1
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	9307      	str	r3, [sp, #28]
 8005796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800579a:	931a      	str	r3, [sp, #104]	@ 0x68
 800579c:	4654      	mov	r4, sl
 800579e:	2205      	movs	r2, #5
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	484e      	ldr	r0, [pc, #312]	@ (80058e0 <_svfiprintf_r+0x1e4>)
 80057a6:	f000 fb0b 	bl	8005dc0 <memchr>
 80057aa:	9a04      	ldr	r2, [sp, #16]
 80057ac:	b9d8      	cbnz	r0, 80057e6 <_svfiprintf_r+0xea>
 80057ae:	06d0      	lsls	r0, r2, #27
 80057b0:	bf44      	itt	mi
 80057b2:	2320      	movmi	r3, #32
 80057b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057b8:	0711      	lsls	r1, r2, #28
 80057ba:	bf44      	itt	mi
 80057bc:	232b      	movmi	r3, #43	@ 0x2b
 80057be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057c2:	f89a 3000 	ldrb.w	r3, [sl]
 80057c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c8:	d015      	beq.n	80057f6 <_svfiprintf_r+0xfa>
 80057ca:	4654      	mov	r4, sl
 80057cc:	2000      	movs	r0, #0
 80057ce:	f04f 0c0a 	mov.w	ip, #10
 80057d2:	9a07      	ldr	r2, [sp, #28]
 80057d4:	4621      	mov	r1, r4
 80057d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057da:	3b30      	subs	r3, #48	@ 0x30
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d94b      	bls.n	8005878 <_svfiprintf_r+0x17c>
 80057e0:	b1b0      	cbz	r0, 8005810 <_svfiprintf_r+0x114>
 80057e2:	9207      	str	r2, [sp, #28]
 80057e4:	e014      	b.n	8005810 <_svfiprintf_r+0x114>
 80057e6:	eba0 0308 	sub.w	r3, r0, r8
 80057ea:	fa09 f303 	lsl.w	r3, r9, r3
 80057ee:	4313      	orrs	r3, r2
 80057f0:	46a2      	mov	sl, r4
 80057f2:	9304      	str	r3, [sp, #16]
 80057f4:	e7d2      	b.n	800579c <_svfiprintf_r+0xa0>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	1d19      	adds	r1, r3, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	9103      	str	r1, [sp, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfbb      	ittet	lt
 8005802:	425b      	neglt	r3, r3
 8005804:	f042 0202 	orrlt.w	r2, r2, #2
 8005808:	9307      	strge	r3, [sp, #28]
 800580a:	9307      	strlt	r3, [sp, #28]
 800580c:	bfb8      	it	lt
 800580e:	9204      	strlt	r2, [sp, #16]
 8005810:	7823      	ldrb	r3, [r4, #0]
 8005812:	2b2e      	cmp	r3, #46	@ 0x2e
 8005814:	d10a      	bne.n	800582c <_svfiprintf_r+0x130>
 8005816:	7863      	ldrb	r3, [r4, #1]
 8005818:	2b2a      	cmp	r3, #42	@ 0x2a
 800581a:	d132      	bne.n	8005882 <_svfiprintf_r+0x186>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	3402      	adds	r4, #2
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	9203      	str	r2, [sp, #12]
 8005826:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80058e4 <_svfiprintf_r+0x1e8>
 8005830:	2203      	movs	r2, #3
 8005832:	4650      	mov	r0, sl
 8005834:	7821      	ldrb	r1, [r4, #0]
 8005836:	f000 fac3 	bl	8005dc0 <memchr>
 800583a:	b138      	cbz	r0, 800584c <_svfiprintf_r+0x150>
 800583c:	2240      	movs	r2, #64	@ 0x40
 800583e:	9b04      	ldr	r3, [sp, #16]
 8005840:	eba0 000a 	sub.w	r0, r0, sl
 8005844:	4082      	lsls	r2, r0
 8005846:	4313      	orrs	r3, r2
 8005848:	3401      	adds	r4, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005850:	2206      	movs	r2, #6
 8005852:	4825      	ldr	r0, [pc, #148]	@ (80058e8 <_svfiprintf_r+0x1ec>)
 8005854:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005858:	f000 fab2 	bl	8005dc0 <memchr>
 800585c:	2800      	cmp	r0, #0
 800585e:	d036      	beq.n	80058ce <_svfiprintf_r+0x1d2>
 8005860:	4b22      	ldr	r3, [pc, #136]	@ (80058ec <_svfiprintf_r+0x1f0>)
 8005862:	bb1b      	cbnz	r3, 80058ac <_svfiprintf_r+0x1b0>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	3308      	adds	r3, #8
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005872:	4433      	add	r3, r6
 8005874:	9309      	str	r3, [sp, #36]	@ 0x24
 8005876:	e76a      	b.n	800574e <_svfiprintf_r+0x52>
 8005878:	460c      	mov	r4, r1
 800587a:	2001      	movs	r0, #1
 800587c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005880:	e7a8      	b.n	80057d4 <_svfiprintf_r+0xd8>
 8005882:	2300      	movs	r3, #0
 8005884:	f04f 0c0a 	mov.w	ip, #10
 8005888:	4619      	mov	r1, r3
 800588a:	3401      	adds	r4, #1
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	4620      	mov	r0, r4
 8005890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005894:	3a30      	subs	r2, #48	@ 0x30
 8005896:	2a09      	cmp	r2, #9
 8005898:	d903      	bls.n	80058a2 <_svfiprintf_r+0x1a6>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c6      	beq.n	800582c <_svfiprintf_r+0x130>
 800589e:	9105      	str	r1, [sp, #20]
 80058a0:	e7c4      	b.n	800582c <_svfiprintf_r+0x130>
 80058a2:	4604      	mov	r4, r0
 80058a4:	2301      	movs	r3, #1
 80058a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058aa:	e7f0      	b.n	800588e <_svfiprintf_r+0x192>
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	462a      	mov	r2, r5
 80058b2:	4638      	mov	r0, r7
 80058b4:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <_svfiprintf_r+0x1f4>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	f3af 8000 	nop.w
 80058bc:	1c42      	adds	r2, r0, #1
 80058be:	4606      	mov	r6, r0
 80058c0:	d1d6      	bne.n	8005870 <_svfiprintf_r+0x174>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	065b      	lsls	r3, r3, #25
 80058c6:	f53f af2d 	bmi.w	8005724 <_svfiprintf_r+0x28>
 80058ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058cc:	e72c      	b.n	8005728 <_svfiprintf_r+0x2c>
 80058ce:	ab03      	add	r3, sp, #12
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	462a      	mov	r2, r5
 80058d4:	4638      	mov	r0, r7
 80058d6:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <_svfiprintf_r+0x1f4>)
 80058d8:	a904      	add	r1, sp, #16
 80058da:	f000 f87d 	bl	80059d8 <_printf_i>
 80058de:	e7ed      	b.n	80058bc <_svfiprintf_r+0x1c0>
 80058e0:	0800655f 	.word	0x0800655f
 80058e4:	08006565 	.word	0x08006565
 80058e8:	08006569 	.word	0x08006569
 80058ec:	00000000 	.word	0x00000000
 80058f0:	08005645 	.word	0x08005645

080058f4 <_printf_common>:
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4616      	mov	r6, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	688a      	ldr	r2, [r1, #8]
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4607      	mov	r7, r0
 8005902:	4293      	cmp	r3, r2
 8005904:	bfb8      	it	lt
 8005906:	4613      	movlt	r3, r2
 8005908:	6033      	str	r3, [r6, #0]
 800590a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800590e:	460c      	mov	r4, r1
 8005910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005914:	b10a      	cbz	r2, 800591a <_printf_common+0x26>
 8005916:	3301      	adds	r3, #1
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	0699      	lsls	r1, r3, #26
 800591e:	bf42      	ittt	mi
 8005920:	6833      	ldrmi	r3, [r6, #0]
 8005922:	3302      	addmi	r3, #2
 8005924:	6033      	strmi	r3, [r6, #0]
 8005926:	6825      	ldr	r5, [r4, #0]
 8005928:	f015 0506 	ands.w	r5, r5, #6
 800592c:	d106      	bne.n	800593c <_printf_common+0x48>
 800592e:	f104 0a19 	add.w	sl, r4, #25
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	6832      	ldr	r2, [r6, #0]
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	42ab      	cmp	r3, r5
 800593a:	dc2b      	bgt.n	8005994 <_printf_common+0xa0>
 800593c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	3b00      	subs	r3, #0
 8005944:	bf18      	it	ne
 8005946:	2301      	movne	r3, #1
 8005948:	0692      	lsls	r2, r2, #26
 800594a:	d430      	bmi.n	80059ae <_printf_common+0xba>
 800594c:	4641      	mov	r1, r8
 800594e:	4638      	mov	r0, r7
 8005950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005954:	47c8      	blx	r9
 8005956:	3001      	adds	r0, #1
 8005958:	d023      	beq.n	80059a2 <_printf_common+0xae>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	f003 0306 	and.w	r3, r3, #6
 8005962:	2b04      	cmp	r3, #4
 8005964:	bf14      	ite	ne
 8005966:	2500      	movne	r5, #0
 8005968:	6833      	ldreq	r3, [r6, #0]
 800596a:	f04f 0600 	mov.w	r6, #0
 800596e:	bf08      	it	eq
 8005970:	68e5      	ldreq	r5, [r4, #12]
 8005972:	f104 041a 	add.w	r4, r4, #26
 8005976:	bf08      	it	eq
 8005978:	1aed      	subeq	r5, r5, r3
 800597a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800597e:	bf08      	it	eq
 8005980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005984:	4293      	cmp	r3, r2
 8005986:	bfc4      	itt	gt
 8005988:	1a9b      	subgt	r3, r3, r2
 800598a:	18ed      	addgt	r5, r5, r3
 800598c:	42b5      	cmp	r5, r6
 800598e:	d11a      	bne.n	80059c6 <_printf_common+0xd2>
 8005990:	2000      	movs	r0, #0
 8005992:	e008      	b.n	80059a6 <_printf_common+0xb2>
 8005994:	2301      	movs	r3, #1
 8005996:	4652      	mov	r2, sl
 8005998:	4641      	mov	r1, r8
 800599a:	4638      	mov	r0, r7
 800599c:	47c8      	blx	r9
 800599e:	3001      	adds	r0, #1
 80059a0:	d103      	bne.n	80059aa <_printf_common+0xb6>
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	3501      	adds	r5, #1
 80059ac:	e7c1      	b.n	8005932 <_printf_common+0x3e>
 80059ae:	2030      	movs	r0, #48	@ 0x30
 80059b0:	18e1      	adds	r1, r4, r3
 80059b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059bc:	4422      	add	r2, r4
 80059be:	3302      	adds	r3, #2
 80059c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059c4:	e7c2      	b.n	800594c <_printf_common+0x58>
 80059c6:	2301      	movs	r3, #1
 80059c8:	4622      	mov	r2, r4
 80059ca:	4641      	mov	r1, r8
 80059cc:	4638      	mov	r0, r7
 80059ce:	47c8      	blx	r9
 80059d0:	3001      	adds	r0, #1
 80059d2:	d0e6      	beq.n	80059a2 <_printf_common+0xae>
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7d9      	b.n	800598c <_printf_common+0x98>

080059d8 <_printf_i>:
 80059d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	7e0f      	ldrb	r7, [r1, #24]
 80059de:	4691      	mov	r9, r2
 80059e0:	2f78      	cmp	r7, #120	@ 0x78
 80059e2:	4680      	mov	r8, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	469a      	mov	sl, r3
 80059e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ee:	d807      	bhi.n	8005a00 <_printf_i+0x28>
 80059f0:	2f62      	cmp	r7, #98	@ 0x62
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x32>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	f000 80d3 	beq.w	8005ba0 <_printf_i+0x1c8>
 80059fa:	2f58      	cmp	r7, #88	@ 0x58
 80059fc:	f000 80ba 	beq.w	8005b74 <_printf_i+0x19c>
 8005a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a08:	e03a      	b.n	8005a80 <_printf_i+0xa8>
 8005a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a0e:	2b15      	cmp	r3, #21
 8005a10:	d8f6      	bhi.n	8005a00 <_printf_i+0x28>
 8005a12:	a101      	add	r1, pc, #4	@ (adr r1, 8005a18 <_printf_i+0x40>)
 8005a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a01 	.word	0x08005a01
 8005a24:	08005a01 	.word	0x08005a01
 8005a28:	08005a01 	.word	0x08005a01
 8005a2c:	08005a01 	.word	0x08005a01
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a01 	.word	0x08005a01
 8005a38:	08005a01 	.word	0x08005a01
 8005a3c:	08005a01 	.word	0x08005a01
 8005a40:	08005a01 	.word	0x08005a01
 8005a44:	08005b87 	.word	0x08005b87
 8005a48:	08005aaf 	.word	0x08005aaf
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005a01 	.word	0x08005a01
 8005a54:	08005a01 	.word	0x08005a01
 8005a58:	08005ba9 	.word	0x08005ba9
 8005a5c:	08005a01 	.word	0x08005a01
 8005a60:	08005aaf 	.word	0x08005aaf
 8005a64:	08005a01 	.word	0x08005a01
 8005a68:	08005a01 	.word	0x08005a01
 8005a6c:	08005b49 	.word	0x08005b49
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6032      	str	r2, [r6, #0]
 8005a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a80:	2301      	movs	r3, #1
 8005a82:	e09e      	b.n	8005bc2 <_printf_i+0x1ea>
 8005a84:	6833      	ldr	r3, [r6, #0]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1d19      	adds	r1, r3, #4
 8005a8a:	6031      	str	r1, [r6, #0]
 8005a8c:	0606      	lsls	r6, r0, #24
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0xbc>
 8005a90:	681d      	ldr	r5, [r3, #0]
 8005a92:	e003      	b.n	8005a9c <_printf_i+0xc4>
 8005a94:	0645      	lsls	r5, r0, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0xb8>
 8005a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	da03      	bge.n	8005aa8 <_printf_i+0xd0>
 8005aa0:	232d      	movs	r3, #45	@ 0x2d
 8005aa2:	426d      	negs	r5, r5
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aa8:	230a      	movs	r3, #10
 8005aaa:	4859      	ldr	r0, [pc, #356]	@ (8005c10 <_printf_i+0x238>)
 8005aac:	e011      	b.n	8005ad2 <_printf_i+0xfa>
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	6833      	ldr	r3, [r6, #0]
 8005ab2:	0608      	lsls	r0, r1, #24
 8005ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ab8:	d402      	bmi.n	8005ac0 <_printf_i+0xe8>
 8005aba:	0649      	lsls	r1, r1, #25
 8005abc:	bf48      	it	mi
 8005abe:	b2ad      	uxthmi	r5, r5
 8005ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ac2:	6033      	str	r3, [r6, #0]
 8005ac4:	bf14      	ite	ne
 8005ac6:	230a      	movne	r3, #10
 8005ac8:	2308      	moveq	r3, #8
 8005aca:	4851      	ldr	r0, [pc, #324]	@ (8005c10 <_printf_i+0x238>)
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ad2:	6866      	ldr	r6, [r4, #4]
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	bfa8      	it	ge
 8005ad8:	6821      	ldrge	r1, [r4, #0]
 8005ada:	60a6      	str	r6, [r4, #8]
 8005adc:	bfa4      	itt	ge
 8005ade:	f021 0104 	bicge.w	r1, r1, #4
 8005ae2:	6021      	strge	r1, [r4, #0]
 8005ae4:	b90d      	cbnz	r5, 8005aea <_printf_i+0x112>
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	d04b      	beq.n	8005b82 <_printf_i+0x1aa>
 8005aea:	4616      	mov	r6, r2
 8005aec:	fbb5 f1f3 	udiv	r1, r5, r3
 8005af0:	fb03 5711 	mls	r7, r3, r1, r5
 8005af4:	5dc7      	ldrb	r7, [r0, r7]
 8005af6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005afa:	462f      	mov	r7, r5
 8005afc:	42bb      	cmp	r3, r7
 8005afe:	460d      	mov	r5, r1
 8005b00:	d9f4      	bls.n	8005aec <_printf_i+0x114>
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10b      	bne.n	8005b1e <_printf_i+0x146>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	07df      	lsls	r7, r3, #31
 8005b0a:	d508      	bpl.n	8005b1e <_printf_i+0x146>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	4299      	cmp	r1, r3
 8005b12:	bfde      	ittt	le
 8005b14:	2330      	movle	r3, #48	@ 0x30
 8005b16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b1e:	1b92      	subs	r2, r2, r6
 8005b20:	6122      	str	r2, [r4, #16]
 8005b22:	464b      	mov	r3, r9
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	aa03      	add	r2, sp, #12
 8005b2e:	f7ff fee1 	bl	80058f4 <_printf_common>
 8005b32:	3001      	adds	r0, #1
 8005b34:	d14a      	bne.n	8005bcc <_printf_i+0x1f4>
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	b004      	add	sp, #16
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	f043 0320 	orr.w	r3, r3, #32
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	2778      	movs	r7, #120	@ 0x78
 8005b4a:	4832      	ldr	r0, [pc, #200]	@ (8005c14 <_printf_i+0x23c>)
 8005b4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	6831      	ldr	r1, [r6, #0]
 8005b54:	061f      	lsls	r7, r3, #24
 8005b56:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b5a:	d402      	bmi.n	8005b62 <_printf_i+0x18a>
 8005b5c:	065f      	lsls	r7, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2ad      	uxthmi	r5, r5
 8005b62:	6031      	str	r1, [r6, #0]
 8005b64:	07d9      	lsls	r1, r3, #31
 8005b66:	bf44      	itt	mi
 8005b68:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6c:	6023      	strmi	r3, [r4, #0]
 8005b6e:	b11d      	cbz	r5, 8005b78 <_printf_i+0x1a0>
 8005b70:	2310      	movs	r3, #16
 8005b72:	e7ab      	b.n	8005acc <_printf_i+0xf4>
 8005b74:	4826      	ldr	r0, [pc, #152]	@ (8005c10 <_printf_i+0x238>)
 8005b76:	e7e9      	b.n	8005b4c <_printf_i+0x174>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	f023 0320 	bic.w	r3, r3, #32
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	e7f6      	b.n	8005b70 <_printf_i+0x198>
 8005b82:	4616      	mov	r6, r2
 8005b84:	e7bd      	b.n	8005b02 <_printf_i+0x12a>
 8005b86:	6833      	ldr	r3, [r6, #0]
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6961      	ldr	r1, [r4, #20]
 8005b8e:	6030      	str	r0, [r6, #0]
 8005b90:	062e      	lsls	r6, r5, #24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	d501      	bpl.n	8005b9a <_printf_i+0x1c2>
 8005b96:	6019      	str	r1, [r3, #0]
 8005b98:	e002      	b.n	8005ba0 <_printf_i+0x1c8>
 8005b9a:	0668      	lsls	r0, r5, #25
 8005b9c:	d5fb      	bpl.n	8005b96 <_printf_i+0x1be>
 8005b9e:	8019      	strh	r1, [r3, #0]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	e7bc      	b.n	8005b22 <_printf_i+0x14a>
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	6032      	str	r2, [r6, #0]
 8005bb0:	681e      	ldr	r6, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f903 	bl	8005dc0 <memchr>
 8005bba:	b108      	cbz	r0, 8005bc0 <_printf_i+0x1e8>
 8005bbc:	1b80      	subs	r0, r0, r6
 8005bbe:	6060      	str	r0, [r4, #4]
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bca:	e7aa      	b.n	8005b22 <_printf_i+0x14a>
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	47d0      	blx	sl
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0ad      	beq.n	8005b36 <_printf_i+0x15e>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	d413      	bmi.n	8005c08 <_printf_i+0x230>
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	4298      	cmp	r0, r3
 8005be6:	bfb8      	it	lt
 8005be8:	4618      	movlt	r0, r3
 8005bea:	e7a6      	b.n	8005b3a <_printf_i+0x162>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	47d0      	blx	sl
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d09d      	beq.n	8005b36 <_printf_i+0x15e>
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	9903      	ldr	r1, [sp, #12]
 8005c00:	1a5b      	subs	r3, r3, r1
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dcf2      	bgt.n	8005bec <_printf_i+0x214>
 8005c06:	e7eb      	b.n	8005be0 <_printf_i+0x208>
 8005c08:	2500      	movs	r5, #0
 8005c0a:	f104 0619 	add.w	r6, r4, #25
 8005c0e:	e7f5      	b.n	8005bfc <_printf_i+0x224>
 8005c10:	08006570 	.word	0x08006570
 8005c14:	08006581 	.word	0x08006581

08005c18 <__sflush_r>:
 8005c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	0716      	lsls	r6, r2, #28
 8005c20:	4605      	mov	r5, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	d454      	bmi.n	8005cd0 <__sflush_r+0xb8>
 8005c26:	684b      	ldr	r3, [r1, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dc02      	bgt.n	8005c32 <__sflush_r+0x1a>
 8005c2c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	dd48      	ble.n	8005cc4 <__sflush_r+0xac>
 8005c32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d045      	beq.n	8005cc4 <__sflush_r+0xac>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c3e:	682f      	ldr	r7, [r5, #0]
 8005c40:	6a21      	ldr	r1, [r4, #32]
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	d030      	beq.n	8005ca8 <__sflush_r+0x90>
 8005c46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	0759      	lsls	r1, r3, #29
 8005c4c:	d505      	bpl.n	8005c5a <__sflush_r+0x42>
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	1ad2      	subs	r2, r2, r3
 8005c52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c54:	b10b      	cbz	r3, 8005c5a <__sflush_r+0x42>
 8005c56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c60:	6a21      	ldr	r1, [r4, #32]
 8005c62:	47b0      	blx	r6
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	d106      	bne.n	8005c78 <__sflush_r+0x60>
 8005c6a:	6829      	ldr	r1, [r5, #0]
 8005c6c:	291d      	cmp	r1, #29
 8005c6e:	d82b      	bhi.n	8005cc8 <__sflush_r+0xb0>
 8005c70:	4a28      	ldr	r2, [pc, #160]	@ (8005d14 <__sflush_r+0xfc>)
 8005c72:	410a      	asrs	r2, r1
 8005c74:	07d6      	lsls	r6, r2, #31
 8005c76:	d427      	bmi.n	8005cc8 <__sflush_r+0xb0>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	6062      	str	r2, [r4, #4]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	04d9      	lsls	r1, r3, #19
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	d504      	bpl.n	8005c8e <__sflush_r+0x76>
 8005c84:	1c42      	adds	r2, r0, #1
 8005c86:	d101      	bne.n	8005c8c <__sflush_r+0x74>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b903      	cbnz	r3, 8005c8e <__sflush_r+0x76>
 8005c8c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c90:	602f      	str	r7, [r5, #0]
 8005c92:	b1b9      	cbz	r1, 8005cc4 <__sflush_r+0xac>
 8005c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__sflush_r+0x8a>
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fc89 	bl	80055b4 <_free_r>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ca6:	e00d      	b.n	8005cc4 <__sflush_r+0xac>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b0      	blx	r6
 8005cae:	4602      	mov	r2, r0
 8005cb0:	1c50      	adds	r0, r2, #1
 8005cb2:	d1c9      	bne.n	8005c48 <__sflush_r+0x30>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0c6      	beq.n	8005c48 <__sflush_r+0x30>
 8005cba:	2b1d      	cmp	r3, #29
 8005cbc:	d001      	beq.n	8005cc2 <__sflush_r+0xaa>
 8005cbe:	2b16      	cmp	r3, #22
 8005cc0:	d11d      	bne.n	8005cfe <__sflush_r+0xe6>
 8005cc2:	602f      	str	r7, [r5, #0]
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e021      	b.n	8005d0c <__sflush_r+0xf4>
 8005cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ccc:	b21b      	sxth	r3, r3
 8005cce:	e01a      	b.n	8005d06 <__sflush_r+0xee>
 8005cd0:	690f      	ldr	r7, [r1, #16]
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	d0f6      	beq.n	8005cc4 <__sflush_r+0xac>
 8005cd6:	0793      	lsls	r3, r2, #30
 8005cd8:	bf18      	it	ne
 8005cda:	2300      	movne	r3, #0
 8005cdc:	680e      	ldr	r6, [r1, #0]
 8005cde:	bf08      	it	eq
 8005ce0:	694b      	ldreq	r3, [r1, #20]
 8005ce2:	1bf6      	subs	r6, r6, r7
 8005ce4:	600f      	str	r7, [r1, #0]
 8005ce6:	608b      	str	r3, [r1, #8]
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	ddeb      	ble.n	8005cc4 <__sflush_r+0xac>
 8005cec:	4633      	mov	r3, r6
 8005cee:	463a      	mov	r2, r7
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	6a21      	ldr	r1, [r4, #32]
 8005cf4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005cf8:	47e0      	blx	ip
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	dc07      	bgt.n	8005d0e <__sflush_r+0xf6>
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d0e:	4407      	add	r7, r0
 8005d10:	1a36      	subs	r6, r6, r0
 8005d12:	e7e9      	b.n	8005ce8 <__sflush_r+0xd0>
 8005d14:	dfbffffe 	.word	0xdfbffffe

08005d18 <_fflush_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b913      	cbnz	r3, 8005d28 <_fflush_r+0x10>
 8005d22:	2500      	movs	r5, #0
 8005d24:	4628      	mov	r0, r5
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	b118      	cbz	r0, 8005d32 <_fflush_r+0x1a>
 8005d2a:	6a03      	ldr	r3, [r0, #32]
 8005d2c:	b90b      	cbnz	r3, 8005d32 <_fflush_r+0x1a>
 8005d2e:	f7ff fafd 	bl	800532c <__sinit>
 8005d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f3      	beq.n	8005d22 <_fflush_r+0xa>
 8005d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d3c:	07d0      	lsls	r0, r2, #31
 8005d3e:	d404      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d40:	0599      	lsls	r1, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d46:	f7ff fc14 	bl	8005572 <__retarget_lock_acquire_recursive>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7ff ff63 	bl	8005c18 <__sflush_r>
 8005d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d54:	4605      	mov	r5, r0
 8005d56:	07da      	lsls	r2, r3, #31
 8005d58:	d4e4      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	059b      	lsls	r3, r3, #22
 8005d5e:	d4e1      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d62:	f7ff fc07 	bl	8005574 <__retarget_lock_release_recursive>
 8005d66:	e7dd      	b.n	8005d24 <_fflush_r+0xc>

08005d68 <fiprintf>:
 8005d68:	b40e      	push	{r1, r2, r3}
 8005d6a:	b503      	push	{r0, r1, lr}
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	ab03      	add	r3, sp, #12
 8005d70:	4805      	ldr	r0, [pc, #20]	@ (8005d88 <fiprintf+0x20>)
 8005d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	f000 f899 	bl	8005eb0 <_vfiprintf_r>
 8005d7e:	b002      	add	sp, #8
 8005d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d84:	b003      	add	sp, #12
 8005d86:	4770      	bx	lr
 8005d88:	200000bc 	.word	0x200000bc

08005d8c <memmove>:
 8005d8c:	4288      	cmp	r0, r1
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	eb01 0402 	add.w	r4, r1, r2
 8005d94:	d902      	bls.n	8005d9c <memmove+0x10>
 8005d96:	4284      	cmp	r4, r0
 8005d98:	4623      	mov	r3, r4
 8005d9a:	d807      	bhi.n	8005dac <memmove+0x20>
 8005d9c:	1e43      	subs	r3, r0, #1
 8005d9e:	42a1      	cmp	r1, r4
 8005da0:	d008      	beq.n	8005db4 <memmove+0x28>
 8005da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005daa:	e7f8      	b.n	8005d9e <memmove+0x12>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4402      	add	r2, r0
 8005db0:	428a      	cmp	r2, r1
 8005db2:	d100      	bne.n	8005db6 <memmove+0x2a>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dbe:	e7f7      	b.n	8005db0 <memmove+0x24>

08005dc0 <memchr>:
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	b2c9      	uxtb	r1, r1
 8005dc6:	4402      	add	r2, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	d101      	bne.n	8005dd2 <memchr+0x12>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e003      	b.n	8005dda <memchr+0x1a>
 8005dd2:	7804      	ldrb	r4, [r0, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	428c      	cmp	r4, r1
 8005dd8:	d1f6      	bne.n	8005dc8 <memchr+0x8>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <memcpy>:
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de4:	d100      	bne.n	8005de8 <memcpy+0xc>
 8005de6:	4770      	bx	lr
 8005de8:	b510      	push	{r4, lr}
 8005dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dee:	4291      	cmp	r1, r2
 8005df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df4:	d1f9      	bne.n	8005dea <memcpy+0xe>
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <abort>:
 8005df8:	2006      	movs	r0, #6
 8005dfa:	b508      	push	{r3, lr}
 8005dfc:	f000 fa2c 	bl	8006258 <raise>
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fc ff7d 	bl	8002d00 <_exit>

08005e06 <_realloc_r>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	4615      	mov	r5, r2
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b921      	cbnz	r1, 8005e1c <_realloc_r+0x16>
 8005e12:	4611      	mov	r1, r2
 8005e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	f7ff b932 	b.w	8005080 <_malloc_r>
 8005e1c:	b92a      	cbnz	r2, 8005e2a <_realloc_r+0x24>
 8005e1e:	f7ff fbc9 	bl	80055b4 <_free_r>
 8005e22:	2400      	movs	r4, #0
 8005e24:	4620      	mov	r0, r4
 8005e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2a:	f000 fa31 	bl	8006290 <_malloc_usable_size_r>
 8005e2e:	4285      	cmp	r5, r0
 8005e30:	4606      	mov	r6, r0
 8005e32:	d802      	bhi.n	8005e3a <_realloc_r+0x34>
 8005e34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e38:	d8f4      	bhi.n	8005e24 <_realloc_r+0x1e>
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	f7ff f91f 	bl	8005080 <_malloc_r>
 8005e42:	4607      	mov	r7, r0
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0ec      	beq.n	8005e22 <_realloc_r+0x1c>
 8005e48:	42b5      	cmp	r5, r6
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	bf28      	it	cs
 8005e50:	4632      	movcs	r2, r6
 8005e52:	f7ff ffc3 	bl	8005ddc <memcpy>
 8005e56:	4621      	mov	r1, r4
 8005e58:	4640      	mov	r0, r8
 8005e5a:	f7ff fbab 	bl	80055b4 <_free_r>
 8005e5e:	463c      	mov	r4, r7
 8005e60:	e7e0      	b.n	8005e24 <_realloc_r+0x1e>

08005e62 <__sfputc_r>:
 8005e62:	6893      	ldr	r3, [r2, #8]
 8005e64:	b410      	push	{r4}
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	6093      	str	r3, [r2, #8]
 8005e6c:	da07      	bge.n	8005e7e <__sfputc_r+0x1c>
 8005e6e:	6994      	ldr	r4, [r2, #24]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	db01      	blt.n	8005e78 <__sfputc_r+0x16>
 8005e74:	290a      	cmp	r1, #10
 8005e76:	d102      	bne.n	8005e7e <__sfputc_r+0x1c>
 8005e78:	bc10      	pop	{r4}
 8005e7a:	f000 b931 	b.w	80060e0 <__swbuf_r>
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	1c58      	adds	r0, r3, #1
 8005e82:	6010      	str	r0, [r2, #0]
 8005e84:	7019      	strb	r1, [r3, #0]
 8005e86:	4608      	mov	r0, r1
 8005e88:	bc10      	pop	{r4}
 8005e8a:	4770      	bx	lr

08005e8c <__sfputs_r>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	4606      	mov	r6, r0
 8005e90:	460f      	mov	r7, r1
 8005e92:	4614      	mov	r4, r2
 8005e94:	18d5      	adds	r5, r2, r3
 8005e96:	42ac      	cmp	r4, r5
 8005e98:	d101      	bne.n	8005e9e <__sfputs_r+0x12>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e007      	b.n	8005eae <__sfputs_r+0x22>
 8005e9e:	463a      	mov	r2, r7
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea6:	f7ff ffdc 	bl	8005e62 <__sfputc_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d1f3      	bne.n	8005e96 <__sfputs_r+0xa>
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005eb0 <_vfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	4698      	mov	r8, r3
 8005eba:	4606      	mov	r6, r0
 8005ebc:	b09d      	sub	sp, #116	@ 0x74
 8005ebe:	b118      	cbz	r0, 8005ec8 <_vfiprintf_r+0x18>
 8005ec0:	6a03      	ldr	r3, [r0, #32]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_vfiprintf_r+0x18>
 8005ec4:	f7ff fa32 	bl	800532c <__sinit>
 8005ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_vfiprintf_r+0x2a>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	059a      	lsls	r2, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_vfiprintf_r+0x2a>
 8005ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ed6:	f7ff fb4c 	bl	8005572 <__retarget_lock_acquire_recursive>
 8005eda:	89ab      	ldrh	r3, [r5, #12]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	d501      	bpl.n	8005ee4 <_vfiprintf_r+0x34>
 8005ee0:	692b      	ldr	r3, [r5, #16]
 8005ee2:	b99b      	cbnz	r3, 8005f0c <_vfiprintf_r+0x5c>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f938 	bl	800615c <__swsetup_r>
 8005eec:	b170      	cbz	r0, 8005f0c <_vfiprintf_r+0x5c>
 8005eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ef0:	07dc      	lsls	r4, r3, #31
 8005ef2:	d504      	bpl.n	8005efe <_vfiprintf_r+0x4e>
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b01d      	add	sp, #116	@ 0x74
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	0598      	lsls	r0, r3, #22
 8005f02:	d4f7      	bmi.n	8005ef4 <_vfiprintf_r+0x44>
 8005f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f06:	f7ff fb35 	bl	8005574 <__retarget_lock_release_recursive>
 8005f0a:	e7f3      	b.n	8005ef4 <_vfiprintf_r+0x44>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f10:	2320      	movs	r3, #32
 8005f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f16:	2330      	movs	r3, #48	@ 0x30
 8005f18:	f04f 0901 	mov.w	r9, #1
 8005f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f20:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80060cc <_vfiprintf_r+0x21c>
 8005f24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f28:	4623      	mov	r3, r4
 8005f2a:	469a      	mov	sl, r3
 8005f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f30:	b10a      	cbz	r2, 8005f36 <_vfiprintf_r+0x86>
 8005f32:	2a25      	cmp	r2, #37	@ 0x25
 8005f34:	d1f9      	bne.n	8005f2a <_vfiprintf_r+0x7a>
 8005f36:	ebba 0b04 	subs.w	fp, sl, r4
 8005f3a:	d00b      	beq.n	8005f54 <_vfiprintf_r+0xa4>
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff ffa2 	bl	8005e8c <__sfputs_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f000 80a7 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f50:	445a      	add	r2, fp
 8005f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f54:	f89a 3000 	ldrb.w	r3, [sl]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 809f 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f68:	f10a 0a01 	add.w	sl, sl, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f76:	4654      	mov	r4, sl
 8005f78:	2205      	movs	r2, #5
 8005f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7e:	4853      	ldr	r0, [pc, #332]	@ (80060cc <_vfiprintf_r+0x21c>)
 8005f80:	f7ff ff1e 	bl	8005dc0 <memchr>
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	b9d8      	cbnz	r0, 8005fc0 <_vfiprintf_r+0x110>
 8005f88:	06d1      	lsls	r1, r2, #27
 8005f8a:	bf44      	itt	mi
 8005f8c:	2320      	movmi	r3, #32
 8005f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f92:	0713      	lsls	r3, r2, #28
 8005f94:	bf44      	itt	mi
 8005f96:	232b      	movmi	r3, #43	@ 0x2b
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fa2:	d015      	beq.n	8005fd0 <_vfiprintf_r+0x120>
 8005fa4:	4654      	mov	r4, sl
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f04f 0c0a 	mov.w	ip, #10
 8005fac:	9a07      	ldr	r2, [sp, #28]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb4:	3b30      	subs	r3, #48	@ 0x30
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d94b      	bls.n	8006052 <_vfiprintf_r+0x1a2>
 8005fba:	b1b0      	cbz	r0, 8005fea <_vfiprintf_r+0x13a>
 8005fbc:	9207      	str	r2, [sp, #28]
 8005fbe:	e014      	b.n	8005fea <_vfiprintf_r+0x13a>
 8005fc0:	eba0 0308 	sub.w	r3, r0, r8
 8005fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	46a2      	mov	sl, r4
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	e7d2      	b.n	8005f76 <_vfiprintf_r+0xc6>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d19      	adds	r1, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9103      	str	r1, [sp, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfbb      	ittet	lt
 8005fdc:	425b      	neglt	r3, r3
 8005fde:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe2:	9307      	strge	r3, [sp, #28]
 8005fe4:	9307      	strlt	r3, [sp, #28]
 8005fe6:	bfb8      	it	lt
 8005fe8:	9204      	strlt	r2, [sp, #16]
 8005fea:	7823      	ldrb	r3, [r4, #0]
 8005fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fee:	d10a      	bne.n	8006006 <_vfiprintf_r+0x156>
 8005ff0:	7863      	ldrb	r3, [r4, #1]
 8005ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff4:	d132      	bne.n	800605c <_vfiprintf_r+0x1ac>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	3402      	adds	r4, #2
 8005ffa:	1d1a      	adds	r2, r3, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	9203      	str	r2, [sp, #12]
 8006000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006004:	9305      	str	r3, [sp, #20]
 8006006:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80060d0 <_vfiprintf_r+0x220>
 800600a:	2203      	movs	r2, #3
 800600c:	4650      	mov	r0, sl
 800600e:	7821      	ldrb	r1, [r4, #0]
 8006010:	f7ff fed6 	bl	8005dc0 <memchr>
 8006014:	b138      	cbz	r0, 8006026 <_vfiprintf_r+0x176>
 8006016:	2240      	movs	r2, #64	@ 0x40
 8006018:	9b04      	ldr	r3, [sp, #16]
 800601a:	eba0 000a 	sub.w	r0, r0, sl
 800601e:	4082      	lsls	r2, r0
 8006020:	4313      	orrs	r3, r2
 8006022:	3401      	adds	r4, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602a:	2206      	movs	r2, #6
 800602c:	4829      	ldr	r0, [pc, #164]	@ (80060d4 <_vfiprintf_r+0x224>)
 800602e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006032:	f7ff fec5 	bl	8005dc0 <memchr>
 8006036:	2800      	cmp	r0, #0
 8006038:	d03f      	beq.n	80060ba <_vfiprintf_r+0x20a>
 800603a:	4b27      	ldr	r3, [pc, #156]	@ (80060d8 <_vfiprintf_r+0x228>)
 800603c:	bb1b      	cbnz	r3, 8006086 <_vfiprintf_r+0x1d6>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	3307      	adds	r3, #7
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	3308      	adds	r3, #8
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604c:	443b      	add	r3, r7
 800604e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006050:	e76a      	b.n	8005f28 <_vfiprintf_r+0x78>
 8006052:	460c      	mov	r4, r1
 8006054:	2001      	movs	r0, #1
 8006056:	fb0c 3202 	mla	r2, ip, r2, r3
 800605a:	e7a8      	b.n	8005fae <_vfiprintf_r+0xfe>
 800605c:	2300      	movs	r3, #0
 800605e:	f04f 0c0a 	mov.w	ip, #10
 8006062:	4619      	mov	r1, r3
 8006064:	3401      	adds	r4, #1
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	4620      	mov	r0, r4
 800606a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606e:	3a30      	subs	r2, #48	@ 0x30
 8006070:	2a09      	cmp	r2, #9
 8006072:	d903      	bls.n	800607c <_vfiprintf_r+0x1cc>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0c6      	beq.n	8006006 <_vfiprintf_r+0x156>
 8006078:	9105      	str	r1, [sp, #20]
 800607a:	e7c4      	b.n	8006006 <_vfiprintf_r+0x156>
 800607c:	4604      	mov	r4, r0
 800607e:	2301      	movs	r3, #1
 8006080:	fb0c 2101 	mla	r1, ip, r1, r2
 8006084:	e7f0      	b.n	8006068 <_vfiprintf_r+0x1b8>
 8006086:	ab03      	add	r3, sp, #12
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	462a      	mov	r2, r5
 800608c:	4630      	mov	r0, r6
 800608e:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <_vfiprintf_r+0x22c>)
 8006090:	a904      	add	r1, sp, #16
 8006092:	f3af 8000 	nop.w
 8006096:	4607      	mov	r7, r0
 8006098:	1c78      	adds	r0, r7, #1
 800609a:	d1d6      	bne.n	800604a <_vfiprintf_r+0x19a>
 800609c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_vfiprintf_r+0x1fe>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_vfiprintf_r+0x1fe>
 80060a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060aa:	f7ff fa63 	bl	8005574 <__retarget_lock_release_recursive>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	065b      	lsls	r3, r3, #25
 80060b2:	f53f af1f 	bmi.w	8005ef4 <_vfiprintf_r+0x44>
 80060b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060b8:	e71e      	b.n	8005ef8 <_vfiprintf_r+0x48>
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <_vfiprintf_r+0x22c>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	f7ff fc87 	bl	80059d8 <_printf_i>
 80060ca:	e7e4      	b.n	8006096 <_vfiprintf_r+0x1e6>
 80060cc:	0800655f 	.word	0x0800655f
 80060d0:	08006565 	.word	0x08006565
 80060d4:	08006569 	.word	0x08006569
 80060d8:	00000000 	.word	0x00000000
 80060dc:	08005e8d 	.word	0x08005e8d

080060e0 <__swbuf_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	460e      	mov	r6, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	4605      	mov	r5, r0
 80060e8:	b118      	cbz	r0, 80060f2 <__swbuf_r+0x12>
 80060ea:	6a03      	ldr	r3, [r0, #32]
 80060ec:	b90b      	cbnz	r3, 80060f2 <__swbuf_r+0x12>
 80060ee:	f7ff f91d 	bl	800532c <__sinit>
 80060f2:	69a3      	ldr	r3, [r4, #24]
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	071a      	lsls	r2, r3, #28
 80060fa:	d501      	bpl.n	8006100 <__swbuf_r+0x20>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	b943      	cbnz	r3, 8006112 <__swbuf_r+0x32>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 f82a 	bl	800615c <__swsetup_r>
 8006108:	b118      	cbz	r0, 8006112 <__swbuf_r+0x32>
 800610a:	f04f 37ff 	mov.w	r7, #4294967295
 800610e:	4638      	mov	r0, r7
 8006110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	b2f6      	uxtb	r6, r6
 8006118:	1a98      	subs	r0, r3, r2
 800611a:	6963      	ldr	r3, [r4, #20]
 800611c:	4637      	mov	r7, r6
 800611e:	4283      	cmp	r3, r0
 8006120:	dc05      	bgt.n	800612e <__swbuf_r+0x4e>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f7ff fdf7 	bl	8005d18 <_fflush_r>
 800612a:	2800      	cmp	r0, #0
 800612c:	d1ed      	bne.n	800610a <__swbuf_r+0x2a>
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	3b01      	subs	r3, #1
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	701e      	strb	r6, [r3, #0]
 800613c:	6962      	ldr	r2, [r4, #20]
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	429a      	cmp	r2, r3
 8006142:	d004      	beq.n	800614e <__swbuf_r+0x6e>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	07db      	lsls	r3, r3, #31
 8006148:	d5e1      	bpl.n	800610e <__swbuf_r+0x2e>
 800614a:	2e0a      	cmp	r6, #10
 800614c:	d1df      	bne.n	800610e <__swbuf_r+0x2e>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f7ff fde1 	bl	8005d18 <_fflush_r>
 8006156:	2800      	cmp	r0, #0
 8006158:	d0d9      	beq.n	800610e <__swbuf_r+0x2e>
 800615a:	e7d6      	b.n	800610a <__swbuf_r+0x2a>

0800615c <__swsetup_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <__swsetup_r+0xa8>)
 8006160:	4605      	mov	r5, r0
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	460c      	mov	r4, r1
 8006166:	b118      	cbz	r0, 8006170 <__swsetup_r+0x14>
 8006168:	6a03      	ldr	r3, [r0, #32]
 800616a:	b90b      	cbnz	r3, 8006170 <__swsetup_r+0x14>
 800616c:	f7ff f8de 	bl	800532c <__sinit>
 8006170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006174:	0719      	lsls	r1, r3, #28
 8006176:	d422      	bmi.n	80061be <__swsetup_r+0x62>
 8006178:	06da      	lsls	r2, r3, #27
 800617a:	d407      	bmi.n	800618c <__swsetup_r+0x30>
 800617c:	2209      	movs	r2, #9
 800617e:	602a      	str	r2, [r5, #0]
 8006180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	e033      	b.n	80061f4 <__swsetup_r+0x98>
 800618c:	0758      	lsls	r0, r3, #29
 800618e:	d512      	bpl.n	80061b6 <__swsetup_r+0x5a>
 8006190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006192:	b141      	cbz	r1, 80061a6 <__swsetup_r+0x4a>
 8006194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006198:	4299      	cmp	r1, r3
 800619a:	d002      	beq.n	80061a2 <__swsetup_r+0x46>
 800619c:	4628      	mov	r0, r5
 800619e:	f7ff fa09 	bl	80055b4 <_free_r>
 80061a2:	2300      	movs	r3, #0
 80061a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	2300      	movs	r3, #0
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f043 0308 	orr.w	r3, r3, #8
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	b94b      	cbnz	r3, 80061d6 <__swsetup_r+0x7a>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061cc:	d003      	beq.n	80061d6 <__swsetup_r+0x7a>
 80061ce:	4621      	mov	r1, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f88a 	bl	80062ea <__smakebuf_r>
 80061d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061da:	f013 0201 	ands.w	r2, r3, #1
 80061de:	d00a      	beq.n	80061f6 <__swsetup_r+0x9a>
 80061e0:	2200      	movs	r2, #0
 80061e2:	60a2      	str	r2, [r4, #8]
 80061e4:	6962      	ldr	r2, [r4, #20]
 80061e6:	4252      	negs	r2, r2
 80061e8:	61a2      	str	r2, [r4, #24]
 80061ea:	6922      	ldr	r2, [r4, #16]
 80061ec:	b942      	cbnz	r2, 8006200 <__swsetup_r+0xa4>
 80061ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061f2:	d1c5      	bne.n	8006180 <__swsetup_r+0x24>
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	0799      	lsls	r1, r3, #30
 80061f8:	bf58      	it	pl
 80061fa:	6962      	ldrpl	r2, [r4, #20]
 80061fc:	60a2      	str	r2, [r4, #8]
 80061fe:	e7f4      	b.n	80061ea <__swsetup_r+0x8e>
 8006200:	2000      	movs	r0, #0
 8006202:	e7f7      	b.n	80061f4 <__swsetup_r+0x98>
 8006204:	200000bc 	.word	0x200000bc

08006208 <_raise_r>:
 8006208:	291f      	cmp	r1, #31
 800620a:	b538      	push	{r3, r4, r5, lr}
 800620c:	4605      	mov	r5, r0
 800620e:	460c      	mov	r4, r1
 8006210:	d904      	bls.n	800621c <_raise_r+0x14>
 8006212:	2316      	movs	r3, #22
 8006214:	6003      	str	r3, [r0, #0]
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800621e:	b112      	cbz	r2, 8006226 <_raise_r+0x1e>
 8006220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006224:	b94b      	cbnz	r3, 800623a <_raise_r+0x32>
 8006226:	4628      	mov	r0, r5
 8006228:	f000 f830 	bl	800628c <_getpid_r>
 800622c:	4622      	mov	r2, r4
 800622e:	4601      	mov	r1, r0
 8006230:	4628      	mov	r0, r5
 8006232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006236:	f000 b817 	b.w	8006268 <_kill_r>
 800623a:	2b01      	cmp	r3, #1
 800623c:	d00a      	beq.n	8006254 <_raise_r+0x4c>
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	d103      	bne.n	800624a <_raise_r+0x42>
 8006242:	2316      	movs	r3, #22
 8006244:	6003      	str	r3, [r0, #0]
 8006246:	2001      	movs	r0, #1
 8006248:	e7e7      	b.n	800621a <_raise_r+0x12>
 800624a:	2100      	movs	r1, #0
 800624c:	4620      	mov	r0, r4
 800624e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006252:	4798      	blx	r3
 8006254:	2000      	movs	r0, #0
 8006256:	e7e0      	b.n	800621a <_raise_r+0x12>

08006258 <raise>:
 8006258:	4b02      	ldr	r3, [pc, #8]	@ (8006264 <raise+0xc>)
 800625a:	4601      	mov	r1, r0
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	f7ff bfd3 	b.w	8006208 <_raise_r>
 8006262:	bf00      	nop
 8006264:	200000bc 	.word	0x200000bc

08006268 <_kill_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	2300      	movs	r3, #0
 800626c:	4d06      	ldr	r5, [pc, #24]	@ (8006288 <_kill_r+0x20>)
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	f7fc fd33 	bl	8002ce0 <_kill>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d102      	bne.n	8006284 <_kill_r+0x1c>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	b103      	cbz	r3, 8006284 <_kill_r+0x1c>
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	bf00      	nop
 8006288:	200004f4 	.word	0x200004f4

0800628c <_getpid_r>:
 800628c:	f7fc bd21 	b.w	8002cd2 <_getpid>

08006290 <_malloc_usable_size_r>:
 8006290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006294:	1f18      	subs	r0, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfbc      	itt	lt
 800629a:	580b      	ldrlt	r3, [r1, r0]
 800629c:	18c0      	addlt	r0, r0, r3
 800629e:	4770      	bx	lr

080062a0 <__swhatbuf_r>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a8:	4615      	mov	r5, r2
 80062aa:	2900      	cmp	r1, #0
 80062ac:	461e      	mov	r6, r3
 80062ae:	b096      	sub	sp, #88	@ 0x58
 80062b0:	da0c      	bge.n	80062cc <__swhatbuf_r+0x2c>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	2100      	movs	r1, #0
 80062b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062ba:	bf14      	ite	ne
 80062bc:	2340      	movne	r3, #64	@ 0x40
 80062be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062c2:	2000      	movs	r0, #0
 80062c4:	6031      	str	r1, [r6, #0]
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	b016      	add	sp, #88	@ 0x58
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	466a      	mov	r2, sp
 80062ce:	f000 f849 	bl	8006364 <_fstat_r>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	dbed      	blt.n	80062b2 <__swhatbuf_r+0x12>
 80062d6:	9901      	ldr	r1, [sp, #4]
 80062d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062e0:	4259      	negs	r1, r3
 80062e2:	4159      	adcs	r1, r3
 80062e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e8:	e7eb      	b.n	80062c2 <__swhatbuf_r+0x22>

080062ea <__smakebuf_r>:
 80062ea:	898b      	ldrh	r3, [r1, #12]
 80062ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ee:	079d      	lsls	r5, r3, #30
 80062f0:	4606      	mov	r6, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	d507      	bpl.n	8006306 <__smakebuf_r+0x1c>
 80062f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2301      	movs	r3, #1
 8006300:	6163      	str	r3, [r4, #20]
 8006302:	b003      	add	sp, #12
 8006304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006306:	466a      	mov	r2, sp
 8006308:	ab01      	add	r3, sp, #4
 800630a:	f7ff ffc9 	bl	80062a0 <__swhatbuf_r>
 800630e:	9f00      	ldr	r7, [sp, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	4639      	mov	r1, r7
 8006314:	4630      	mov	r0, r6
 8006316:	f7fe feb3 	bl	8005080 <_malloc_r>
 800631a:	b948      	cbnz	r0, 8006330 <__smakebuf_r+0x46>
 800631c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006320:	059a      	lsls	r2, r3, #22
 8006322:	d4ee      	bmi.n	8006302 <__smakebuf_r+0x18>
 8006324:	f023 0303 	bic.w	r3, r3, #3
 8006328:	f043 0302 	orr.w	r3, r3, #2
 800632c:	81a3      	strh	r3, [r4, #12]
 800632e:	e7e2      	b.n	80062f6 <__smakebuf_r+0xc>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	b15b      	cbz	r3, 800635a <__smakebuf_r+0x70>
 8006342:	4630      	mov	r0, r6
 8006344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006348:	f000 f81e 	bl	8006388 <_isatty_r>
 800634c:	b128      	cbz	r0, 800635a <__smakebuf_r+0x70>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	431d      	orrs	r5, r3
 800635e:	81a5      	strh	r5, [r4, #12]
 8006360:	e7cf      	b.n	8006302 <__smakebuf_r+0x18>
	...

08006364 <_fstat_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	2300      	movs	r3, #0
 8006368:	4d06      	ldr	r5, [pc, #24]	@ (8006384 <_fstat_r+0x20>)
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	4611      	mov	r1, r2
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	f7fc fd14 	bl	8002d9e <_fstat>
 8006376:	1c43      	adds	r3, r0, #1
 8006378:	d102      	bne.n	8006380 <_fstat_r+0x1c>
 800637a:	682b      	ldr	r3, [r5, #0]
 800637c:	b103      	cbz	r3, 8006380 <_fstat_r+0x1c>
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	bd38      	pop	{r3, r4, r5, pc}
 8006382:	bf00      	nop
 8006384:	200004f4 	.word	0x200004f4

08006388 <_isatty_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	2300      	movs	r3, #0
 800638c:	4d05      	ldr	r5, [pc, #20]	@ (80063a4 <_isatty_r+0x1c>)
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	f7fc fd12 	bl	8002dbc <_isatty>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_isatty_r+0x1a>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_isatty_r+0x1a>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	200004f4 	.word	0x200004f4

080063a8 <_init>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	bf00      	nop
 80063ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ae:	bc08      	pop	{r3}
 80063b0:	469e      	mov	lr, r3
 80063b2:	4770      	bx	lr

080063b4 <_fini>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr
